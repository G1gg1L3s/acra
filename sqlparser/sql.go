// Code generated by goyacc -o sql.go sql.y. DO NOT EDIT.

//line sql.y:18
package sqlparser

import __yyfmt__ "fmt"

//line sql.y:18

import "github.com/cossacklabs/acra/sqlparser/dialect/mysql"

func setParseTree(yylex interface{}, stmt Statement) {
	yylex.(*Tokenizer).ParseTree = stmt
}

func setAllowComments(yylex interface{}, allow bool) {
	yylex.(*Tokenizer).AllowComments = allow
}

func setDDL(yylex interface{}, ddl *DDL) {
	yylex.(*Tokenizer).partialDDL = ddl
}

func incNesting(yylex interface{}) bool {
	yylex.(*Tokenizer).nesting++
	if yylex.(*Tokenizer).nesting == 200 {
		return true
	}
	return false
}

func decNesting(yylex interface{}) {
	yylex.(*Tokenizer).nesting--
}

// forceEOF forces the lexer to end prematurely. Not all SQL statements
// are supported by the Parser, thus calling forceEOF will make the lexer
// return EOF early.
func forceEOF(yylex interface{}) {
	yylex.(*Tokenizer).ForceEOF = true
}

//line sql.y:55
type yySymType struct {
	yys                int
	empty              struct{}
	statement          Statement
	selStmt            SelectStatement
	ddl                *DDL
	ins                *Insert
	byt                byte
	bytes              []byte
	bytes2             [][]byte
	str                string
	strs               []string
	selectExprs        SelectExprs
	selectExpr         SelectExpr
	columns            Columns
	partitions         Partitions
	colName            *ColName
	tableExprs         TableExprs
	tableExpr          TableExpr
	joinCondition      JoinCondition
	tableName          TableName
	tableNames         TableNames
	indexHints         *IndexHints
	returning          Returning
	expr               Expr
	exprs              Exprs
	boolVal            BoolVal
	colTuple           ColTuple
	values             Values
	valTuple           ValTuple
	subquery           *Subquery
	whens              []*When
	when               *When
	orderBy            OrderBy
	order              *Order
	limit              *Limit
	updateExprs        UpdateExprs
	setExprs           SetExprs
	updateExpr         *UpdateExpr
	setExpr            *SetExpr
	colIdent           ColIdent
	tableIdent         TableIdent
	usingInExecuteList UsingInExecuteList
	convertType        *ConvertType
	aliasedTableName   *AliasedTableExpr
	TableSpec          *TableSpec
	columnType         ColumnType
	columnTypes        []ColumnType
	colKeyOpt          ColumnKeyOption
	optVal             *SQLVal
	LengthScaleOption  LengthScaleOption
	columnDefinition   *ColumnDefinition
	indexDefinition    *IndexDefinition
	indexInfo          *IndexInfo
	indexOption        *IndexOption
	indexOptions       []*IndexOption
	indexColumn        *IndexColumn
	indexColumns       []*IndexColumn
	partDefs           []*PartitionDefinition
	partDef            *PartitionDefinition
	partSpec           *PartitionSpec
	vindexParam        VindexParam
	vindexParams       []VindexParam
	showFilter         *ShowFilter
	preparedQuery      PreparedQuery
	intervalExpr       *IntervalExpr
}

const LEX_ERROR = 57346
const UNION = 57347
const SELECT = 57348
const STREAM = 57349
const INSERT = 57350
const UPDATE = 57351
const DELETE = 57352
const FROM = 57353
const WHERE = 57354
const GROUP = 57355
const HAVING = 57356
const ORDER = 57357
const BY = 57358
const LIMIT = 57359
const OFFSET = 57360
const FOR = 57361
const ALL = 57362
const DISTINCT = 57363
const AS = 57364
const EXISTS = 57365
const ASC = 57366
const DESC = 57367
const INTO = 57368
const DUPLICATE = 57369
const KEY = 57370
const DEFAULT = 57371
const SET = 57372
const LOCK = 57373
const KEYS = 57374
const VALUES = 57375
const LAST_INSERT_ID = 57376
const NEXT = 57377
const VALUE = 57378
const SHARE = 57379
const MODE = 57380
const SQL_NO_CACHE = 57381
const SQL_CACHE = 57382
const JOIN = 57383
const STRAIGHT_JOIN = 57384
const LEFT = 57385
const RIGHT = 57386
const INNER = 57387
const OUTER = 57388
const CROSS = 57389
const NATURAL = 57390
const USE = 57391
const FORCE = 57392
const ON = 57393
const USING = 57394
const INTERVAL = 57395
const ID = 57396
const PG_ESCAPE_STRING = 57397
const HEX = 57398
const SINGLE_QUOTE_STRING = 57399
const DOUBLE_QUOTE_STRING = 57400
const BACK_QUOTE_STRING = 57401
const INTEGRAL = 57402
const FLOAT = 57403
const HEXNUM = 57404
const VALUE_ARG = 57405
const COMMENT = 57406
const COMMENT_KEYWORD = 57407
const BIT_LITERAL = 57408
const DOLLAR_SIGN = 57409
const LIST_ARG = 57410
const NULL = 57411
const TRUE = 57412
const FALSE = 57413
const MICROSECOND = 57414
const SECOND = 57415
const MINUTE = 57416
const HOUR = 57417
const DAY = 57418
const WEEK = 57419
const MONTH = 57420
const QUARTER = 57421
const SECOND_MICROSECOND = 57422
const MINUTE_MICROSECOND = 57423
const MINUTE_SECOND = 57424
const HOUR_MICROSECOND = 57425
const HOUR_SECOND = 57426
const HOUR_MINUTE = 57427
const DAY_MICROSECOND = 57428
const DAY_SECOND = 57429
const DAY_MINUTE = 57430
const DAY_HOUR = 57431
const YEAR_MONTH = 57432
const YEAR = 57433
const OR = 57434
const AND = 57435
const NOT = 57436
const BETWEEN = 57437
const CASE = 57438
const WHEN = 57439
const THEN = 57440
const ELSE = 57441
const END = 57442
const LE = 57443
const GE = 57444
const NE = 57445
const NULL_SAFE_EQUAL = 57446
const IS = 57447
const LIKE = 57448
const REGEXP = 57449
const IN = 57450
const SHIFT_LEFT = 57451
const SHIFT_RIGHT = 57452
const DIV = 57453
const MOD = 57454
const UNARY = 57455
const COLLATE = 57456
const BINARY = 57457
const UNDERSCORE_BINARY = 57458
const JSON_EXTRACT_OP = 57459
const JSON_UNQUOTE_EXTRACT_OP = 57460
const CREATE = 57461
const ALTER = 57462
const DROP = 57463
const RENAME = 57464
const ANALYZE = 57465
const ADD = 57466
const SCHEMA = 57467
const TABLE = 57468
const INDEX = 57469
const VIEW = 57470
const TO = 57471
const IGNORE = 57472
const IF = 57473
const UNIQUE = 57474
const PRIMARY = 57475
const COLUMN = 57476
const CONSTRAINT = 57477
const SPATIAL = 57478
const FULLTEXT = 57479
const FOREIGN = 57480
const KEY_BLOCK_SIZE = 57481
const SHOW = 57482
const DESCRIBE = 57483
const EXPLAIN = 57484
const DATE = 57485
const ESCAPE = 57486
const REPAIR = 57487
const OPTIMIZE = 57488
const TRUNCATE = 57489
const MAXVALUE = 57490
const PARTITION = 57491
const REORGANIZE = 57492
const LESS = 57493
const THAN = 57494
const PROCEDURE = 57495
const TRIGGER = 57496
const VINDEX = 57497
const VINDEXES = 57498
const STATUS = 57499
const VARIABLES = 57500
const BEGIN = 57501
const START = 57502
const TRANSACTION = 57503
const COMMIT = 57504
const ROLLBACK = 57505
const DEALLOCATE = 57506
const PREPARE = 57507
const EXECUTE = 57508
const BIT = 57509
const TINYINT = 57510
const SMALLINT = 57511
const MEDIUMINT = 57512
const INT = 57513
const INTEGER = 57514
const BIGINT = 57515
const INTNUM = 57516
const REAL = 57517
const DOUBLE = 57518
const FLOAT_TYPE = 57519
const DECIMAL = 57520
const NUMERIC = 57521
const TIME = 57522
const TIMESTAMP = 57523
const DATETIME = 57524
const CHAR = 57525
const VARCHAR = 57526
const BOOL = 57527
const CHARACTER = 57528
const VARBINARY = 57529
const NCHAR = 57530
const TEXT = 57531
const TINYTEXT = 57532
const MEDIUMTEXT = 57533
const LONGTEXT = 57534
const BLOB = 57535
const TINYBLOB = 57536
const MEDIUMBLOB = 57537
const LONGBLOB = 57538
const JSON = 57539
const ENUM = 57540
const GEOMETRY = 57541
const POINT = 57542
const LINESTRING = 57543
const POLYGON = 57544
const GEOMETRYCOLLECTION = 57545
const MULTIPOINT = 57546
const MULTILINESTRING = 57547
const MULTIPOLYGON = 57548
const NULLX = 57549
const AUTO_INCREMENT = 57550
const APPROXNUM = 57551
const SIGNED = 57552
const UNSIGNED = 57553
const ZEROFILL = 57554
const DATABASES = 57555
const TABLES = 57556
const VITESS_KEYSPACES = 57557
const VITESS_SHARDS = 57558
const VITESS_TABLETS = 57559
const VSCHEMA_TABLES = 57560
const EXTENDED = 57561
const FULL = 57562
const PROCESSLIST = 57563
const NAMES = 57564
const CHARSET = 57565
const GLOBAL = 57566
const SESSION = 57567
const LOCAL = 57568
const ISOLATION = 57569
const LEVEL = 57570
const READ = 57571
const WRITE = 57572
const ONLY = 57573
const REPEATABLE = 57574
const COMMITTED = 57575
const UNCOMMITTED = 57576
const SERIALIZABLE = 57577
const CURRENT_TIMESTAMP = 57578
const DATABASE = 57579
const CURRENT_DATE = 57580
const CURRENT_TIME = 57581
const LOCALTIME = 57582
const LOCALTIMESTAMP = 57583
const UTC_DATE = 57584
const UTC_TIME = 57585
const UTC_TIMESTAMP = 57586
const REPLACE = 57587
const CONVERT = 57588
const CAST = 57589
const SUBSTR = 57590
const SUBSTRING = 57591
const GROUP_CONCAT = 57592
const SEPARATOR = 57593
const MATCH = 57594
const AGAINST = 57595
const BOOLEAN = 57596
const LANGUAGE = 57597
const WITH = 57598
const QUERY = 57599
const EXPANSION = 57600
const UNUSED = 57601
const RETURNING = 57602

var yyToknames = [...]string{
	"$end",
	"error",
	"$unk",
	"LEX_ERROR",
	"UNION",
	"SELECT",
	"STREAM",
	"INSERT",
	"UPDATE",
	"DELETE",
	"FROM",
	"WHERE",
	"GROUP",
	"HAVING",
	"ORDER",
	"BY",
	"LIMIT",
	"OFFSET",
	"FOR",
	"ALL",
	"DISTINCT",
	"AS",
	"EXISTS",
	"ASC",
	"DESC",
	"INTO",
	"DUPLICATE",
	"KEY",
	"DEFAULT",
	"SET",
	"LOCK",
	"KEYS",
	"VALUES",
	"LAST_INSERT_ID",
	"NEXT",
	"VALUE",
	"SHARE",
	"MODE",
	"SQL_NO_CACHE",
	"SQL_CACHE",
	"JOIN",
	"STRAIGHT_JOIN",
	"LEFT",
	"RIGHT",
	"INNER",
	"OUTER",
	"CROSS",
	"NATURAL",
	"USE",
	"FORCE",
	"ON",
	"USING",
	"'('",
	"','",
	"')'",
	"INTERVAL",
	"ID",
	"PG_ESCAPE_STRING",
	"HEX",
	"SINGLE_QUOTE_STRING",
	"DOUBLE_QUOTE_STRING",
	"BACK_QUOTE_STRING",
	"INTEGRAL",
	"FLOAT",
	"HEXNUM",
	"VALUE_ARG",
	"COMMENT",
	"COMMENT_KEYWORD",
	"BIT_LITERAL",
	"DOLLAR_SIGN",
	"LIST_ARG",
	"NULL",
	"TRUE",
	"FALSE",
	"MICROSECOND",
	"SECOND",
	"MINUTE",
	"HOUR",
	"DAY",
	"WEEK",
	"MONTH",
	"QUARTER",
	"SECOND_MICROSECOND",
	"MINUTE_MICROSECOND",
	"MINUTE_SECOND",
	"HOUR_MICROSECOND",
	"HOUR_SECOND",
	"HOUR_MINUTE",
	"DAY_MICROSECOND",
	"DAY_SECOND",
	"DAY_MINUTE",
	"DAY_HOUR",
	"YEAR_MONTH",
	"YEAR",
	"OR",
	"AND",
	"NOT",
	"'!'",
	"BETWEEN",
	"CASE",
	"WHEN",
	"THEN",
	"ELSE",
	"END",
	"'='",
	"'<'",
	"'>'",
	"LE",
	"GE",
	"NE",
	"NULL_SAFE_EQUAL",
	"IS",
	"LIKE",
	"REGEXP",
	"IN",
	"'|'",
	"'&'",
	"SHIFT_LEFT",
	"SHIFT_RIGHT",
	"'+'",
	"'-'",
	"'*'",
	"'/'",
	"DIV",
	"'%'",
	"MOD",
	"'^'",
	"'~'",
	"UNARY",
	"COLLATE",
	"BINARY",
	"UNDERSCORE_BINARY",
	"'.'",
	"JSON_EXTRACT_OP",
	"JSON_UNQUOTE_EXTRACT_OP",
	"CREATE",
	"ALTER",
	"DROP",
	"RENAME",
	"ANALYZE",
	"ADD",
	"SCHEMA",
	"TABLE",
	"INDEX",
	"VIEW",
	"TO",
	"IGNORE",
	"IF",
	"UNIQUE",
	"PRIMARY",
	"COLUMN",
	"CONSTRAINT",
	"SPATIAL",
	"FULLTEXT",
	"FOREIGN",
	"KEY_BLOCK_SIZE",
	"SHOW",
	"DESCRIBE",
	"EXPLAIN",
	"DATE",
	"ESCAPE",
	"REPAIR",
	"OPTIMIZE",
	"TRUNCATE",
	"MAXVALUE",
	"PARTITION",
	"REORGANIZE",
	"LESS",
	"THAN",
	"PROCEDURE",
	"TRIGGER",
	"VINDEX",
	"VINDEXES",
	"STATUS",
	"VARIABLES",
	"BEGIN",
	"START",
	"TRANSACTION",
	"COMMIT",
	"ROLLBACK",
	"DEALLOCATE",
	"PREPARE",
	"EXECUTE",
	"BIT",
	"TINYINT",
	"SMALLINT",
	"MEDIUMINT",
	"INT",
	"INTEGER",
	"BIGINT",
	"INTNUM",
	"REAL",
	"DOUBLE",
	"FLOAT_TYPE",
	"DECIMAL",
	"NUMERIC",
	"TIME",
	"TIMESTAMP",
	"DATETIME",
	"CHAR",
	"VARCHAR",
	"BOOL",
	"CHARACTER",
	"VARBINARY",
	"NCHAR",
	"TEXT",
	"TINYTEXT",
	"MEDIUMTEXT",
	"LONGTEXT",
	"BLOB",
	"TINYBLOB",
	"MEDIUMBLOB",
	"LONGBLOB",
	"JSON",
	"ENUM",
	"GEOMETRY",
	"POINT",
	"LINESTRING",
	"POLYGON",
	"GEOMETRYCOLLECTION",
	"MULTIPOINT",
	"MULTILINESTRING",
	"MULTIPOLYGON",
	"NULLX",
	"AUTO_INCREMENT",
	"APPROXNUM",
	"SIGNED",
	"UNSIGNED",
	"ZEROFILL",
	"DATABASES",
	"TABLES",
	"VITESS_KEYSPACES",
	"VITESS_SHARDS",
	"VITESS_TABLETS",
	"VSCHEMA_TABLES",
	"EXTENDED",
	"FULL",
	"PROCESSLIST",
	"NAMES",
	"CHARSET",
	"GLOBAL",
	"SESSION",
	"LOCAL",
	"ISOLATION",
	"LEVEL",
	"READ",
	"WRITE",
	"ONLY",
	"REPEATABLE",
	"COMMITTED",
	"UNCOMMITTED",
	"SERIALIZABLE",
	"CURRENT_TIMESTAMP",
	"DATABASE",
	"CURRENT_DATE",
	"CURRENT_TIME",
	"LOCALTIME",
	"LOCALTIMESTAMP",
	"UTC_DATE",
	"UTC_TIME",
	"UTC_TIMESTAMP",
	"REPLACE",
	"CONVERT",
	"CAST",
	"SUBSTR",
	"SUBSTRING",
	"GROUP_CONCAT",
	"SEPARATOR",
	"MATCH",
	"AGAINST",
	"BOOLEAN",
	"LANGUAGE",
	"WITH",
	"QUERY",
	"EXPANSION",
	"UNUSED",
	"RETURNING",
	"';'",
}

var yyStatenames = [...]string{}

const yyEofCode = 1
const yyErrCode = 2
const yyInitialStackSize = 16

//line yacctab:1
var yyExca = [...]int{
	-1, 1,
	1, -1,
	-2, 0,
	-1, 3,
	5, 30,
	-2, 4,
	-1, 39,
	174, 281,
	175, 281,
	-2, 269,
	-1, 252,
	71, 543,
	97, 543,
	99, 543,
	105, 543,
	106, 543,
	107, 543,
	108, 543,
	109, 543,
	110, 543,
	111, 543,
	113, 543,
	114, 543,
	115, 543,
	116, 543,
	117, 543,
	118, 543,
	119, 543,
	120, 543,
	121, 543,
	122, 543,
	123, 543,
	124, 543,
	125, 543,
	126, 543,
	127, 543,
	130, 543,
	-2, 397,
	-1, 253,
	133, 637,
	-2, 532,
	-1, 254,
	133, 639,
	-2, 531,
	-1, 255,
	133, 640,
	-2, 633,
	-1, 256,
	133, 641,
	-2, 634,
	-1, 331,
	105, 792,
	-2, 65,
	-1, 332,
	105, 820,
	-2, 66,
	-1, 333,
	105, 780,
	-2, 67,
	-1, 337,
	105, 764,
	146, 764,
	-2, 599,
	-1, 339,
	105, 802,
	146, 802,
	-2, 601,
	-1, 562,
	71, 531,
	133, 639,
	-2, 464,
	-1, 613,
	52, 45,
	54, 45,
	-2, 47,
	-1, 769,
	133, 643,
	-2, 636,
	-1, 1002,
	5, 31,
	-2, 429,
	-1, 1027,
	5, 30,
	-2, 569,
	-1, 1261,
	5, 31,
	-2, 570,
	-1, 1308,
	5, 30,
	-2, 572,
	-1, 1371,
	5, 31,
	-2, 573,
}

const yyPrivate = 57344

const yyLast = 11463

var yyAct = [...]int{
	288, 53, 1362, 941, 692, 559, 1319, 509, 258, 855,
	558, 3, 873, 1165, 1166, 287, 1193, 1267, 921, 1090,
	608, 232, 1162, 935, 897, 223, 606, 896, 1031, 1047,
	856, 794, 336, 994, 640, 1093, 1138, 1081, 24, 625,
	803, 59, 1036, 907, 771, 899, 727, 806, 843, 487,
	493, 256, 624, 931, 53, 315, 433, 329, 595, 259,
	507, 314, 237, 241, 231, 851, 610, 499, 319, 325,
	324, 322, 224, 225, 226, 227, 893, 58, 1256, 1391,
	1381, 1389, 1369, 976, 1387, 82, 942, 1380, 1157, 195,
	1253, 1368, 195, 437, 313, 238, 575, 54, 29, 30,
	236, 1328, 1187, 195, 805, 887, 187, 183, 184, 185,
	626, 1055, 627, 245, 1054, 888, 889, 1056, 722, 195,
	195, 82, 1188, 1189, 475, 195, 477, 82, 634, 635,
	636, 1200, 1201, 458, 724, 1072, 914, 1204, 915, 1279,
	1202, 725, 1294, 922, 1241, 63, 732, 446, 1239, 634,
	635, 636, 228, 623, 222, 1344, 523, 522, 532, 533,
	525, 526, 527, 528, 529, 530, 531, 524, 1388, 262,
	534, 472, 473, 65, 66, 67, 68, 69, 470, 471,
	1386, 852, 1363, 1114, 853, 447, 1320, 874, 876, 440,
	691, 181, 26, 27, 54, 29, 30, 180, 1046, 181,
	251, 700, 1322, 464, 464, 464, 464, 1326, 628, 464,
	1045, 45, 1349, 1044, 435, 909, 31, 464, 186, 460,
	443, 462, 909, 909, 198, 182, 546, 547, 1264, 1125,
	483, 958, 195, 1010, 195, 40, 1111, 318, 53, 56,
	195, 988, 1113, 743, 434, 957, 459, 461, 496, 514,
	195, 1066, 453, 543, 82, 82, 82, 82, 545, 894,
	82, 527, 528, 529, 530, 531, 524, 1208, 82, 534,
	534, 524, 968, 962, 534, 740, 557, 495, 1118, 506,
	195, 1354, 1218, 1034, 956, 875, 629, 1159, 922, 561,
	1321, 564, 565, 566, 567, 568, 569, 570, 571, 82,
	574, 576, 576, 576, 576, 576, 576, 576, 576, 584,
	585, 586, 587, 1345, 1367, 505, 504, 911, 853, 844,
	607, 1203, 33, 34, 36, 35, 38, 695, 1327, 1325,
	457, 908, 506, 449, 450, 451, 906, 904, 908, 908,
	905, 1209, 912, 39, 46, 47, 1139, 549, 48, 49,
	37, 55, 439, 953, 950, 951, 1070, 949, 1112, 1007,
	1110, 504, 41, 42, 195, 43, 44, 50, 51, 52,
	802, 195, 195, 195, 778, 1141, 969, 506, 82, 1117,
	1357, 632, 960, 963, 497, 501, 179, 82, 776, 777,
	775, 1373, 1006, 614, 1005, 56, 622, 621, 577, 578,
	579, 580, 581, 582, 583, 746, 747, 844, 1295, 1017,
	1143, 1285, 1147, 774, 1142, 1140, 1149, 505, 504, 955,
	1145, 761, 763, 764, 1161, 1284, 463, 544, 1085, 1144,
	441, 442, 505, 504, 506, 505, 504, 464, 985, 986,
	987, 954, 1146, 1148, 486, 464, 762, 1084, 55, 506,
	1073, 1352, 506, 312, 1196, 485, 464, 464, 464, 464,
	464, 464, 464, 464, 550, 552, 553, 554, 555, 556,
	1195, 464, 464, 464, 464, 1332, 505, 504, 795, 959,
	742, 634, 635, 636, 1067, 944, 709, 797, 82, 318,
	563, 706, 961, 506, 195, 195, 82, 275, 195, 705,
	696, 195, 694, 247, 689, 195, 455, 82, 82, 82,
	82, 82, 82, 82, 82, 448, 741, 748, 736, 1331,
	728, 728, 82, 82, 82, 82, 434, 733, 733, 734,
	195, 80, 230, 772, 1377, 486, 195, 707, 525, 526,
	527, 528, 529, 530, 531, 524, 53, 769, 534, 1205,
	82, 634, 635, 636, 195, 1312, 1360, 505, 504, 1032,
	82, 750, 561, 1312, 486, 1312, 1313, 330, 808, 765,
	1276, 1275, 810, 438, 506, 1184, 486, 836, 839, 1259,
	796, 1057, 617, 845, 634, 635, 636, 1263, 486, 1215,
	1214, 1211, 1212, 319, 319, 319, 319, 319, 767, 60,
	857, 1211, 1210, 1000, 486, 591, 798, 801, 607, 1033,
	877, 970, 486, 26, 592, 486, 319, 26, 810, 808,
	486, 639, 638, 618, 1163, 616, 848, 1032, 592, 592,
	467, 468, 469, 1217, 26, 474, 1213, 1025, 1000, 841,
	1026, 195, 881, 479, 195, 195, 195, 195, 195, 859,
	860, 592, 862, 1059, 858, 1128, 195, 861, 886, 195,
	56, 1307, 870, 195, 56, 1033, 1012, 195, 195, 832,
	833, 82, 923, 924, 925, 840, 885, 883, 878, 879,
	1000, 56, 880, 972, 616, 620, 619, 773, 744, 847,
	82, 849, 850, 1009, 56, 464, 901, 464, 1000, 481,
	466, 466, 466, 466, 238, 464, 466, 1032, 693, 1011,
	482, 1289, 937, 916, 466, 936, 1178, 770, 1062, 932,
	779, 780, 781, 782, 783, 784, 785, 786, 787, 788,
	789, 790, 791, 792, 793, 939, 1008, 490, 494, 933,
	934, 56, 927, 195, 926, 513, 82, 71, 82, 484,
	1198, 56, 195, 1163, 515, 195, 82, 1037, 1038, 1086,
	1040, 703, 318, 318, 318, 318, 318, 465, 478, 989,
	867, 973, 756, 865, 1043, 868, 769, 318, 866, 869,
	1042, 601, 602, 864, 863, 318, 1385, 917, 918, 919,
	920, 772, 560, 242, 243, 977, 1379, 1124, 978, 1384,
	1029, 983, 573, 928, 929, 930, 982, 1077, 523, 522,
	532, 533, 525, 526, 527, 528, 529, 530, 531, 524,
	990, 884, 534, 1069, 330, 637, 456, 1359, 1358, 890,
	1305, 1063, 1257, 631, 1290, 500, 946, 334, 522, 532,
	533, 525, 526, 527, 528, 529, 530, 531, 524, 498,
	702, 534, 1028, 995, 1030, 1122, 605, 239, 240, 500,
	984, 233, 1027, 690, 1337, 234, 597, 600, 601, 602,
	598, 699, 599, 603, 1292, 60, 1037, 1038, 488, 1336,
	1033, 319, 710, 711, 712, 713, 714, 715, 716, 717,
	489, 1016, 502, 981, 1346, 1280, 739, 718, 719, 720,
	721, 980, 62, 64, 1041, 730, 7, 1050, 1049, 999,
	1051, 532, 533, 525, 526, 527, 528, 529, 530, 531,
	524, 1060, 615, 534, 731, 6, 1052, 729, 5, 82,
	57, 1, 195, 270, 466, 269, 1074, 1075, 811, 737,
	1058, 464, 466, 1255, 548, 773, 1014, 943, 82, 1064,
	1065, 1089, 749, 466, 466, 466, 466, 466, 466, 466,
	466, 952, 1361, 1318, 1192, 1083, 464, 903, 466, 466,
	466, 466, 1082, 1082, 1092, 895, 432, 991, 992, 993,
	70, 1353, 1101, 902, 1324, 1278, 1106, 910, 1071, 913,
	1197, 82, 82, 1356, 82, 1068, 752, 645, 1076, 644,
	1078, 1079, 1080, 642, 643, 1121, 513, 641, 758, 759,
	647, 1099, 466, 646, 807, 809, 735, 82, 207, 326,
	195, 195, 206, 327, 195, 1132, 604, 1168, 630, 53,
	1131, 195, 846, 938, 857, 1164, 1171, 503, 1150, 1169,
	82, 857, 1167, 769, 1151, 1180, 1181, 1182, 1137, 72,
	318, 1109, 796, 1108, 948, 1116, 1158, 723, 967, 476,
	1172, 210, 872, 1174, 542, 560, 837, 837, 979, 1053,
	834, 835, 837, 1173, 335, 1170, 745, 492, 1335, 1186,
	82, 1291, 82, 1015, 572, 842, 1191, 1190, 261, 837,
	760, 1185, 274, 271, 334, 273, 272, 751, 1100, 1024,
	516, 260, 249, 1105, 1102, 1095, 1096, 1103, 1098, 1097,
	317, 82, 588, 82, 82, 1199, 596, 466, 594, 1219,
	1104, 945, 593, 947, 1039, 1035, 1107, 316, 1127, 319,
	1252, 966, 1221, 892, 1343, 1224, 466, 755, 195, 28,
	61, 597, 600, 601, 602, 598, 82, 599, 603, 244,
	1242, 1206, 1207, 23, 22, 1230, 1229, 21, 1251, 82,
	195, 728, 19, 1226, 18, 17, 82, 1237, 733, 1228,
	20, 16, 15, 14, 32, 13, 12, 82, 11, 10,
	195, 9, 8, 4, 235, 25, 2, 1258, 0, 0,
	0, 971, 466, 0, 466, 1266, 1134, 1135, 1269, 1270,
	1271, 0, 466, 0, 1272, 0, 0, 1274, 0, 1152,
	1153, 0, 1155, 1156, 0, 1060, 0, 464, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1281,
	82, 1283, 82, 82, 82, 195, 82, 1287, 0, 0,
	0, 466, 82, 1288, 0, 974, 975, 0, 494, 0,
	0, 0, 0, 997, 1293, 0, 0, 1282, 0, 998,
	1168, 0, 1304, 1309, 0, 0, 1002, 0, 82, 82,
	82, 1310, 1311, 1308, 1306, 1167, 0, 0, 1234, 1235,
	0, 1236, 768, 0, 1238, 1317, 1240, 0, 1003, 1004,
	0, 1334, 0, 1323, 0, 0, 1013, 0, 318, 1302,
	0, 1019, 0, 1020, 1021, 1022, 1023, 1333, 1168, 0,
	53, 0, 1001, 0, 0, 82, 82, 0, 0, 0,
	1348, 1347, 0, 1167, 0, 1351, 0, 0, 82, 0,
	0, 0, 0, 1277, 1232, 0, 491, 0, 0, 0,
	0, 82, 0, 1365, 0, 0, 0, 0, 1018, 0,
	0, 0, 0, 320, 0, 857, 1370, 1372, 1329, 0,
	1330, 0, 0, 0, 82, 1375, 0, 1088, 1355, 0,
	0, 1101, 204, 0, 190, 1048, 0, 221, 0, 1382,
	1383, 0, 0, 0, 0, 0, 0, 334, 229, 1390,
	0, 189, 1115, 0, 466, 0, 0, 216, 0, 0,
	1099, 82, 248, 1374, 190, 190, 898, 0, 0, 0,
	190, 0, 0, 0, 0, 82, 0, 0, 0, 0,
	0, 0, 323, 0, 0, 0, 0, 436, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1087, 466, 0,
	466, 0, 0, 0, 0, 0, 0, 1296, 1297, 0,
	1298, 1299, 1300, 0, 0, 1136, 0, 0, 0, 0,
	0, 0, 0, 466, 0, 0, 0, 0, 0, 0,
	0, 199, 0, 0, 0, 0, 201, 0, 0, 0,
	0, 0, 0, 208, 203, 0, 466, 1100, 0, 0,
	0, 0, 1105, 1102, 1095, 1096, 1103, 1098, 1097, 0,
	0, 0, 0, 1183, 0, 0, 0, 0, 466, 1104,
	205, 768, 0, 211, 0, 1094, 0, 190, 209, 190,
	0, 1160, 0, 837, 0, 190, 513, 0, 1048, 0,
	837, 0, 0, 0, 444, 190, 445, 1175, 1176, 0,
	0, 1177, 452, 200, 1179, 0, 0, 0, 0, 0,
	0, 0, 454, 0, 0, 0, 0, 466, 0, 466,
	1194, 0, 0, 0, 0, 480, 0, 0, 1249, 486,
	202, 0, 212, 213, 214, 215, 220, 0, 0, 0,
	0, 218, 217, 219, 0, 0, 0, 1231, 0, 0,
	0, 1392, 1220, 0, 1233, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1222, 1243, 1244, 1245, 0,
	0, 1248, 1225, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1227, 466, 1260, 1261, 1262, 0, 1265, 486,
	523, 522, 532, 533, 525, 526, 527, 528, 529, 530,
	531, 524, 0, 1286, 534, 0, 0, 0, 0, 190,
	0, 0, 0, 0, 0, 0, 190, 612, 190, 0,
	0, 0, 0, 0, 898, 1254, 590, 1246, 486, 0,
	0, 0, 560, 0, 0, 613, 1268, 0, 1268, 1268,
	1268, 0, 1273, 0, 0, 0, 0, 0, 466, 0,
	523, 522, 532, 533, 525, 526, 527, 528, 529, 530,
	531, 524, 0, 0, 534, 0, 0, 0, 1301, 0,
	1091, 0, 0, 0, 466, 466, 466, 0, 0, 0,
	0, 0, 0, 0, 0, 1314, 1315, 1316, 0, 523,
	522, 532, 533, 525, 526, 527, 528, 529, 530, 531,
	524, 0, 0, 534, 0, 0, 0, 0, 0, 0,
	0, 1338, 1339, 1340, 1341, 1342, 1130, 0, 0, 0,
	560, 513, 513, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1194, 0, 0, 0, 1154, 190,
	190, 0, 0, 190, 0, 0, 190, 1268, 0, 0,
	708, 0, 0, 0, 0, 0, 697, 698, 0, 1366,
	701, 0, 0, 704, 1371, 0, 0, 0, 0, 0,
	1350, 0, 0, 0, 0, 190, 0, 1376, 0, 0,
	0, 738, 0, 0, 0, 0, 0, 898, 0, 898,
	0, 0, 726, 662, 0, 0, 0, 0, 0, 190,
	1364, 560, 0, 0, 837, 0, 0, 513, 1394, 1395,
	0, 708, 0, 0, 0, 518, 757, 521, 0, 0,
	0, 1378, 0, 535, 536, 537, 538, 539, 540, 541,
	0, 519, 520, 517, 523, 522, 532, 533, 525, 526,
	527, 528, 529, 530, 531, 524, 0, 0, 534, 0,
	0, 0, 0, 1130, 248, 0, 0, 667, 0, 0,
	0, 248, 248, 0, 0, 838, 838, 248, 0, 0,
	0, 838, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 248, 248, 248, 248, 0, 190, 0, 838, 190,
	190, 190, 190, 190, 650, 0, 0, 0, 0, 0,
	0, 871, 0, 854, 190, 0, 0, 0, 612, 0,
	0, 0, 190, 190, 0, 0, 0, 0, 898, 0,
	0, 0, 0, 663, 0, 0, 0, 0, 1250, 0,
	882, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1091, 898, 677, 678, 679,
	680, 681, 682, 683, 0, 684, 685, 686, 687, 688,
	664, 665, 666, 648, 649, 676, 1247, 651, 0, 652,
	653, 654, 655, 656, 657, 658, 659, 660, 661, 668,
	669, 670, 671, 672, 673, 674, 675, 0, 190, 0,
	0, 0, 0, 0, 0, 0, 0, 190, 0, 0,
	190, 0, 0, 0, 132, 940, 0, 0, 508, 0,
	0, 0, 0, 99, 964, 0, 0, 965, 113, 0,
	115, 0, 0, 149, 125, 523, 522, 532, 533, 525,
	526, 527, 528, 529, 530, 531, 524, 0, 0, 534,
	708, 0, 0, 81, 0, 0, 510, 511, 512, 0,
	0, 0, 248, 0, 92, 0, 0, 0, 0, 0,
	0, 0, 0, 523, 522, 532, 533, 525, 526, 527,
	528, 529, 530, 531, 524, 0, 0, 534, 0, 0,
	0, 505, 504, 1133, 0, 0, 523, 522, 532, 533,
	525, 526, 527, 528, 529, 530, 531, 524, 506, 996,
	534, 248, 0, 523, 522, 532, 533, 525, 526, 527,
	528, 529, 530, 531, 524, 0, 0, 534, 0, 523,
	522, 532, 533, 525, 526, 527, 528, 529, 530, 531,
	524, 196, 0, 534, 0, 0, 138, 0, 248, 152,
	104, 103, 112, 0, 0, 0, 95, 0, 144, 134,
	164, 0, 135, 143, 116, 156, 139, 163, 197, 171,
	154, 170, 84, 153, 162, 93, 146, 0, 0, 0,
	86, 160, 151, 123, 108, 109, 85, 190, 142, 98,
	102, 97, 131, 157, 158, 96, 89, 169, 88, 90,
	168, 130, 155, 161, 124, 121, 87, 159, 122, 120,
	111, 100, 105, 136, 118, 137, 106, 127, 126, 128,
	551, 0, 0, 150, 166, 178, 0, 0, 172, 173,
	174, 175, 0, 0, 0, 129, 91, 107, 147, 119,
	110, 117, 141, 177, 133, 145, 94, 165, 148, 283,
	276, 799, 800, 0, 278, 279, 280, 281, 0, 0,
	277, 284, 0, 282, 0, 0, 83, 0, 114, 176,
	140, 101, 167, 0, 0, 1119, 1120, 0, 0, 1123,
	0, 0, 0, 0, 0, 0, 190, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 248, 0, 0, 0,
	0, 0, 0, 1126, 0, 0, 0, 248, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 708, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 838, 0, 0, 0, 0, 0, 0, 838,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 421, 411, 0, 383, 423, 361, 375, 431,
	376, 377, 404, 347, 391, 132, 373, 0, 364, 342,
	370, 343, 362, 385, 99, 388, 360, 413, 394, 113,
	429, 115, 399, 190, 149, 125, 0, 0, 387, 415,
	389, 409, 382, 405, 352, 398, 424, 374, 402, 425,
	1216, 0, 0, 384, 81, 190, 0, 634, 635, 636,
	900, 0, 0, 0, 0, 92, 0, 0, 0, 401,
	420, 372, 1223, 0, 0, 190, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 403, 341, 400, 0, 345, 348, 430, 418,
	367, 368, 1061, 0, 0, 0, 0, 0, 0, 386,
	390, 406, 380, 0, 0, 0, 0, 0, 0, 0,
	0, 365, 0, 397, 0, 0, 0, 349, 346, 0,
	612, 0, 0, 351, 0, 366, 407, 0, 340, 410,
	416, 381, 196, 419, 379, 378, 422, 138, 0, 0,
	152, 104, 103, 112, 414, 363, 371, 95, 369, 144,
	134, 164, 396, 135, 143, 116, 156, 139, 163, 197,
	171, 154, 170, 84, 153, 162, 93, 146, 0, 0,
	0, 86, 160, 151, 123, 108, 109, 85, 0, 142,
	98, 102, 97, 131, 157, 158, 96, 89, 169, 88,
	90, 168, 130, 155, 161, 124, 121, 87, 159, 122,
	120, 111, 100, 105, 136, 118, 137, 106, 127, 126,
	128, 0, 344, 0, 150, 166, 178, 359, 417, 172,
	173, 174, 175, 0, 0, 0, 129, 91, 107, 147,
	119, 110, 117, 141, 177, 133, 145, 94, 165, 148,
	355, 358, 353, 354, 392, 393, 426, 427, 428, 408,
	350, 0, 356, 357, 0, 412, 395, 83, 0, 114,
	176, 140, 101, 167, 0, 0, 0, 0, 421, 411,
	0, 383, 423, 361, 375, 431, 376, 377, 404, 347,
	391, 132, 373, 838, 364, 342, 370, 343, 362, 385,
	99, 388, 360, 413, 394, 113, 429, 115, 399, 0,
	149, 125, 0, 0, 387, 415, 389, 409, 382, 405,
	352, 398, 424, 374, 402, 425, 0, 0, 0, 384,
	81, 0, 0, 634, 635, 636, 900, 0, 0, 0,
	0, 92, 0, 0, 0, 401, 420, 372, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 403, 341,
	400, 0, 345, 348, 430, 418, 367, 368, 0, 0,
	0, 0, 0, 0, 0, 386, 390, 406, 380, 0,
	0, 0, 0, 0, 0, 0, 0, 365, 0, 397,
	0, 0, 0, 349, 346, 0, 0, 0, 0, 351,
	0, 366, 407, 0, 340, 410, 416, 381, 196, 419,
	379, 378, 422, 138, 0, 0, 152, 104, 103, 112,
	414, 363, 371, 95, 369, 144, 134, 164, 396, 135,
	143, 116, 156, 139, 163, 197, 171, 154, 170, 84,
	153, 162, 93, 146, 0, 0, 0, 86, 160, 151,
	123, 108, 109, 85, 0, 142, 98, 102, 97, 131,
	157, 158, 96, 89, 169, 88, 90, 168, 130, 155,
	161, 124, 121, 87, 159, 122, 120, 111, 100, 105,
	136, 118, 137, 106, 127, 126, 128, 0, 344, 0,
	150, 166, 178, 359, 417, 172, 173, 174, 175, 0,
	0, 0, 129, 91, 107, 147, 119, 110, 117, 141,
	177, 133, 145, 94, 165, 148, 355, 358, 353, 354,
	392, 393, 426, 427, 428, 408, 350, 0, 356, 357,
	0, 412, 395, 83, 0, 114, 176, 140, 101, 167,
	421, 411, 0, 383, 423, 361, 375, 431, 376, 377,
	404, 347, 391, 132, 373, 0, 364, 342, 370, 343,
	362, 385, 99, 388, 360, 413, 394, 113, 429, 115,
	399, 0, 149, 125, 0, 0, 387, 415, 389, 409,
	382, 405, 352, 398, 424, 374, 402, 425, 0, 0,
	0, 384, 255, 0, 0, 193, 191, 192, 0, 0,
	0, 0, 0, 92, 0, 0, 0, 401, 420, 372,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	403, 341, 400, 0, 345, 348, 430, 418, 367, 368,
	0, 0, 0, 0, 0, 0, 0, 386, 390, 406,
	380, 0, 0, 0, 0, 0, 0, 766, 0, 365,
	0, 397, 0, 0, 0, 349, 346, 0, 0, 0,
	0, 351, 0, 366, 407, 0, 340, 410, 416, 381,
	196, 419, 379, 378, 422, 138, 0, 0, 152, 104,
	103, 112, 414, 363, 371, 95, 369, 144, 134, 164,
	396, 135, 143, 116, 156, 139, 163, 197, 171, 154,
	170, 84, 153, 162, 93, 146, 0, 0, 0, 86,
	160, 151, 123, 108, 109, 85, 0, 142, 98, 102,
	97, 131, 157, 158, 96, 89, 169, 88, 90, 168,
	130, 155, 161, 124, 121, 87, 159, 122, 120, 111,
	100, 105, 136, 118, 137, 106, 127, 126, 128, 0,
	344, 0, 150, 166, 178, 359, 417, 172, 173, 174,
	175, 0, 0, 0, 129, 91, 107, 147, 119, 110,
	117, 141, 177, 133, 145, 94, 165, 148, 355, 358,
	353, 354, 392, 393, 426, 427, 428, 408, 350, 0,
	356, 357, 0, 412, 395, 83, 0, 114, 176, 140,
	101, 167, 421, 411, 0, 383, 423, 361, 375, 431,
	376, 377, 404, 347, 391, 132, 373, 0, 364, 342,
	370, 343, 362, 385, 99, 388, 360, 413, 394, 113,
	429, 115, 399, 0, 149, 125, 0, 0, 387, 415,
	389, 409, 382, 405, 352, 398, 424, 374, 402, 425,
	0, 0, 0, 384, 255, 0, 0, 193, 191, 192,
	0, 0, 0, 0, 0, 92, 0, 0, 0, 401,
	420, 372, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 403, 341, 400, 0, 345, 348, 430, 418,
	367, 368, 0, 0, 0, 0, 0, 0, 0, 386,
	390, 406, 380, 0, 0, 0, 0, 0, 0, 0,
	0, 365, 0, 397, 0, 0, 0, 349, 346, 0,
	0, 0, 0, 351, 0, 366, 407, 0, 340, 410,
	416, 381, 196, 419, 379, 378, 422, 138, 0, 0,
	152, 104, 103, 112, 414, 363, 371, 95, 369, 144,
	134, 164, 396, 135, 143, 116, 156, 139, 163, 197,
	171, 154, 170, 84, 153, 162, 93, 146, 0, 0,
	0, 86, 160, 151, 123, 108, 109, 85, 0, 142,
	98, 102, 97, 131, 157, 158, 96, 89, 169, 88,
	90, 168, 130, 155, 161, 124, 121, 87, 159, 122,
	120, 111, 100, 105, 136, 118, 137, 106, 127, 126,
	128, 0, 344, 0, 150, 166, 178, 359, 417, 172,
	173, 174, 175, 0, 0, 0, 129, 91, 107, 147,
	119, 110, 117, 141, 177, 133, 145, 94, 165, 148,
	355, 358, 353, 354, 392, 393, 426, 427, 428, 408,
	350, 0, 356, 357, 0, 412, 395, 83, 0, 114,
	176, 140, 101, 167, 421, 411, 0, 383, 423, 361,
	375, 431, 376, 377, 404, 347, 391, 132, 373, 0,
	364, 342, 370, 343, 362, 385, 99, 388, 360, 413,
	394, 113, 429, 115, 399, 0, 149, 125, 0, 0,
	387, 415, 389, 409, 382, 405, 352, 398, 424, 374,
	402, 425, 0, 0, 0, 384, 194, 0, 0, 193,
	191, 192, 0, 0, 0, 0, 0, 92, 0, 0,
	0, 401, 420, 372, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 403, 341, 400, 0, 345, 348,
	430, 418, 367, 368, 0, 0, 0, 0, 0, 0,
	0, 386, 390, 406, 380, 0, 0, 0, 0, 0,
	0, 0, 0, 365, 0, 397, 0, 0, 0, 349,
	346, 0, 0, 0, 0, 351, 0, 366, 407, 0,
	340, 410, 416, 381, 196, 419, 379, 378, 422, 138,
	0, 0, 152, 104, 103, 112, 414, 363, 371, 95,
	369, 144, 134, 164, 396, 135, 143, 116, 156, 139,
	163, 197, 171, 154, 170, 84, 153, 162, 93, 146,
	0, 0, 0, 86, 160, 151, 123, 108, 109, 85,
	0, 142, 98, 102, 97, 131, 157, 158, 96, 89,
	169, 88, 90, 168, 130, 155, 161, 124, 121, 87,
	159, 122, 120, 111, 100, 105, 136, 118, 137, 106,
	127, 126, 128, 0, 344, 0, 150, 166, 178, 359,
	417, 172, 173, 174, 175, 0, 0, 0, 129, 91,
	107, 147, 119, 110, 117, 141, 177, 133, 145, 94,
	165, 148, 355, 358, 353, 354, 392, 393, 426, 427,
	428, 408, 350, 0, 356, 357, 0, 412, 395, 83,
	0, 114, 176, 140, 101, 167, 421, 411, 0, 383,
	423, 361, 375, 431, 376, 377, 404, 347, 391, 132,
	373, 0, 364, 342, 370, 343, 362, 385, 99, 388,
	360, 413, 394, 113, 429, 115, 399, 0, 149, 125,
	0, 0, 387, 415, 389, 409, 382, 405, 352, 398,
	424, 374, 402, 425, 56, 0, 0, 384, 81, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 92,
	0, 0, 0, 401, 420, 372, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 403, 341, 400, 0,
	345, 348, 430, 418, 367, 368, 0, 0, 0, 0,
	0, 0, 0, 386, 390, 406, 380, 0, 0, 0,
	0, 0, 0, 0, 0, 365, 0, 397, 0, 0,
	0, 349, 346, 0, 0, 0, 0, 351, 0, 366,
	407, 0, 340, 410, 416, 381, 196, 419, 379, 378,
	422, 138, 0, 0, 152, 104, 103, 112, 414, 363,
	371, 95, 369, 144, 134, 164, 396, 135, 143, 116,
	156, 139, 163, 197, 171, 154, 170, 84, 153, 162,
	93, 146, 0, 0, 0, 86, 160, 151, 123, 108,
	109, 85, 0, 142, 98, 102, 97, 131, 157, 158,
	96, 89, 169, 88, 90, 168, 130, 155, 161, 124,
	121, 87, 159, 122, 120, 111, 100, 105, 136, 118,
	137, 106, 127, 126, 128, 0, 344, 0, 150, 166,
	178, 359, 417, 172, 173, 174, 175, 0, 0, 0,
	129, 91, 107, 147, 119, 110, 117, 141, 177, 133,
	145, 94, 165, 148, 355, 358, 353, 354, 392, 393,
	426, 427, 428, 408, 350, 0, 356, 357, 0, 412,
	395, 83, 0, 114, 176, 140, 101, 167, 421, 411,
	0, 383, 423, 361, 375, 431, 376, 377, 404, 347,
	391, 132, 373, 0, 364, 342, 370, 343, 362, 385,
	99, 388, 360, 413, 394, 113, 429, 115, 399, 0,
	149, 125, 0, 0, 387, 415, 389, 409, 382, 405,
	352, 398, 424, 374, 402, 425, 0, 0, 0, 384,
	81, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 92, 0, 0, 0, 401, 420, 372, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 403, 341,
	400, 0, 345, 348, 430, 418, 367, 368, 0, 0,
	0, 0, 0, 0, 0, 386, 390, 406, 380, 0,
	0, 0, 0, 0, 0, 1129, 0, 365, 0, 397,
	0, 0, 0, 349, 346, 0, 0, 0, 0, 351,
	0, 366, 407, 0, 340, 410, 416, 381, 196, 419,
	379, 378, 422, 138, 0, 0, 152, 104, 103, 112,
	414, 363, 371, 95, 369, 144, 134, 164, 396, 135,
	143, 116, 156, 139, 163, 197, 171, 154, 170, 84,
	153, 162, 93, 146, 0, 0, 0, 86, 160, 151,
	123, 108, 109, 85, 0, 142, 98, 102, 97, 131,
	157, 158, 96, 89, 169, 88, 90, 168, 130, 155,
	161, 124, 121, 87, 159, 122, 120, 111, 100, 105,
	136, 118, 137, 106, 127, 126, 128, 0, 344, 0,
	150, 166, 178, 359, 417, 172, 173, 174, 175, 0,
	0, 0, 129, 91, 107, 147, 119, 110, 117, 141,
	177, 133, 145, 94, 165, 148, 355, 358, 353, 354,
	392, 393, 426, 427, 428, 408, 350, 0, 356, 357,
	0, 412, 395, 83, 0, 114, 176, 140, 101, 167,
	421, 411, 0, 383, 423, 361, 375, 431, 376, 377,
	404, 347, 391, 132, 373, 0, 364, 342, 370, 343,
	362, 385, 99, 388, 360, 413, 394, 113, 429, 115,
	399, 0, 149, 125, 0, 0, 387, 415, 389, 409,
	382, 405, 352, 398, 424, 374, 402, 425, 0, 0,
	0, 384, 81, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 92, 0, 0, 0, 401, 420, 372,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	403, 341, 400, 0, 345, 348, 430, 418, 367, 368,
	0, 0, 0, 0, 0, 0, 0, 386, 390, 406,
	380, 0, 0, 0, 0, 0, 0, 0, 0, 365,
	0, 397, 0, 0, 0, 349, 346, 0, 0, 0,
	0, 351, 0, 366, 407, 0, 340, 410, 416, 381,
	196, 419, 379, 378, 422, 138, 0, 0, 152, 104,
	103, 112, 414, 363, 371, 95, 369, 144, 134, 164,
	396, 135, 143, 116, 156, 139, 163, 197, 171, 154,
	170, 84, 153, 162, 93, 146, 0, 0, 0, 86,
	160, 151, 123, 108, 109, 85, 0, 142, 98, 102,
	97, 131, 157, 158, 96, 89, 169, 88, 90, 168,
	130, 155, 161, 124, 121, 87, 159, 122, 120, 111,
	100, 105, 136, 118, 137, 106, 127, 126, 128, 0,
	344, 0, 150, 166, 178, 359, 417, 172, 173, 174,
	175, 0, 0, 0, 129, 91, 107, 147, 119, 110,
	117, 141, 177, 133, 145, 94, 165, 148, 355, 358,
	353, 354, 392, 393, 426, 427, 428, 408, 350, 0,
	356, 357, 0, 412, 395, 83, 0, 114, 176, 140,
	101, 167, 421, 411, 0, 383, 423, 361, 375, 431,
	376, 377, 404, 347, 391, 132, 373, 0, 364, 342,
	370, 343, 362, 385, 99, 388, 360, 413, 394, 113,
	429, 115, 399, 0, 149, 125, 0, 0, 387, 415,
	389, 409, 382, 405, 352, 398, 424, 374, 402, 425,
	0, 0, 0, 384, 81, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 92, 0, 0, 0, 401,
	420, 372, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 403, 341, 400, 0, 345, 348, 430, 418,
	367, 368, 0, 0, 0, 0, 0, 0, 0, 386,
	390, 406, 380, 0, 0, 0, 0, 0, 0, 0,
	0, 365, 0, 397, 0, 0, 0, 349, 346, 0,
	0, 0, 0, 351, 0, 366, 407, 0, 340, 410,
	416, 381, 196, 419, 379, 378, 422, 138, 0, 0,
	152, 104, 103, 112, 414, 363, 371, 95, 369, 144,
	134, 164, 396, 135, 143, 116, 156, 139, 163, 197,
	171, 154, 170, 84, 153, 162, 93, 146, 0, 0,
	0, 86, 160, 151, 123, 108, 109, 85, 0, 142,
	98, 102, 97, 131, 157, 158, 96, 89, 169, 88,
	338, 168, 130, 155, 161, 124, 121, 87, 159, 122,
	120, 111, 100, 105, 136, 118, 137, 106, 127, 126,
	128, 0, 344, 0, 150, 166, 178, 359, 417, 172,
	173, 174, 175, 0, 0, 0, 339, 337, 107, 147,
	119, 110, 117, 141, 177, 133, 145, 94, 165, 148,
	355, 358, 353, 354, 392, 393, 426, 427, 428, 408,
	350, 0, 356, 357, 0, 412, 395, 83, 0, 114,
	176, 140, 101, 167, 421, 411, 0, 383, 423, 361,
	375, 431, 376, 377, 404, 347, 391, 132, 373, 0,
	364, 342, 370, 343, 362, 385, 99, 388, 360, 413,
	394, 113, 429, 115, 399, 0, 149, 125, 0, 0,
	387, 415, 389, 409, 382, 405, 352, 398, 424, 374,
	402, 425, 0, 0, 0, 384, 81, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 92, 0, 0,
	0, 401, 420, 372, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 403, 341, 400, 0, 345, 348,
	430, 418, 367, 368, 0, 0, 0, 0, 0, 0,
	0, 386, 390, 406, 380, 0, 0, 0, 0, 0,
	0, 0, 0, 365, 0, 397, 0, 0, 0, 349,
	346, 0, 0, 0, 0, 351, 0, 366, 407, 0,
	340, 410, 416, 381, 196, 419, 379, 378, 422, 138,
	0, 0, 152, 104, 103, 112, 414, 363, 371, 95,
	369, 144, 134, 164, 396, 135, 143, 116, 156, 139,
	163, 197, 171, 154, 170, 84, 153, 328, 93, 146,
	0, 0, 0, 86, 160, 151, 123, 108, 109, 85,
	0, 142, 98, 102, 97, 131, 157, 158, 96, 89,
	169, 88, 338, 168, 130, 155, 161, 124, 121, 87,
	159, 122, 120, 111, 100, 105, 136, 118, 137, 106,
	127, 126, 128, 0, 344, 0, 150, 166, 178, 359,
	417, 172, 173, 174, 175, 0, 0, 0, 339, 337,
	333, 332, 331, 110, 117, 141, 177, 133, 145, 94,
	165, 148, 355, 358, 353, 354, 392, 393, 426, 427,
	428, 408, 350, 0, 356, 357, 0, 412, 395, 83,
	0, 114, 176, 140, 101, 167, 132, 0, 0, 804,
	0, 257, 0, 0, 0, 99, 0, 252, 0, 0,
	113, 299, 115, 0, 0, 149, 125, 0, 0, 0,
	0, 290, 291, 0, 0, 0, 0, 0, 0, 0,
	0, 56, 0, 0, 289, 255, 283, 276, 254, 253,
	192, 278, 279, 280, 281, 0, 92, 277, 284, 0,
	282, 285, 286, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 250, 268, 0, 298, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 265, 266,
	246, 0, 0, 0, 310, 0, 267, 0, 0, 263,
	264, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 196, 0, 0, 308, 0, 138, 0,
	0, 152, 104, 103, 112, 0, 0, 0, 95, 0,
	144, 134, 164, 0, 135, 143, 116, 156, 139, 163,
	197, 171, 154, 170, 84, 153, 162, 93, 146, 0,
	0, 0, 86, 160, 151, 123, 108, 109, 85, 0,
	142, 98, 102, 97, 131, 157, 158, 96, 89, 169,
	88, 90, 168, 130, 155, 161, 124, 121, 87, 159,
	122, 120, 111, 100, 105, 136, 118, 137, 106, 127,
	126, 128, 0, 0, 0, 150, 166, 178, 0, 0,
	172, 173, 174, 175, 0, 0, 0, 129, 91, 107,
	147, 119, 110, 117, 141, 177, 133, 145, 94, 165,
	148, 300, 309, 306, 307, 304, 305, 303, 302, 301,
	311, 292, 293, 294, 295, 297, 0, 296, 83, 0,
	114, 176, 140, 101, 167, 132, 0, 0, 0, 0,
	257, 0, 0, 0, 99, 0, 252, 0, 0, 113,
	299, 115, 0, 0, 149, 125, 0, 0, 0, 0,
	290, 291, 0, 0, 0, 0, 0, 0, 0, 0,
	56, 0, 0, 289, 255, 283, 276, 254, 253, 192,
	278, 279, 280, 281, 0, 92, 277, 284, 0, 282,
	285, 286, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 250, 268, 0, 298, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 265, 266, 1303,
	0, 0, 0, 310, 0, 267, 0, 0, 263, 264,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 196, 0, 0, 308, 0, 138, 0, 0,
	152, 104, 103, 112, 0, 0, 0, 95, 0, 144,
	134, 164, 0, 135, 143, 116, 156, 139, 163, 197,
	171, 154, 170, 84, 153, 162, 93, 146, 0, 0,
	0, 86, 160, 151, 123, 108, 109, 85, 0, 142,
	98, 102, 97, 131, 157, 158, 96, 89, 169, 88,
	90, 168, 130, 155, 161, 124, 121, 87, 159, 122,
	120, 111, 100, 105, 136, 118, 137, 106, 127, 126,
	128, 0, 0, 0, 150, 166, 178, 0, 0, 172,
	173, 174, 175, 0, 0, 0, 129, 91, 107, 147,
	119, 110, 117, 141, 177, 133, 145, 94, 165, 148,
	300, 309, 306, 307, 304, 305, 303, 302, 301, 311,
	292, 293, 294, 295, 297, 0, 296, 83, 0, 114,
	176, 140, 101, 167, 132, 0, 0, 0, 0, 257,
	0, 0, 0, 99, 0, 252, 0, 0, 113, 299,
	115, 0, 0, 149, 125, 0, 0, 0, 0, 290,
	291, 0, 0, 0, 0, 0, 0, 0, 0, 56,
	0, 486, 289, 255, 283, 276, 254, 253, 192, 278,
	279, 280, 281, 0, 92, 277, 284, 0, 282, 285,
	286, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 250, 268, 0, 298, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 265, 266, 0, 0,
	0, 0, 310, 0, 267, 0, 0, 263, 264, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 196, 0, 0, 308, 0, 138, 0, 0, 152,
	104, 103, 112, 0, 0, 0, 95, 0, 144, 134,
	164, 0, 135, 143, 116, 156, 139, 163, 197, 171,
	154, 170, 84, 153, 162, 93, 146, 0, 0, 0,
	86, 160, 151, 123, 108, 109, 85, 0, 142, 98,
	102, 97, 131, 157, 158, 96, 89, 169, 88, 90,
	168, 130, 155, 161, 124, 121, 87, 159, 122, 120,
	111, 100, 105, 136, 118, 137, 106, 127, 126, 128,
	0, 0, 0, 150, 166, 178, 0, 0, 172, 173,
	174, 175, 0, 0, 0, 129, 91, 107, 147, 119,
	110, 117, 141, 177, 133, 145, 94, 165, 148, 300,
	309, 306, 307, 304, 305, 303, 302, 301, 311, 292,
	293, 294, 295, 297, 0, 296, 83, 0, 114, 176,
	140, 101, 167, 132, 0, 0, 0, 0, 257, 0,
	0, 0, 99, 0, 252, 0, 0, 113, 299, 115,
	0, 0, 149, 125, 0, 0, 0, 0, 290, 291,
	0, 0, 0, 0, 0, 0, 0, 0, 56, 0,
	0, 289, 255, 283, 276, 254, 253, 192, 278, 279,
	280, 281, 0, 92, 277, 284, 0, 282, 285, 286,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 250, 268, 0, 298, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 265, 266, 246, 0, 0,
	0, 310, 0, 267, 0, 0, 263, 264, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	196, 0, 0, 308, 0, 138, 0, 0, 152, 104,
	103, 112, 0, 0, 0, 95, 0, 144, 134, 164,
	0, 135, 143, 116, 156, 139, 163, 197, 171, 154,
	170, 84, 153, 162, 93, 146, 0, 0, 0, 86,
	160, 151, 123, 108, 109, 85, 0, 142, 98, 102,
	97, 131, 157, 158, 96, 89, 169, 88, 90, 168,
	130, 155, 161, 124, 121, 87, 159, 122, 120, 111,
	100, 105, 136, 118, 137, 106, 127, 126, 128, 0,
	0, 0, 150, 166, 178, 0, 0, 172, 173, 174,
	175, 0, 0, 0, 129, 91, 107, 147, 119, 110,
	117, 141, 177, 133, 145, 94, 165, 148, 300, 309,
	306, 307, 304, 305, 303, 302, 301, 311, 292, 293,
	294, 295, 297, 0, 296, 83, 0, 114, 176, 140,
	101, 167, 132, 0, 0, 0, 0, 257, 0, 0,
	0, 99, 0, 252, 0, 0, 113, 299, 115, 0,
	0, 149, 125, 0, 0, 0, 0, 290, 291, 0,
	0, 0, 0, 0, 0, 891, 0, 56, 0, 0,
	289, 255, 283, 276, 254, 253, 192, 278, 279, 280,
	281, 0, 92, 277, 284, 0, 282, 285, 286, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 250, 268, 0, 298, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 265, 266, 0, 0, 0, 0,
	310, 0, 267, 0, 0, 263, 264, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 196,
	0, 0, 308, 0, 138, 0, 0, 152, 104, 103,
	112, 0, 0, 0, 95, 0, 144, 134, 164, 0,
	135, 143, 116, 156, 139, 163, 197, 171, 154, 170,
	84, 153, 162, 93, 146, 0, 0, 0, 86, 160,
	151, 123, 108, 109, 85, 0, 142, 98, 102, 97,
	131, 157, 158, 96, 89, 169, 88, 90, 168, 130,
	155, 161, 124, 121, 87, 159, 122, 120, 111, 100,
	105, 136, 118, 137, 106, 127, 126, 128, 0, 0,
	0, 150, 166, 178, 0, 0, 172, 173, 174, 175,
	0, 0, 0, 129, 91, 107, 147, 119, 110, 117,
	141, 177, 133, 145, 94, 165, 148, 300, 309, 306,
	307, 304, 305, 303, 302, 301, 311, 292, 293, 294,
	295, 297, 26, 296, 83, 0, 114, 176, 140, 101,
	167, 0, 0, 0, 132, 0, 0, 0, 0, 257,
	0, 0, 0, 99, 0, 252, 0, 0, 113, 299,
	115, 0, 0, 149, 125, 0, 0, 0, 0, 290,
	291, 0, 0, 0, 0, 0, 0, 0, 0, 56,
	0, 0, 289, 255, 283, 276, 254, 253, 192, 278,
	279, 280, 281, 0, 92, 277, 284, 0, 282, 285,
	286, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 250, 268, 0, 298, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 265, 266, 0, 0,
	0, 0, 310, 0, 267, 0, 0, 263, 264, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 196, 0, 0, 308, 0, 138, 0, 0, 152,
	104, 103, 112, 0, 0, 0, 95, 0, 144, 134,
	164, 0, 135, 143, 116, 156, 139, 163, 197, 171,
	154, 170, 84, 153, 162, 93, 146, 0, 0, 0,
	86, 160, 151, 123, 108, 109, 85, 0, 142, 98,
	102, 97, 131, 157, 158, 96, 89, 169, 88, 90,
	168, 130, 155, 161, 124, 121, 87, 159, 122, 120,
	111, 100, 105, 136, 118, 137, 106, 127, 126, 128,
	0, 0, 0, 150, 166, 178, 0, 0, 172, 173,
	174, 175, 0, 0, 0, 129, 91, 107, 147, 119,
	110, 117, 141, 177, 133, 145, 94, 165, 148, 300,
	309, 306, 307, 304, 305, 303, 302, 301, 311, 292,
	293, 294, 295, 297, 0, 296, 83, 0, 114, 176,
	140, 101, 167, 132, 0, 0, 0, 0, 257, 0,
	0, 0, 99, 0, 252, 0, 0, 113, 299, 115,
	0, 0, 149, 125, 0, 0, 0, 0, 290, 291,
	0, 0, 0, 0, 0, 0, 0, 0, 56, 0,
	0, 289, 255, 283, 276, 254, 253, 192, 278, 279,
	280, 281, 0, 92, 277, 284, 0, 282, 285, 286,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 250, 268, 0, 298, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 265, 266, 0, 0, 0,
	0, 310, 0, 267, 0, 0, 263, 264, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	196, 0, 0, 308, 0, 138, 0, 0, 152, 104,
	103, 112, 0, 0, 0, 95, 0, 144, 134, 164,
	0, 135, 143, 116, 156, 139, 163, 197, 171, 154,
	170, 84, 153, 162, 93, 146, 0, 0, 0, 86,
	160, 151, 123, 108, 109, 85, 0, 142, 98, 102,
	97, 131, 157, 158, 96, 89, 169, 88, 90, 168,
	130, 155, 161, 124, 121, 87, 159, 122, 120, 111,
	100, 105, 136, 118, 137, 106, 127, 126, 128, 0,
	0, 0, 150, 166, 178, 0, 0, 172, 173, 174,
	175, 0, 0, 0, 129, 91, 107, 147, 119, 110,
	117, 141, 177, 133, 145, 94, 165, 148, 300, 309,
	306, 307, 304, 305, 303, 302, 301, 311, 292, 293,
	294, 295, 297, 132, 296, 83, 0, 114, 176, 140,
	101, 167, 99, 0, 551, 0, 0, 113, 299, 115,
	0, 0, 149, 125, 0, 0, 0, 0, 290, 291,
	0, 0, 0, 0, 0, 0, 0, 0, 56, 0,
	0, 289, 255, 283, 276, 254, 253, 192, 278, 279,
	280, 281, 0, 92, 277, 284, 0, 282, 285, 286,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 268, 0, 298, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 265, 266, 0, 0, 0,
	0, 310, 0, 267, 0, 0, 263, 264, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	196, 0, 0, 308, 0, 138, 0, 0, 152, 104,
	103, 112, 0, 0, 0, 95, 0, 144, 134, 164,
	1393, 135, 143, 116, 156, 139, 163, 197, 171, 154,
	170, 84, 153, 162, 93, 146, 0, 0, 0, 86,
	160, 151, 123, 108, 109, 85, 0, 142, 98, 102,
	97, 131, 157, 158, 96, 89, 169, 88, 90, 168,
	130, 155, 161, 124, 121, 87, 159, 122, 120, 111,
	100, 105, 136, 118, 137, 106, 127, 126, 128, 0,
	0, 0, 150, 166, 178, 0, 0, 172, 173, 174,
	175, 0, 0, 0, 129, 91, 107, 147, 119, 110,
	117, 141, 177, 133, 145, 94, 165, 148, 300, 309,
	306, 307, 304, 305, 303, 302, 301, 311, 292, 293,
	294, 295, 297, 132, 296, 83, 0, 114, 176, 140,
	101, 167, 99, 0, 551, 0, 0, 113, 299, 115,
	0, 0, 149, 125, 0, 0, 0, 0, 290, 291,
	0, 0, 0, 0, 0, 0, 0, 0, 56, 0,
	0, 289, 255, 283, 276, 254, 253, 192, 278, 279,
	280, 281, 0, 92, 277, 284, 0, 282, 285, 286,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 268, 0, 298, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 265, 266, 0, 0, 0,
	0, 310, 0, 267, 0, 0, 263, 264, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	196, 0, 0, 308, 0, 138, 0, 0, 152, 104,
	103, 112, 0, 0, 0, 95, 0, 144, 134, 164,
	0, 135, 143, 116, 156, 139, 163, 197, 171, 154,
	170, 84, 153, 162, 93, 146, 0, 0, 0, 86,
	160, 151, 123, 108, 109, 85, 0, 142, 98, 102,
	97, 131, 157, 158, 96, 89, 169, 88, 90, 168,
	130, 155, 161, 124, 121, 87, 159, 122, 120, 111,
	100, 105, 136, 118, 137, 106, 127, 126, 128, 0,
	0, 0, 150, 166, 178, 0, 0, 172, 173, 174,
	175, 0, 0, 0, 129, 91, 107, 147, 119, 110,
	117, 141, 177, 133, 145, 94, 165, 148, 300, 309,
	306, 307, 304, 305, 303, 302, 301, 311, 292, 293,
	294, 295, 297, 132, 296, 83, 0, 114, 176, 140,
	101, 167, 99, 0, 551, 0, 0, 113, 299, 115,
	0, 0, 149, 125, 0, 0, 0, 0, 290, 291,
	0, 0, 0, 0, 0, 0, 0, 0, 56, 0,
	0, 289, 255, 283, 276, 562, 253, 192, 278, 279,
	280, 281, 0, 92, 277, 284, 0, 282, 285, 286,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 268, 0, 298, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 265, 266, 0, 0, 0,
	0, 310, 0, 267, 0, 0, 263, 264, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	196, 0, 0, 308, 0, 138, 0, 0, 152, 104,
	103, 112, 0, 0, 0, 95, 0, 144, 134, 164,
	0, 135, 143, 116, 156, 139, 163, 197, 171, 154,
	170, 84, 153, 162, 93, 146, 0, 0, 0, 86,
	160, 151, 123, 108, 109, 85, 0, 142, 98, 102,
	97, 131, 157, 158, 96, 89, 169, 88, 90, 168,
	130, 155, 161, 124, 121, 87, 159, 122, 120, 111,
	100, 105, 136, 118, 137, 106, 127, 126, 128, 0,
	0, 0, 150, 166, 178, 0, 0, 172, 173, 174,
	175, 0, 0, 0, 129, 91, 107, 147, 119, 110,
	117, 141, 177, 133, 145, 94, 165, 148, 300, 309,
	306, 307, 304, 305, 303, 302, 301, 311, 292, 293,
	294, 295, 297, 26, 296, 83, 0, 114, 176, 140,
	101, 167, 0, 0, 0, 132, 0, 0, 0, 0,
	0, 0, 0, 0, 99, 0, 0, 0, 0, 113,
	0, 115, 0, 0, 149, 125, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	56, 0, 0, 0, 81, 0, 0, 510, 511, 512,
	0, 0, 0, 0, 0, 92, 812, 813, 814, 815,
	816, 817, 818, 819, 821, 822, 823, 824, 825, 826,
	827, 828, 829, 830, 831, 820, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 523, 522, 532,
	533, 525, 526, 527, 528, 529, 530, 531, 524, 0,
	0, 534, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 196, 0, 0, 0, 0, 138, 0, 0,
	152, 104, 103, 112, 0, 0, 0, 95, 0, 144,
	134, 164, 0, 135, 143, 116, 156, 139, 163, 197,
	171, 154, 170, 84, 153, 162, 93, 146, 0, 0,
	0, 86, 160, 151, 123, 108, 109, 85, 0, 142,
	98, 102, 97, 131, 157, 158, 96, 89, 169, 88,
	90, 168, 130, 155, 161, 124, 121, 87, 159, 122,
	120, 111, 100, 105, 136, 118, 137, 106, 127, 126,
	128, 0, 0, 0, 150, 166, 178, 0, 0, 172,
	173, 174, 175, 0, 0, 0, 129, 91, 107, 147,
	119, 110, 117, 141, 177, 133, 145, 94, 165, 148,
	0, 0, 0, 26, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 132, 0, 83, 0, 114,
	176, 140, 101, 167, 99, 0, 0, 0, 0, 113,
	0, 115, 0, 0, 149, 125, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	56, 0, 0, 0, 194, 0, 0, 193, 191, 192,
	0, 0, 0, 0, 0, 92, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 196, 0, 0, 0, 0, 138, 0, 0,
	152, 104, 103, 112, 0, 0, 0, 95, 0, 144,
	134, 164, 0, 135, 143, 116, 156, 139, 163, 197,
	171, 154, 170, 84, 153, 162, 93, 146, 0, 0,
	0, 86, 160, 151, 123, 108, 109, 85, 0, 142,
	98, 102, 97, 131, 157, 158, 96, 89, 169, 88,
	90, 168, 130, 155, 161, 124, 121, 87, 159, 122,
	120, 111, 100, 105, 136, 118, 137, 106, 127, 126,
	128, 0, 0, 0, 150, 166, 178, 0, 0, 172,
	173, 174, 175, 0, 0, 0, 129, 91, 107, 147,
	119, 110, 117, 141, 177, 133, 145, 94, 165, 148,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 132, 0, 83, 0, 114,
	176, 140, 101, 167, 99, 0, 0, 0, 0, 113,
	0, 115, 0, 0, 149, 125, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 81, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 92, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 74, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 77,
	78, 0, 73, 0, 0, 0, 79, 138, 0, 0,
	152, 104, 103, 112, 0, 0, 0, 95, 0, 144,
	134, 164, 0, 135, 143, 116, 156, 139, 163, 75,
	171, 154, 170, 84, 153, 162, 93, 146, 0, 0,
	0, 86, 160, 151, 123, 108, 109, 85, 0, 142,
	98, 102, 97, 131, 157, 158, 96, 89, 169, 88,
	90, 168, 130, 155, 161, 124, 121, 87, 159, 122,
	120, 111, 100, 105, 136, 118, 137, 106, 127, 126,
	128, 0, 0, 0, 150, 166, 178, 0, 0, 172,
	173, 174, 175, 0, 0, 0, 129, 91, 107, 147,
	119, 110, 117, 141, 177, 133, 145, 94, 165, 148,
	0, 76, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 83, 0, 114,
	176, 140, 101, 167, 132, 0, 0, 0, 611, 0,
	0, 0, 0, 99, 0, 0, 0, 0, 113, 0,
	115, 0, 0, 149, 125, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 194, 0, 0, 193, 191, 192, 0,
	0, 0, 0, 0, 92, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 196, 0, 0, 0, 0, 138, 0, 0, 152,
	104, 103, 112, 0, 0, 0, 95, 0, 144, 134,
	164, 0, 135, 143, 116, 156, 139, 163, 197, 171,
	154, 170, 84, 153, 162, 93, 146, 0, 0, 0,
	86, 160, 151, 123, 108, 109, 85, 0, 142, 98,
	102, 97, 131, 157, 158, 96, 89, 169, 88, 90,
	168, 130, 155, 161, 124, 121, 87, 159, 122, 120,
	111, 100, 105, 136, 118, 137, 106, 127, 126, 128,
	0, 0, 0, 150, 166, 178, 0, 0, 172, 173,
	174, 175, 0, 0, 0, 129, 91, 107, 147, 119,
	110, 117, 141, 177, 133, 145, 94, 165, 148, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 132, 0, 83, 0, 114, 176,
	140, 101, 167, 99, 0, 0, 0, 0, 113, 0,
	115, 0, 0, 149, 125, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 56,
	0, 0, 0, 194, 0, 0, 193, 191, 192, 0,
	0, 0, 0, 0, 92, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 196, 0, 0, 0, 0, 138, 0, 0, 152,
	104, 103, 112, 0, 0, 0, 95, 0, 144, 134,
	164, 0, 135, 143, 116, 156, 139, 163, 197, 171,
	154, 170, 84, 153, 162, 93, 146, 0, 0, 0,
	86, 160, 151, 123, 108, 109, 85, 0, 142, 98,
	102, 97, 131, 157, 158, 96, 89, 169, 88, 90,
	168, 130, 155, 161, 124, 121, 87, 159, 122, 120,
	111, 100, 105, 136, 118, 137, 106, 127, 126, 128,
	0, 0, 0, 150, 166, 178, 0, 0, 172, 173,
	174, 175, 0, 0, 0, 129, 91, 107, 147, 119,
	110, 117, 141, 177, 133, 145, 94, 165, 148, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 132, 0, 83, 0, 114, 176,
	140, 101, 167, 99, 0, 633, 0, 0, 113, 0,
	115, 0, 0, 149, 125, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 81, 0, 0, 634, 635, 636, 0,
	0, 0, 0, 0, 92, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 196, 0, 0, 0, 0, 138, 0, 0, 152,
	104, 103, 112, 0, 0, 0, 95, 0, 144, 134,
	164, 0, 135, 143, 116, 156, 139, 163, 197, 171,
	154, 170, 84, 153, 162, 93, 146, 0, 0, 0,
	86, 160, 151, 123, 108, 109, 85, 0, 142, 98,
	102, 97, 131, 157, 158, 96, 89, 169, 88, 90,
	168, 130, 155, 161, 124, 121, 87, 159, 122, 120,
	111, 100, 105, 136, 118, 137, 106, 127, 126, 128,
	0, 0, 0, 150, 166, 178, 0, 0, 172, 173,
	174, 175, 0, 0, 0, 129, 91, 107, 147, 119,
	110, 117, 141, 177, 133, 145, 94, 165, 148, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 83, 0, 114, 176,
	140, 101, 167, 132, 0, 0, 0, 611, 0, 0,
	0, 0, 99, 0, 0, 0, 0, 113, 0, 115,
	0, 0, 149, 125, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 194, 0, 0, 193, 191, 192, 0, 0,
	0, 0, 0, 92, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	196, 0, 0, 0, 0, 138, 0, 0, 152, 104,
	103, 112, 0, 0, 0, 95, 0, 144, 134, 164,
	0, 609, 143, 116, 156, 139, 163, 197, 171, 154,
	170, 84, 153, 162, 93, 146, 0, 0, 0, 86,
	160, 151, 123, 108, 109, 85, 0, 142, 98, 102,
	97, 131, 157, 158, 96, 89, 169, 88, 90, 168,
	130, 155, 161, 124, 121, 87, 159, 122, 120, 111,
	100, 105, 136, 118, 137, 106, 127, 126, 128, 0,
	0, 0, 150, 166, 178, 0, 0, 172, 173, 174,
	175, 0, 0, 0, 129, 91, 107, 147, 119, 110,
	117, 141, 177, 133, 145, 94, 165, 148, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 132, 83, 0, 114, 176, 140,
	101, 167, 589, 99, 0, 0, 0, 0, 113, 0,
	115, 0, 0, 149, 125, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 194, 0, 0, 193, 191, 192, 0,
	0, 0, 0, 0, 92, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 196, 0, 0, 0, 0, 138, 0, 0, 152,
	104, 103, 112, 0, 0, 0, 95, 0, 144, 134,
	164, 0, 135, 143, 116, 156, 139, 163, 197, 171,
	154, 170, 84, 153, 162, 93, 146, 0, 0, 0,
	86, 160, 151, 123, 108, 109, 85, 0, 142, 98,
	102, 97, 131, 157, 158, 96, 89, 169, 88, 90,
	168, 130, 155, 161, 124, 121, 87, 159, 122, 120,
	111, 100, 105, 136, 118, 137, 106, 127, 126, 128,
	0, 0, 0, 150, 166, 178, 0, 0, 172, 173,
	174, 175, 0, 0, 0, 129, 91, 107, 147, 119,
	110, 117, 141, 177, 133, 145, 94, 165, 148, 0,
	0, 0, 0, 0, 0, 0, 0, 321, 0, 0,
	0, 0, 0, 0, 132, 0, 83, 0, 114, 176,
	140, 101, 167, 99, 0, 0, 0, 0, 113, 0,
	115, 0, 0, 149, 125, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 194, 0, 0, 193, 191, 192, 0,
	0, 0, 0, 0, 92, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 196, 0, 0, 0, 0, 138, 0, 0, 152,
	104, 103, 112, 0, 0, 0, 95, 0, 144, 134,
	164, 0, 135, 143, 116, 156, 139, 163, 197, 171,
	154, 170, 84, 153, 162, 93, 146, 0, 0, 0,
	86, 160, 151, 123, 108, 109, 85, 0, 142, 98,
	102, 97, 131, 157, 158, 96, 89, 169, 88, 90,
	168, 130, 155, 161, 124, 121, 87, 159, 122, 120,
	111, 100, 105, 136, 118, 137, 106, 127, 126, 128,
	0, 0, 0, 150, 166, 178, 0, 0, 172, 173,
	174, 175, 0, 0, 0, 129, 91, 107, 147, 119,
	110, 117, 141, 177, 133, 145, 94, 165, 148, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 132, 0, 83, 0, 114, 176,
	140, 101, 167, 99, 0, 0, 0, 0, 113, 0,
	115, 0, 0, 149, 125, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 194, 0, 0, 193, 191, 192, 0,
	0, 0, 0, 0, 92, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 188,
	0, 196, 0, 0, 0, 0, 138, 0, 0, 152,
	104, 103, 112, 0, 0, 0, 95, 0, 144, 134,
	164, 0, 135, 143, 116, 156, 139, 163, 197, 171,
	154, 170, 84, 153, 162, 93, 146, 0, 0, 0,
	86, 160, 151, 123, 108, 109, 85, 0, 142, 98,
	102, 97, 131, 157, 158, 96, 89, 169, 88, 90,
	168, 130, 155, 161, 124, 121, 87, 159, 122, 120,
	111, 100, 105, 136, 118, 137, 106, 127, 126, 128,
	0, 0, 0, 150, 166, 178, 0, 0, 172, 173,
	174, 175, 0, 0, 0, 129, 91, 107, 147, 119,
	110, 117, 141, 177, 133, 145, 94, 165, 148, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 132, 0, 83, 0, 114, 176,
	140, 101, 167, 99, 0, 0, 0, 0, 113, 0,
	115, 0, 0, 149, 125, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 81, 0, 0, 510, 511, 512, 0,
	0, 0, 0, 0, 92, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 196, 0, 0, 0, 0, 138, 0, 0, 152,
	104, 103, 112, 0, 0, 0, 95, 0, 144, 134,
	164, 0, 135, 143, 116, 156, 139, 163, 197, 171,
	154, 170, 84, 153, 162, 93, 146, 0, 0, 0,
	86, 160, 151, 123, 108, 109, 85, 0, 142, 98,
	102, 97, 131, 157, 158, 96, 89, 169, 88, 90,
	168, 130, 155, 161, 124, 121, 87, 159, 122, 120,
	111, 100, 105, 136, 118, 137, 106, 127, 126, 128,
	0, 0, 0, 150, 166, 178, 0, 0, 172, 173,
	174, 175, 0, 0, 0, 129, 91, 107, 147, 119,
	110, 117, 141, 177, 133, 145, 94, 165, 148, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 132, 0, 83, 0, 114, 176,
	140, 101, 167, 99, 0, 0, 0, 0, 113, 0,
	115, 0, 0, 149, 125, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 255, 0, 0, 193, 191, 192, 0,
	0, 0, 0, 0, 92, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 196, 0, 0, 0, 0, 138, 0, 0, 152,
	104, 103, 112, 0, 0, 0, 95, 0, 144, 134,
	164, 0, 135, 143, 116, 156, 139, 163, 197, 171,
	154, 170, 84, 153, 162, 93, 146, 0, 0, 0,
	86, 160, 151, 123, 108, 109, 85, 0, 142, 98,
	102, 97, 131, 157, 158, 96, 89, 169, 88, 90,
	168, 130, 155, 161, 124, 121, 87, 159, 122, 120,
	111, 100, 105, 136, 118, 137, 106, 127, 126, 128,
	0, 0, 0, 150, 166, 178, 0, 0, 172, 173,
	174, 175, 0, 0, 0, 129, 91, 107, 147, 119,
	110, 117, 141, 177, 133, 145, 94, 165, 148, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 132, 0, 83, 0, 114, 176,
	140, 101, 167, 99, 0, 0, 0, 0, 113, 0,
	115, 0, 0, 149, 125, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 194, 0, 0, 193, 191, 192, 0,
	0, 0, 0, 0, 92, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 196, 0, 0, 0, 0, 138, 0, 0, 152,
	104, 103, 112, 0, 0, 0, 95, 0, 144, 134,
	164, 0, 135, 143, 116, 156, 139, 163, 197, 171,
	154, 170, 84, 153, 162, 93, 146, 0, 0, 0,
	86, 160, 151, 123, 108, 109, 85, 0, 142, 98,
	102, 97, 131, 157, 158, 96, 89, 169, 88, 90,
	168, 130, 155, 161, 124, 121, 87, 159, 122, 120,
	111, 100, 105, 136, 118, 137, 106, 127, 126, 128,
	0, 0, 0, 150, 166, 178, 0, 0, 172, 173,
	174, 175, 0, 0, 0, 129, 91, 107, 147, 119,
	110, 117, 141, 177, 133, 145, 94, 165, 148, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 132, 0, 83, 0, 114, 176,
	140, 101, 167, 99, 0, 0, 0, 0, 113, 0,
	115, 0, 0, 149, 125, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 81, 0, 0, 0, 0, 0, 753,
	0, 0, 754, 0, 92, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 196, 0, 0, 0, 0, 138, 0, 0, 152,
	104, 103, 112, 0, 0, 0, 95, 0, 144, 134,
	164, 0, 135, 143, 116, 156, 139, 163, 197, 171,
	154, 170, 84, 153, 162, 93, 146, 0, 0, 0,
	86, 160, 151, 123, 108, 109, 85, 0, 142, 98,
	102, 97, 131, 157, 158, 96, 89, 169, 88, 90,
	168, 130, 155, 161, 124, 121, 87, 159, 122, 120,
	111, 100, 105, 136, 118, 137, 106, 127, 126, 128,
	0, 0, 0, 150, 166, 178, 0, 0, 172, 173,
	174, 175, 0, 0, 0, 129, 91, 107, 147, 119,
	110, 117, 141, 177, 133, 145, 94, 165, 148, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 132, 0, 83, 0, 114, 176,
	140, 101, 167, 99, 0, 0, 0, 0, 113, 0,
	115, 0, 0, 149, 125, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 81, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 92, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 196, 0, 0, 0, 0, 138, 0, 0, 152,
	104, 103, 112, 0, 0, 0, 95, 0, 144, 134,
	164, 0, 135, 143, 116, 156, 139, 163, 197, 171,
	154, 170, 84, 153, 162, 93, 146, 0, 0, 0,
	86, 160, 151, 123, 108, 109, 85, 0, 142, 98,
	102, 97, 131, 157, 158, 96, 89, 169, 88, 90,
	168, 130, 155, 161, 124, 121, 87, 159, 122, 120,
	111, 100, 105, 136, 118, 137, 106, 127, 126, 128,
	0, 0, 0, 150, 166, 178, 0, 0, 172, 173,
	174, 175, 0, 0, 0, 129, 91, 107, 147, 119,
	110, 117, 141, 177, 133, 145, 94, 165, 148, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 83, 0, 114, 176,
	140, 101, 167,
}

var yyPact = [...]int{
	186, -1000, -201, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, 860, 897, -1000, -1000, -1000, -1000,
	-1000, -1000, 694, 8167, 52, 82, -36, 9936, 81, 1340,
	10686, -1000, -24, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-30, 10686, 475, 611, -1000, -1000, -1000, -1000, -1000, 844,
	849, 698, 837, 754, -1000, 5875, 44, 8676, 9686, 4839,
	-1000, 469, 70, 10686, -169, 11186, 41, 41, 41, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 77,
	10686, -1000, 10686, 37, 458, 37, 37, 37, 10686, -1000,
	119, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 10686, 449,
	796, 76, 3751, 3751, 3751, 3751, 4, -3, 3751, -120,
	-111, 717, -1000, -1000, -1000, -1000, 3751, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 10686, 688,
	697, 389, 859, 6655, 6655, 860, -1000, 611, -1000, -1000,
	-1000, 814, -1000, -1000, 318, 881, -1000, 2026, 116, -1000,
	6655, 1758, 641, -1000, -1000, -1000, -1000, 641, 92, 276,
	-1000, -1000, -1000, 7155, 7155, 7155, 7155, 7155, 7155, -1000,
	-1000, -1000, -1000, -1000, -1000, 641, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 6396, 7405,
	641, 641, 641, 641, 641, 641, 641, 641, 6655, 641,
	641, 641, 641, 641, 641, 641, 641, 641, 641, 641,
	641, 641, 9436, 575, 1100, -1000, -1000, -1000, 834, 7917,
	9185, 10686, 571, -1000, 632, 631, 4567, -25, -134, -1000,
	62, -1000, -1000, -1000, 181, 8926, -1000, -1000, 795, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, 567, -1000, 1803, 447, 3751, 45, 656, 445,
	230, 443, 10686, 10686, 3751, 55, 10686, 827, 710, 10686,
	442, 434, -1000, 3479, -1000, 3751, 3751, 3751, 3751, 3751,
	3751, 3751, 3751, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	3751, 3751, 3751, 3751, -1000, -127, -97, -1000, 10686, -1000,
	-1000, 89, 89, 1803, 10686, -1000, -1000, -1000, 887, 160,
	462, 110, 634, -1000, 381, 844, 389, 754, 10936, 730,
	-1000, -1000, 10686, -1000, 6655, 6655, 349, -1000, 10186, -1000,
	-1000, -1000, -1000, -1000, 2935, 167, 7155, 342, 275, 7155,
	7155, 7155, 7155, 7155, 7155, 7155, 7155, 7155, 7155, 7155,
	7155, 7155, 7155, 7155, 421, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, 430, -1000, 611, 2221, 2221, 299, -1000,
	140, -1000, 140, 140, 140, 140, 140, 5098, 389, 565,
	220, 6396, -1000, 7661, 5875, 5875, 6655, 6655, 10436, 10436,
	5875, 838, 218, 220, 10436, -1000, 389, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, 5875, 5875, 5875, 5875, 152, 10686,
	-1000, 10436, 8676, 8676, 8676, 8676, 8676, -1000, 743, 742,
	-1000, 732, 729, 738, 10686, -1000, 560, 7917, 138, 641,
	-1000, 10686, -1000, 18, 630, 8676, 10686, -1000, -1000, 4567,
	7155, 632, 631, -134, 604, -1000, -140, -132, 7155, 6134,
	129, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 2663, 187,
	245, -92, -1000, -1000, -1000, -1000, 660, -1000, 660, 660,
	660, 660, -60, -60, -60, -60, -1000, -1000, -1000, -1000,
	-1000, 691, 689, -1000, 660, 660, 660, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, 666, 666, 666, 662, 662, 683,
	-1000, 10686, -187, 428, 3751, 813, 3751, -1000, 216, -1000,
	10686, -1000, -1000, 10686, 3751, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, 261, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, 557, -1000, 629, -1000, -1000,
	734, 6655, 6655, 3207, 6655, -1000, -1000, -1000, 859, -1000,
	838, 882, -1000, 773, 768, 5875, -1000, -1000, 167, 265,
	-1000, -1000, 366, -1000, -1000, -1000, -1000, 108, 641, -1000,
	2010, -1000, -1000, -1000, -1000, 342, 7155, 7155, 7155, 692,
	2010, 2043, 793, 721, 140, 139, 139, 144, 144, 144,
	144, 144, 418, 418, -1000, -1000, -1000, 389, 276, -1000,
	-1000, 276, -1000, 389, 5875, 626, -1000, -1000, 6655, -1000,
	389, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, 549, 549, 340, 337, 682, -1000, 100, 655,
	549, 5875, 306, -1000, 6655, 389, -1000, 549, 389, 549,
	549, 607, 767, 641, -1000, 653, -1000, 178, 1100, 706,
	709, 825, -1000, -1000, -1000, -1000, 739, -1000, 733, -1000,
	-1000, -1000, -1000, -1000, 69, 66, 54, 11186, -1000, 868,
	8676, 597, -1000, -1000, 2010, 604, -134, -135, -1000, -1000,
	2010, -1000, 220, -1000, 524, 599, 2387, -1000, -1000, -1000,
	-1000, -1000, -1000, 665, 803, 195, 194, 427, -1000, -1000,
	794, -1000, 284, -94, -1000, -1000, 387, -60, -60, -1000,
	-1000, 129, 777, 129, 129, 129, 491, 491, -1000, -1000,
	-1000, -1000, 384, -1000, -1000, -1000, 365, -1000, 708, 11186,
	3751, -1000, 4295, -1000, -1000, -1000, -1000, -1000, -1000, 1343,
	954, 214, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, 17, -1000, 3751, -1000, 266, 10686, 10686,
	1803, 833, 10686, 759, 220, 220, 96, -1000, -1000, 10686,
	-1000, -1000, -1000, -1000, 644, -1000, -1000, -1000, 4023, 5875,
	-1000, 692, 2010, 2027, -1000, 7155, 7155, -1000, -1000, 549,
	5875, 220, -1000, -1000, -1000, 215, 421, 215, 7155, 7155,
	3207, 7155, 7155, -182, 584, 183, -1000, 6655, 322, -1000,
	-1000, -1000, -1000, -1000, 702, 10436, 641, -1000, 7667, -1000,
	11186, 860, 10436, 6655, 6655, -1000, -1000, 6655, 663, -1000,
	6655, -1000, -1000, -1000, 641, 641, 641, 521, -1000, 860,
	597, -1000, -1000, -1000, -144, -128, -1000, -1000, -1000, 2663,
	-1000, 2663, 11186, -1000, 413, 397, -1000, -1000, 699, 68,
	-1000, -1000, -1000, 494, 129, 129, -1000, 210, -1000, -1000,
	-1000, 547, -1000, 537, 582, 535, 10686, -1000, -1000, 579,
	-1000, 177, -1000, -1000, 11186, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, 11186, 10686, -1000,
	-1000, -1000, -1000, -1000, 11186, -1000, -1000, 491, 6655, -1000,
	-1000, -1000, 89, -1000, -1000, 4295, -1000, 868, 8676, -1000,
	-1000, 389, -1000, 7155, 2010, 2010, -1000, -1000, 389, 660,
	660, -1000, 660, 662, -1000, 660, -41, 660, -45, 641,
	389, 389, 1613, 1987, -1000, 1514, 1949, 641, -178, -1000,
	220, 6655, -199, 805, 573, 525, -1000, -1000, 5616, 389,
	533, 95, 521, 844, -1000, 220, 220, 220, 11186, 220,
	11186, 11186, 11186, 8426, 11186, 844, -1000, -1000, -1000, -1000,
	2387, -1000, 516, -1000, 660, -1000, -1000, -86, 886, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-60, 491, -60, 362, -1000, 348, 3751, 4295, 2663, -1000,
	658, -1000, -1000, -1000, -1000, 808, -1000, 220, -1000, 861,
	574, -1000, 2010, -1000, -1000, 85, -1000, -1000, -1000, -1000,
	-1000, -1000, 345, -1000, -1000, -1000, 7155, 7155, -1000, 7155,
	7155, 7155, 389, 491, 220, -1000, 5357, 802, -1000, 641,
	-1000, -1000, 628, 10186, 10186, -1000, -1000, 511, -1000, 509,
	509, 509, 138, -1000, -1000, 134, 11186, -1000, 179, -1000,
	-152, 129, -1000, 129, 464, 420, -1000, -1000, -1000, 11186,
	641, 865, 848, -1000, -1000, 389, 1574, 1574, 1574, 1574,
	40, -1000, -1000, -1000, 514, 885, -1000, 641, -1000, 611,
	79, -1000, 11186, -1000, -1000, -1000, -1000, -1000, 134, -1000,
	394, 176, 491, -1000, 312, 800, -1000, 799, -1000, -1000,
	-1000, -1000, -1000, 501, 16, -1000, 6655, 6655, -1000, -1000,
	-1000, -1000, -1000, 389, 43, -192, 10436, 525, 389, 10186,
	-1000, -1000, -1000, 328, -1000, -1000, -1000, 491, -1000, -1000,
	656, 480, -1000, 11186, 220, 514, -1000, 758, -185, -195,
	505, -1000, -1000, -1000, -1000, -187, -1000, 16, 766, -1000,
	748, -1000, -1000, -1000, 12, -189, -1, -193, 641, -196,
	6905, -1000, 1574, 389, -1000, -1000,
}

var yyPgo = [...]int{
	0, 1186, 10, 38, 1185, 1184, 1183, 927, 924, 905,
	1182, 1181, 1179, 1178, 1176, 1175, 1174, 1173, 1172, 1171,
	1170, 1165, 1164, 1162, 1157, 1154, 1153, 145, 1149, 1140,
	1139, 67, 1137, 63, 1134, 1130, 33, 104, 40, 47,
	503, 1128, 26, 61, 55, 1127, 42, 1125, 1124, 71,
	1122, 58, 1118, 1116, 1353, 1112, 1110, 12, 28, 1102,
	1101, 1100, 1099, 59, 200, 1097, 1096, 1095, 1093, 1092,
	1090, 44, 5, 13, 15, 14, 1088, 169, 8, 1085,
	48, 1084, 1083, 1081, 1078, 41, 1077, 50, 1076, 21,
	49, 1075, 17, 65, 29, 22, 9, 70, 52, 69,
	1074, 30, 57, 39, 1069, 1068, 386, 1064, 1061, 1059,
	1058, 1057, 1055, 147, 352, 1054, 1053, 1051, 1049, 32,
	51, 497, 767, 60, 1037, 1033, 7, 1028, 1336, 83,
	66, 20, 1026, 25, 426, 31, 1023, 1022, 1019, 1018,
	36, 1016, 34, 1013, 1010, 1007, 1004, 1003, 999, 997,
	138, 995, 993, 990, 18, 76, 989, 988, 53, 23,
	987, 985, 984, 37, 56, 983, 43, 981, 980, 976,
	975, 27, 24, 967, 16, 964, 6, 963, 962, 2,
	961, 19, 951, 3, 947, 4, 35, 944, 943, 46,
	939, 938, 45, 935, 933, 931, 930, 0, 455, 922,
	903, 96,
}

var yyR1 = [...]int{
	0, 195, 196, 196, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 2, 2, 2, 6, 3,
	4, 4, 5, 5, 7, 7, 7, 30, 30, 8,
	9, 9, 9, 199, 199, 49, 49, 93, 93, 10,
	10, 10, 10, 10, 10, 98, 98, 103, 103, 103,
	104, 104, 104, 104, 138, 138, 136, 136, 11, 11,
	11, 11, 11, 11, 11, 185, 185, 184, 183, 183,
	182, 182, 181, 16, 168, 169, 169, 169, 164, 141,
	141, 142, 142, 142, 142, 142, 149, 145, 145, 143,
	143, 143, 143, 143, 143, 143, 144, 144, 144, 144,
	144, 146, 146, 146, 146, 146, 147, 147, 147, 147,
	147, 147, 147, 147, 147, 147, 147, 147, 147, 147,
	147, 148, 148, 148, 148, 148, 148, 148, 148, 163,
	163, 150, 150, 158, 158, 159, 159, 159, 156, 156,
	157, 157, 160, 160, 160, 151, 151, 151, 151, 151,
	151, 151, 153, 153, 161, 161, 154, 154, 154, 155,
	155, 155, 162, 162, 162, 162, 162, 152, 152, 165,
	165, 177, 177, 176, 176, 176, 167, 167, 173, 173,
	173, 173, 173, 166, 166, 175, 175, 174, 170, 170,
	170, 171, 171, 171, 172, 172, 172, 12, 12, 12,
	12, 12, 12, 12, 12, 12, 186, 186, 186, 186,
	186, 186, 186, 186, 186, 186, 186, 180, 178, 178,
	179, 179, 13, 14, 14, 14, 14, 14, 15, 15,
	17, 18, 18, 18, 18, 18, 18, 18, 18, 18,
	18, 18, 18, 18, 18, 18, 18, 18, 18, 18,
	18, 18, 18, 18, 18, 18, 18, 111, 111, 108,
	108, 109, 109, 110, 110, 110, 112, 112, 112, 139,
	139, 137, 137, 137, 19, 19, 21, 21, 22, 23,
	20, 20, 20, 20, 20, 24, 25, 25, 25, 189,
	189, 189, 189, 189, 189, 26, 26, 190, 190, 200,
	27, 28, 28, 29, 29, 29, 33, 33, 33, 31,
	31, 32, 32, 38, 38, 37, 37, 39, 39, 39,
	39, 124, 124, 124, 126, 126, 126, 126, 123, 41,
	41, 42, 42, 43, 43, 44, 44, 44, 56, 56,
	92, 92, 94, 94, 45, 45, 45, 45, 46, 46,
	47, 47, 48, 48, 132, 132, 131, 131, 131, 130,
	50, 50, 50, 52, 51, 51, 51, 51, 53, 53,
	55, 55, 54, 54, 57, 57, 57, 57, 58, 58,
	40, 40, 40, 40, 40, 40, 40, 107, 107, 60,
	60, 59, 59, 59, 59, 59, 59, 59, 59, 59,
	59, 70, 70, 70, 70, 70, 70, 61, 61, 61,
	61, 61, 61, 61, 36, 36, 71, 71, 71, 77,
	72, 72, 64, 64, 64, 64, 64, 64, 64, 64,
	64, 64, 64, 64, 64, 64, 64, 64, 64, 64,
	64, 64, 64, 64, 64, 64, 64, 64, 64, 64,
	64, 64, 64, 64, 194, 193, 68, 68, 68, 66,
	66, 66, 66, 66, 66, 66, 66, 66, 66, 66,
	66, 66, 66, 66, 67, 67, 67, 67, 67, 67,
	67, 67, 201, 201, 69, 69, 69, 69, 34, 34,
	34, 34, 34, 135, 135, 140, 140, 140, 140, 140,
	140, 140, 140, 140, 140, 140, 140, 140, 140, 81,
	81, 35, 35, 79, 79, 80, 82, 82, 78, 78,
	78, 63, 63, 63, 63, 63, 63, 63, 63, 63,
	63, 63, 63, 63, 187, 187, 65, 65, 65, 83,
	83, 84, 84, 85, 85, 86, 86, 87, 88, 88,
	88, 89, 89, 89, 89, 90, 90, 90, 62, 62,
	62, 62, 62, 62, 91, 91, 91, 91, 95, 95,
	73, 73, 75, 75, 74, 76, 188, 188, 188, 96,
	96, 101, 97, 97, 99, 99, 102, 102, 102, 100,
	100, 100, 127, 127, 127, 105, 105, 113, 113, 114,
	114, 106, 106, 115, 115, 115, 115, 115, 115, 115,
	115, 115, 115, 116, 116, 116, 117, 117, 118, 118,
	118, 125, 125, 121, 121, 122, 122, 128, 128, 128,
	128, 128, 129, 129, 191, 191, 191, 191, 191, 191,
	191, 191, 191, 191, 191, 191, 191, 191, 191, 191,
	191, 191, 191, 191, 119, 119, 119, 119, 119, 119,
	119, 119, 119, 119, 119, 119, 119, 119, 119, 119,
	119, 119, 119, 119, 119, 119, 119, 119, 119, 119,
	119, 119, 119, 119, 119, 119, 119, 119, 119, 119,
	119, 119, 119, 119, 119, 119, 119, 119, 119, 119,
	119, 119, 119, 119, 119, 119, 119, 119, 119, 119,
	119, 119, 119, 119, 119, 119, 119, 119, 119, 119,
	119, 119, 119, 119, 119, 119, 119, 119, 119, 119,
	119, 119, 119, 119, 119, 119, 119, 119, 119, 119,
	119, 119, 119, 119, 119, 119, 120, 120, 120, 120,
	120, 120, 120, 120, 120, 120, 120, 120, 120, 120,
	120, 120, 120, 120, 120, 120, 120, 120, 120, 120,
	120, 120, 120, 120, 120, 120, 120, 120, 120, 120,
	120, 120, 120, 120, 120, 120, 120, 120, 120, 120,
	120, 120, 120, 120, 120, 120, 120, 120, 120, 120,
	120, 120, 120, 120, 120, 120, 120, 120, 120, 120,
	120, 120, 120, 120, 120, 120, 120, 120, 120, 120,
	120, 120, 120, 120, 120, 120, 120, 120, 120, 120,
	120, 120, 120, 120, 120, 120, 120, 120, 120, 120,
	120, 120, 120, 120, 192, 192, 192, 197, 198, 133,
	134, 134, 134,
}

var yyR2 = [...]int{
	0, 2, 0, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 4, 6, 7, 5, 10,
	1, 3, 1, 3, 8, 8, 6, 1, 1, 8,
	8, 7, 6, 1, 1, 1, 3, 0, 4, 3,
	3, 4, 4, 5, 4, 1, 3, 3, 2, 2,
	2, 2, 2, 1, 1, 1, 1, 1, 2, 8,
	4, 6, 5, 5, 5, 0, 2, 1, 0, 2,
	1, 3, 3, 4, 4, 1, 3, 3, 8, 1,
	3, 3, 1, 1, 1, 1, 1, 2, 1, 1,
	1, 1, 1, 1, 1, 1, 2, 2, 2, 2,
	2, 1, 2, 2, 2, 1, 4, 4, 2, 2,
	3, 3, 3, 3, 1, 1, 1, 1, 1, 6,
	6, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	3, 0, 3, 0, 5, 0, 3, 5, 0, 1,
	0, 1, 0, 1, 2, 0, 2, 2, 2, 2,
	2, 2, 0, 3, 0, 1, 0, 3, 3, 0,
	2, 2, 0, 2, 1, 2, 1, 0, 2, 5,
	4, 1, 2, 2, 3, 2, 0, 1, 2, 3,
	3, 2, 2, 1, 1, 1, 3, 2, 0, 1,
	3, 1, 2, 3, 1, 1, 1, 6, 7, 7,
	12, 7, 7, 7, 4, 5, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 7, 1, 3,
	8, 8, 5, 4, 6, 5, 4, 4, 3, 2,
	3, 4, 4, 4, 4, 4, 4, 4, 4, 3,
	3, 3, 3, 4, 4, 3, 4, 6, 4, 4,
	2, 4, 2, 2, 2, 2, 3, 1, 1, 0,
	1, 0, 1, 0, 2, 2, 0, 2, 2, 1,
	1, 0, 1, 1, 2, 1, 1, 2, 1, 1,
	2, 2, 2, 2, 2, 3, 4, 4, 7, 1,
	1, 1, 1, 1, 1, 2, 4, 1, 3, 0,
	2, 0, 2, 1, 2, 2, 0, 1, 1, 0,
	1, 0, 1, 0, 1, 1, 3, 1, 2, 3,
	5, 0, 1, 2, 1, 1, 1, 1, 1, 0,
	2, 1, 3, 1, 1, 1, 3, 3, 3, 7,
	1, 3, 1, 3, 4, 4, 4, 3, 2, 4,
	0, 1, 0, 2, 0, 1, 0, 1, 2, 1,
	1, 2, 2, 1, 2, 3, 2, 3, 2, 2,
	2, 1, 1, 3, 0, 5, 5, 5, 0, 2,
	1, 3, 3, 2, 3, 1, 2, 0, 3, 1,
	1, 3, 3, 4, 4, 5, 3, 4, 5, 6,
	2, 1, 2, 1, 2, 1, 2, 1, 1, 1,
	1, 1, 1, 1, 0, 2, 1, 1, 1, 3,
	1, 3, 1, 1, 1, 1, 1, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 2, 2, 2, 2, 2, 2, 1, 1,
	1, 1, 1, 1, 2, 3, 4, 5, 6, 4,
	4, 6, 6, 6, 6, 8, 8, 6, 8, 8,
	9, 7, 5, 4, 2, 2, 2, 2, 2, 2,
	2, 2, 0, 2, 4, 4, 4, 4, 0, 3,
	4, 7, 3, 1, 1, 2, 3, 3, 1, 2,
	2, 1, 2, 1, 2, 2, 1, 2, 4, 0,
	1, 0, 2, 1, 2, 4, 0, 2, 1, 3,
	5, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 2, 1, 1, 2, 1, 2, 2, 0,
	3, 0, 2, 0, 3, 1, 3, 2, 0, 1,
	1, 0, 2, 4, 4, 0, 2, 4, 2, 1,
	3, 5, 4, 6, 1, 3, 3, 5, 0, 5,
	1, 3, 1, 2, 3, 1, 0, 2, 2, 1,
	3, 3, 1, 3, 3, 3, 3, 3, 3, 1,
	2, 1, 1, 1, 1, 1, 1, 0, 2, 0,
	3, 0, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 0, 1, 1, 1, 1, 0, 1,
	1, 0, 2, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 0,
	0, 1, 1,
}

var yyChk = [...]int{
	-1000, -195, -1, -2, -6, -7, -8, -9, -10, -11,
	-12, -13, -14, -15, -17, -18, -19, -21, -22, -23,
	-20, -24, -25, -26, -3, -4, 6, 7, -30, 9,
	10, 30, -16, 136, 137, 139, 138, 164, 140, 157,
	49, 176, 177, 179, 180, 25, 158, 159, 162, 163,
	181, 182, 183, -197, 8, 262, 53, -196, 278, -85,
	15, -29, 5, -27, -200, -27, -27, -27, -27, -27,
	-168, 53, -118, 145, 95, 172, 254, 142, 143, 149,
	-121, 57, -120, 270, 176, 190, 184, 210, 202, 200,
	203, 240, 68, 179, 250, 160, 199, 195, 193, 27,
	215, 275, 194, 155, 154, 216, 220, 241, 188, 189,
	244, 214, 156, 32, 272, 34, 168, 245, 218, 243,
	213, 209, 212, 187, 208, 38, 222, 221, 223, 239,
	205, 196, 18, 248, 163, 166, 217, 219, 150, 170,
	274, 246, 192, 167, 162, 249, 180, 242, 252, 37,
	227, 186, 153, 177, 174, 206, 169, 197, 198, 211,
	185, 207, 178, 171, 164, 251, 228, 276, 204, 201,
	175, 173, 232, 233, 234, 235, 273, 247, 229, -106,
	145, 147, 143, 143, 144, 145, 254, 142, 143, -54,
	-128, 61, 62, 60, 57, -120, 145, 172, 143, 131,
	203, 136, 230, 144, 32, 170, -137, -139, 143, 178,
	-108, 173, 232, 233, 234, 235, 57, 242, 241, 243,
	236, -128, 178, -133, -133, -133, -133, -133, 182, -128,
	57, -2, -89, 17, 16, -5, -3, -197, 6, 20,
	21, -33, 39, 40, -28, -39, 122, -40, -128, -59,
	97, -64, 29, 61, 60, 57, -120, 23, -78, -63,
	-60, -76, -77, 131, 132, 120, 121, 128, 98, -193,
	-194, -68, -66, -67, -69, -121, 59, 69, 63, 64,
	65, 66, 72, 58, 70, 73, 74, -74, -197, 56,
	43, 44, 263, 264, 265, 266, 269, 267, 100, 33,
	253, 261, 260, 259, 257, 258, 255, 256, 148, 254,
	126, 262, -106, -42, -43, -44, -45, -56, -77, -197,
	-54, 11, -49, -54, -97, -99, -138, -136, 178, -102,
	-121, 243, 242, 241, -122, -100, -119, 240, 203, 239,
	141, 96, 22, 24, 225, 99, 131, 16, 100, 130,
	263, 136, 47, 255, 256, 253, 265, 266, 254, 230,
	29, 10, 25, 158, 21, 124, 138, 103, 104, 161,
	23, 159, 74, 19, 50, 11, 13, 14, 148, 147,
	115, 144, 45, 8, 56, 26, 112, 41, 28, 43,
	113, 17, 257, 258, 31, 269, 165, 126, 48, 35,
	97, 72, 51, 95, 15, 46, 114, 139, 262, 44,
	142, 6, 268, 30, 157, 42, 143, 231, 102, 146,
	73, 5, 149, 9, 49, 52, 259, 260, 261, 33,
	101, 12, -169, -164, 57, 144, -54, 262, -121, -114,
	148, -114, -114, 143, -54, -54, -113, 148, 57, -113,
	-113, -113, -54, 133, -54, 57, 30, 254, 57, 170,
	143, 171, 145, -134, -197, -122, -121, -134, -134, -134,
	174, 175, 174, 175, -134, 244, -109, 237, 51, -134,
	-128, 11, 22, -197, 52, -198, 55, -90, 19, 31,
	-40, -128, -86, -87, -40, -85, -2, -27, 35, -31,
	21, 67, 11, -124, 96, 95, 112, -123, 22, -126,
	60, 61, 62, -121, 133, -40, -61, 115, 97, 113,
	114, 99, 117, 116, 127, 120, 121, 122, 123, 124,
	125, 126, 118, 119, 130, 105, 106, 107, 108, 109,
	110, 111, -107, -197, -77, -197, 134, 135, -187, 71,
	-64, 29, -64, -64, -64, -64, -64, -197, -2, -72,
	-40, -197, 60, -64, -197, -197, -197, -197, -197, -197,
	-197, -197, -81, -40, -197, -201, -197, -201, -201, -201,
	-201, -201, -201, -201, -197, -197, -197, -197, -55, 26,
	-54, 30, 54, -50, -52, -51, -53, 41, 45, 47,
	42, 43, 44, 48, -132, 22, -42, -197, -131, 166,
	-130, 22, -128, -54, -49, -199, 54, 11, 52, 54,
	54, -97, -99, 178, -98, -103, 244, 246, 146, 105,
	-127, -121, -192, 29, 60, 61, 62, 30, 55, 54,
	-142, -145, -147, -146, -148, -149, -143, -144, 200, 201,
	131, 204, 206, 207, 208, 209, 210, 211, 212, 213,
	214, 215, 30, 160, 197, 198, 199, 94, 216, 217,
	218, 219, 220, 221, 222, 223, 202, 184, 185, 186,
	187, 188, 189, 190, 192, 193, 194, 195, 196, 57,
	-134, 145, -185, 52, 57, 97, 57, -54, -54, -134,
	146, -54, 23, 51, -54, 57, 57, -129, -128, -119,
	-134, -134, -134, -134, -134, -134, -134, -134, -134, -134,
	-134, -134, 245, -111, 231, 238, -54, -189, -3, -7,
	-9, -8, 57, -192, -189, -141, -142, -190, -128, 9,
	115, 54, 18, 133, 54, -88, 24, 25, -89, -198,
	-33, -65, -121, 63, 66, -32, 42, -54, -40, -40,
	-70, 72, 97, 73, 74, -123, 122, -129, -122, -119,
	-64, -71, -74, -77, 71, 115, 113, 114, 99, -64,
	-64, -64, -64, -64, -64, -64, -64, -64, -64, -64,
	-64, -64, -64, -64, -135, 57, -192, 57, -63, 60,
	61, -63, 71, -38, 21, -37, -39, -198, 54, -198,
	-2, -191, 75, 76, 77, 78, 79, 80, 81, 82,
	94, 83, 84, 85, 86, 87, 88, 89, 90, 91,
	92, 93, -37, -37, -40, -40, -78, -121, -128, -78,
	-37, -31, -79, -80, 101, -78, -198, -37, -38, -37,
	-37, -93, 29, 166, -54, -96, -101, -78, -43, -44,
	-44, -43, -44, 41, 41, 41, 46, 41, 46, 41,
	-51, -128, -198, -57, 49, 147, 50, -197, -130, -93,
	52, -42, -54, -102, -64, -98, 54, 245, 247, 248,
	-64, 51, -40, -155, 130, -170, -171, -172, -122, -192,
	63, -164, -165, -173, 150, 153, 149, -166, 144, 28,
	-160, 72, 97, -156, 228, -150, 53, -150, -150, -150,
	-150, -154, 203, -154, -154, -154, 53, 53, -150, -150,
	-150, -158, 53, -158, -158, -159, 53, -159, -125, 52,
	-54, -183, 273, -184, 57, -134, 23, -134, -115, 141,
	138, 139, -180, 137, 225, 203, 68, 29, 15, 263,
	166, 276, 57, 167, -54, -54, -134, -110, 11, 115,
	54, -198, 54, 37, -40, -40, -129, -87, -90, -105,
	19, 11, 33, 33, -37, 72, 73, 74, 133, -197,
	-71, -64, -64, -64, -36, 161, 96, -198, -198, -37,
	54, -40, -198, -198, -198, 54, 52, 22, 54, 11,
	133, 54, 11, -198, -37, -82, -80, 103, -40, -198,
	-198, -198, -198, -198, -62, 30, 33, -2, -197, 33,
	-197, -58, 54, 12, 105, -47, -46, 51, 52, -48,
	51, -46, 41, 41, 144, 144, 144, -94, -121, -58,
	-42, -58, -103, -104, 249, 246, 252, 57, -192, 54,
	-172, 105, 53, 28, -166, -166, 57, 57, -151, 29,
	72, -157, 229, 63, -154, -154, -155, 30, -155, -155,
	-155, -163, -192, -163, 63, 63, 51, -121, -134, -182,
	-181, -122, -133, -186, 172, 151, 152, 155, 154, 57,
	144, 28, 150, 153, 166, 149, -186, 172, -116, -117,
	146, 22, 144, 28, 166, -134, -112, 113, 12, -128,
	-128, -142, 22, -128, 38, 133, -54, -41, 11, 122,
	-122, -38, -36, 96, -64, -64, -198, -39, -140, 131,
	200, 160, 199, 195, 214, 205, 227, 197, 228, 201,
	-135, -140, -64, -64, -122, -64, -64, 270, -85, 104,
	-40, 102, -95, 51, -96, -73, -75, -74, -197, -2,
	-91, -126, -94, -85, -101, -40, -40, -40, 53, -40,
	-197, -197, -197, -198, 54, -85, -58, 246, 250, 251,
	-171, -172, -175, -174, -121, 57, 57, -153, 51, -192,
	63, 64, 72, 253, 69, 55, -155, -155, 57, 131,
	55, 54, 55, 54, 55, 54, -54, 54, 105, -133,
	-121, -133, -121, -54, -133, -121, -192, -40, -189, -58,
	-42, -198, -64, -198, -150, -150, -150, -159, -150, 189,
	-150, 189, -197, -198, -198, -198, 54, 19, -198, 54,
	19, -197, -35, 268, -40, -188, 277, 27, -95, 54,
	-198, -198, -198, 54, 133, -198, -89, -92, -121, -92,
	-92, -92, -131, -121, -89, 55, 54, -150, -161, 225,
	9, -154, -192, -154, 63, 63, -134, -181, -172, 53,
	26, -83, 13, -154, 57, 63, -64, -64, -64, -64,
	-64, -198, -192, 122, -72, 28, -75, 33, -2, -197,
	-126, -126, 54, 55, -198, -198, -198, -57, -177, -176,
	52, 156, 68, -174, -162, 150, 28, 149, 253, -155,
	-155, 55, 55, -92, -197, -84, 14, 16, -198, -198,
	-198, -198, -198, -34, 115, 273, 9, -73, -2, 133,
	-121, -176, 57, -167, 105, -192, -152, 68, 28, 28,
	55, -178, -179, 166, -40, -72, -198, 271, 48, 274,
	-96, -198, -126, 63, -192, -185, -198, 54, -121, 38,
	272, 275, -183, -179, 33, 38, 168, 273, 169, 274,
	-197, 275, -64, 165, -198, -198,
}

var yyDef = [...]int{
	0, -2, 2, -2, 5, 6, 7, 8, 9, 10,
	11, 12, 13, 14, 15, 16, 17, 18, 19, 20,
	21, 22, 23, 24, 553, 0, 309, 309, 309, 309,
	309, 309, 0, 628, 611, 0, 0, 0, 0, -2,
	285, 286, 0, 288, 289, 859, 859, 859, 859, 859,
	0, 0, 0, 0, 37, 38, 857, 1, 3, 561,
	0, 0, 313, 316, 311, 0, 611, 0, 0, 0,
	68, 0, 0, 844, 0, 845, 609, 609, 609, 629,
	630, 633, 634, 756, 757, 758, 759, 760, 761, 762,
	763, 764, 765, 766, 767, 768, 769, 770, 771, 772,
	773, 774, 775, 776, 777, 778, 779, 780, 781, 782,
	783, 784, 785, 786, 787, 788, 789, 790, 791, 792,
	793, 794, 795, 796, 797, 798, 799, 800, 801, 802,
	803, 804, 805, 806, 807, 808, 809, 810, 811, 812,
	813, 814, 815, 816, 817, 818, 819, 820, 821, 822,
	823, 824, 825, 826, 827, 828, 829, 830, 831, 832,
	833, 834, 835, 836, 837, 838, 839, 840, 841, 842,
	843, 846, 847, 848, 849, 850, 851, 852, 853, 0,
	0, 612, 0, 607, 0, 607, 607, 607, 0, 239,
	382, 637, 638, 639, 640, 641, 844, 845, 0, 0,
	0, 0, 860, 860, 860, 860, 0, 0, 860, 0,
	271, 260, 262, 263, 264, 265, 860, 282, 283, 280,
	270, 284, 287, 290, 291, 292, 293, 294, 0, 0,
	305, 30, 565, 0, 0, 553, 32, 0, 309, 314,
	315, 319, 317, 318, 310, 0, 327, 331, 0, 390,
	0, 395, -2, -2, -2, -2, -2, 0, 432, 433,
	434, 435, 436, 0, 0, 0, 0, 0, 0, 458,
	459, 460, 461, 462, 463, 528, 533, 534, 535, 536,
	537, 538, 539, 540, 541, 399, 400, 585, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 519, 0,
	492, 492, 492, 492, 492, 492, 492, 492, 0, 0,
	0, 0, 0, 0, 341, 343, 344, 345, 364, 0,
	366, 0, 0, 45, 49, 50, 0, 64, 835, 592,
	635, -2, -2, -2, 0, 0, 636, -2, 763, -2,
	664, 665, 666, 667, 668, 669, 670, 671, 672, 673,
	674, 675, 676, 677, 678, 679, 680, 681, 682, 683,
	684, 685, 686, 687, 688, 689, 690, 691, 692, 693,
	694, 695, 696, 697, 698, 699, 700, 701, 702, 703,
	704, 705, 706, 707, 708, 709, 710, 711, 712, 713,
	714, 715, 716, 717, 718, 719, 720, 721, 722, 723,
	724, 725, 726, 727, 728, 729, 730, 731, 732, 733,
	734, 735, 736, 737, 738, 739, 740, 741, 742, 743,
	744, 745, 746, 747, 748, 749, 750, 751, 752, 753,
	754, 755, 0, 85, 0, 0, 860, 0, 75, 0,
	0, 0, 0, 0, 860, 0, 0, 0, 0, 0,
	0, 0, 238, 0, 240, 860, 860, 860, 860, 860,
	860, 860, 860, 249, 861, 862, 635, 250, 251, 252,
	860, 860, 860, 860, 255, 0, 0, 272, 0, 266,
	295, 0, 0, 0, 0, 31, 858, 25, 0, 0,
	562, 0, 554, 555, 558, 561, 30, 316, 0, 321,
	320, 312, 0, 328, 0, 0, 0, 332, 0, 338,
	334, 335, 336, 337, 0, 393, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 417, 418, 419, 420, 421,
	422, 423, 396, 0, 410, 0, 0, 0, 542, 544,
	452, 543, 453, 454, 455, 456, 457, 323, 30, 0,
	430, 0, -2, 0, 0, 0, 0, 0, 0, 0,
	0, 319, 0, 520, 0, 484, 0, 485, 486, 487,
	488, 489, 490, 491, 0, 323, 0, 0, 47, 0,
	381, 0, 0, 0, 0, 0, 0, 370, 0, 0,
	373, 0, 0, 0, 0, 365, 0, 0, 384, 808,
	367, 0, 369, -2, 0, 0, 0, 43, 44, 0,
	0, 51, 52, 0, 54, 55, 0, 0, 0, 0,
	169, 602, 603, 604, 854, 855, 856, 600, 198, 0,
	152, 148, 92, 93, 94, 95, 141, 98, 141, 141,
	141, 141, 166, 166, 166, 166, 124, 125, 126, 127,
	128, 0, 0, 111, 141, 141, 141, 115, 131, 132,
	133, 134, 135, 136, 137, 138, 96, 99, 100, 101,
	102, 103, 104, 105, 143, 143, 143, 145, 145, 631,
	70, 0, 78, 0, 860, 0, 860, 83, 0, 214,
	0, 233, 608, 0, 860, 236, 237, 383, 642, 643,
	241, 242, 243, 244, 245, 246, 247, 248, 253, 258,
	254, 259, 256, 273, 267, 268, 261, 296, 299, 300,
	301, 302, 303, 304, 297, 0, 89, 306, 307, 566,
	0, 0, 0, 0, 0, 557, 559, 560, 565, 33,
	319, 0, 546, 0, 0, 0, 322, 28, 391, 392,
	394, 411, 0, 413, 415, 333, 329, 0, 529, -2,
	401, 402, 426, 427, 428, 0, 0, 0, 0, 424,
	406, 0, 437, 438, 439, 440, 441, 442, 443, 444,
	445, 446, 447, 448, 451, 503, 504, 0, 449, 531,
	532, 450, 545, 0, 0, 324, 325, 429, 0, 584,
	30, 465, 644, 645, 646, 647, 648, 649, 650, 651,
	652, 653, 654, 655, 656, 657, 658, 659, 660, 661,
	662, 663, 0, 0, 0, 0, 0, 528, 0, 0,
	0, 0, 526, 523, 0, 0, 493, 0, 0, 0,
	0, 0, 0, 0, 380, 388, 589, 0, 342, 360,
	362, 0, 357, 371, 372, 374, 0, 376, 0, 378,
	379, 346, 347, 348, 0, 0, 0, 0, 368, 388,
	0, 388, 46, 593, 595, 53, 0, 0, 58, 59,
	594, 596, 597, 598, 0, 84, 199, 201, 204, 205,
	206, 86, 87, 0, 0, 0, 0, 0, 193, 194,
	155, 153, 0, 150, 149, 97, 0, 166, 166, 118,
	119, 169, 0, 169, 169, 169, 0, 0, 112, 113,
	114, 106, 0, 107, 108, 109, 0, 110, 0, 0,
	860, 72, 0, 76, 77, 73, 610, 74, 859, 0,
	0, 623, 215, 613, 614, 615, 616, 617, 618, 619,
	620, 621, 622, 0, 232, 860, 235, 276, 0, 0,
	0, 0, 0, 0, 563, 564, 0, 556, 26, 0,
	605, 606, 547, 548, 339, 412, 414, 416, 0, 323,
	403, 424, 407, 0, 404, 0, 0, 398, 466, 0,
	0, 431, -2, 469, 470, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 553, 0, 524, 0, 0, 483,
	494, 495, 496, 497, 578, 0, 0, -2, 0, 36,
	0, 553, 0, 0, 0, 354, 361, 0, 0, 355,
	0, 356, 375, 377, 0, 0, 0, 0, 352, 553,
	388, 42, 56, 57, 0, 0, 63, 170, 171, 0,
	202, 0, 0, 188, 0, 0, 191, 192, 162, 0,
	154, 91, 151, 0, 169, 169, 120, 0, 121, 122,
	123, 0, 139, 0, 0, 0, 0, 632, 71, 79,
	80, 0, 207, 859, 0, 216, 217, 218, 219, 220,
	221, 222, 223, 224, 225, 226, 859, 0, 0, 859,
	624, 625, 626, 627, 0, 234, 257, 0, 0, 274,
	275, 90, 0, 308, 567, 0, 27, 388, 0, 330,
	530, 0, 405, 0, 425, 408, 467, 326, 0, 141,
	141, 508, 141, 145, 511, 141, 513, 141, 516, 0,
	0, 0, 0, 0, 529, 0, 0, 0, 521, 482,
	527, 0, 586, 0, 578, 568, 580, 582, 0, 30,
	0, 574, 0, 561, 590, 389, 591, 358, 0, 363,
	0, 0, 0, 366, 0, 561, 41, 60, 61, 62,
	200, 203, 0, 195, 141, 189, 190, 164, 0, 156,
	157, 158, 159, 160, 161, 142, 116, 117, 167, 168,
	166, 0, 166, 0, 146, 0, 860, 0, 0, 208,
	0, 209, 211, 212, 213, 0, 277, 278, 298, 549,
	340, 468, 409, 471, 505, 166, 509, 510, 512, 514,
	515, 517, 0, 473, 472, 474, 0, 0, 477, 0,
	0, 0, 0, 0, 525, 34, 0, 0, 35, 0,
	583, -2, 0, 0, 0, 48, 39, 0, 350, 0,
	0, 0, 384, 353, 40, 180, 0, 197, 172, 165,
	0, 169, 140, 169, 0, 0, 69, 81, 82, 0,
	0, 551, 0, 506, 507, 0, 0, 0, 0, 0,
	498, 481, 522, 587, 588, 0, 581, 0, -2, 0,
	576, 575, 0, 359, 385, 386, 387, 349, 179, 181,
	0, 186, 0, 196, 177, 0, 174, 176, 163, 129,
	130, 144, 147, 0, 0, 29, 0, 0, 518, 475,
	476, 478, 479, 0, 0, 0, 0, 571, 30, 0,
	351, 182, 183, 0, 187, 185, 88, 0, 173, 175,
	75, 0, 228, 0, 552, 550, 480, 0, 0, 0,
	579, -2, 577, 184, 178, 78, 227, 0, 0, 499,
	0, 502, 210, 229, 0, 500, 0, 0, 0, 0,
	0, 501, 0, 0, 230, 231,
}

var yyTok1 = [...]int{
	1, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 98, 3, 3, 3, 125, 117, 3,
	53, 55, 122, 120, 54, 121, 133, 123, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 278,
	106, 105, 107, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 127, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 116, 3, 128,
}

var yyTok2 = [...]int{
	2, 3, 4, 5, 6, 7, 8, 9, 10, 11,
	12, 13, 14, 15, 16, 17, 18, 19, 20, 21,
	22, 23, 24, 25, 26, 27, 28, 29, 30, 31,
	32, 33, 34, 35, 36, 37, 38, 39, 40, 41,
	42, 43, 44, 45, 46, 47, 48, 49, 50, 51,
	52, 56, 57, 58, 59, 60, 61, 62, 63, 64,
	65, 66, 67, 68, 69, 70, 71, 72, 73, 74,
	75, 76, 77, 78, 79, 80, 81, 82, 83, 84,
	85, 86, 87, 88, 89, 90, 91, 92, 93, 94,
	95, 96, 97, 99, 100, 101, 102, 103, 104, 108,
	109, 110, 111, 112, 113, 114, 115, 118, 119, 124,
	126, 129, 130, 131, 132, 134, 135, 136, 137, 138,
	139, 140, 141, 142, 143, 144, 145, 146, 147, 148,
	149, 150, 151, 152, 153, 154, 155, 156, 157, 158,
	159, 160, 161, 162, 163, 164, 165, 166, 167, 168,
	169, 170, 171, 172, 173, 174, 175, 176, 177, 178,
	179, 180, 181, 182, 183, 184, 185, 186, 187, 188,
	189, 190, 191, 192, 193, 194, 195, 196, 197, 198,
	199, 200, 201, 202, 203, 204, 205, 206, 207, 208,
	209, 210, 211, 212, 213, 214, 215, 216, 217, 218,
	219, 220, 221, 222, 223, 224, 225, 226, 227, 228,
	229, 230, 231, 232, 233, 234, 235, 236, 237, 238,
	239, 240, 241, 242, 243, 244, 245, 246, 247, 248,
	249, 250, 251, 252, 253, 254, 255, 256, 257, 258,
	259, 260, 261, 262, 263, 264, 265, 266, 267, 268,
	269, 270, 271, 272, 273, 274,
}

var yyTok3 = [...]int{
	57600, 275, 57601, 276, 57602, 277, 0,
}

var yyErrorMessages = [...]struct {
	state int
	token int
	msg   string
}{}

//line yaccpar:1

/*	parser for yacc output	*/

var (
	yyDebug        = 0
	yyErrorVerbose = false
)

type yyLexer interface {
	Lex(lval *yySymType) int
	Error(s string)
}

type yyParser interface {
	Parse(yyLexer) int
	Lookahead() int
}

type yyParserImpl struct {
	lval  yySymType
	stack [yyInitialStackSize]yySymType
	char  int
}

func (p *yyParserImpl) Lookahead() int {
	return p.char
}

func yyNewParser() yyParser {
	return &yyParserImpl{}
}

const yyFlag = -1000

func yyTokname(c int) string {
	if c >= 1 && c-1 < len(yyToknames) {
		if yyToknames[c-1] != "" {
			return yyToknames[c-1]
		}
	}
	return __yyfmt__.Sprintf("tok-%v", c)
}

func yyStatname(s int) string {
	if s >= 0 && s < len(yyStatenames) {
		if yyStatenames[s] != "" {
			return yyStatenames[s]
		}
	}
	return __yyfmt__.Sprintf("state-%v", s)
}

func yyErrorMessage(state, lookAhead int) string {
	const TOKSTART = 4

	if !yyErrorVerbose {
		return "syntax error"
	}

	for _, e := range yyErrorMessages {
		if e.state == state && e.token == lookAhead {
			return "syntax error: " + e.msg
		}
	}

	res := "syntax error: unexpected " + yyTokname(lookAhead)

	// To match Bison, suggest at most four expected tokens.
	expected := make([]int, 0, 4)

	// Look for shiftable tokens.
	base := yyPact[state]
	for tok := TOKSTART; tok-1 < len(yyToknames); tok++ {
		if n := base + tok; n >= 0 && n < yyLast && yyChk[yyAct[n]] == tok {
			if len(expected) == cap(expected) {
				return res
			}
			expected = append(expected, tok)
		}
	}

	if yyDef[state] == -2 {
		i := 0
		for yyExca[i] != -1 || yyExca[i+1] != state {
			i += 2
		}

		// Look for tokens that we accept or reduce.
		for i += 2; yyExca[i] >= 0; i += 2 {
			tok := yyExca[i]
			if tok < TOKSTART || yyExca[i+1] == 0 {
				continue
			}
			if len(expected) == cap(expected) {
				return res
			}
			expected = append(expected, tok)
		}

		// If the default action is to accept or reduce, give up.
		if yyExca[i+1] != 0 {
			return res
		}
	}

	for i, tok := range expected {
		if i == 0 {
			res += ", expecting "
		} else {
			res += " or "
		}
		res += yyTokname(tok)
	}
	return res
}

func yylex1(lex yyLexer, lval *yySymType) (char, token int) {
	token = 0
	char = lex.Lex(lval)
	if char <= 0 {
		token = yyTok1[0]
		goto out
	}
	if char < len(yyTok1) {
		token = yyTok1[char]
		goto out
	}
	if char >= yyPrivate {
		if char < yyPrivate+len(yyTok2) {
			token = yyTok2[char-yyPrivate]
			goto out
		}
	}
	for i := 0; i < len(yyTok3); i += 2 {
		token = yyTok3[i+0]
		if token == char {
			token = yyTok3[i+1]
			goto out
		}
	}

out:
	if token == 0 {
		token = yyTok2[1] /* unknown char */
	}
	if yyDebug >= 3 {
		__yyfmt__.Printf("lex %s(%d)\n", yyTokname(token), uint(char))
	}
	return char, token
}

func yyParse(yylex yyLexer) int {
	return yyNewParser().Parse(yylex)
}

func (yyrcvr *yyParserImpl) Parse(yylex yyLexer) int {
	var yyn int
	var yyVAL yySymType
	var yyDollar []yySymType
	_ = yyDollar // silence set and not used
	yyS := yyrcvr.stack[:]

	Nerrs := 0   /* number of errors */
	Errflag := 0 /* error recovery flag */
	yystate := 0
	yyrcvr.char = -1
	yytoken := -1 // yyrcvr.char translated into internal numbering
	defer func() {
		// Make sure we report no lookahead when not parsing.
		yystate = -1
		yyrcvr.char = -1
		yytoken = -1
	}()
	yyp := -1
	goto yystack

ret0:
	return 0

ret1:
	return 1

yystack:
	/* put a state and value onto the stack */
	if yyDebug >= 4 {
		__yyfmt__.Printf("char %v in %v\n", yyTokname(yytoken), yyStatname(yystate))
	}

	yyp++
	if yyp >= len(yyS) {
		nyys := make([]yySymType, len(yyS)*2)
		copy(nyys, yyS)
		yyS = nyys
	}
	yyS[yyp] = yyVAL
	yyS[yyp].yys = yystate

yynewstate:
	yyn = yyPact[yystate]
	if yyn <= yyFlag {
		goto yydefault /* simple state */
	}
	if yyrcvr.char < 0 {
		yyrcvr.char, yytoken = yylex1(yylex, &yyrcvr.lval)
	}
	yyn += yytoken
	if yyn < 0 || yyn >= yyLast {
		goto yydefault
	}
	yyn = yyAct[yyn]
	if yyChk[yyn] == yytoken { /* valid shift */
		yyrcvr.char = -1
		yytoken = -1
		yyVAL = yyrcvr.lval
		yystate = yyn
		if Errflag > 0 {
			Errflag--
		}
		goto yystack
	}

yydefault:
	/* default state action */
	yyn = yyDef[yystate]
	if yyn == -2 {
		if yyrcvr.char < 0 {
			yyrcvr.char, yytoken = yylex1(yylex, &yyrcvr.lval)
		}

		/* look through exception table */
		xi := 0
		for {
			if yyExca[xi+0] == -1 && yyExca[xi+1] == yystate {
				break
			}
			xi += 2
		}
		for xi += 2; ; xi += 2 {
			yyn = yyExca[xi+0]
			if yyn < 0 || yyn == yytoken {
				break
			}
		}
		yyn = yyExca[xi+1]
		if yyn < 0 {
			goto ret0
		}
	}
	if yyn == 0 {
		/* error ... attempt to resume parsing */
		switch Errflag {
		case 0: /* brand new error */
			yylex.Error(yyErrorMessage(yystate, yytoken))
			Nerrs++
			if yyDebug >= 1 {
				__yyfmt__.Printf("%s", yyStatname(yystate))
				__yyfmt__.Printf(" saw %s\n", yyTokname(yytoken))
			}
			fallthrough

		case 1, 2: /* incompletely recovered error ... try again */
			Errflag = 3

			/* find a state where "error" is a legal shift action */
			for yyp >= 0 {
				yyn = yyPact[yyS[yyp].yys] + yyErrCode
				if yyn >= 0 && yyn < yyLast {
					yystate = yyAct[yyn] /* simulate a shift of "error" */
					if yyChk[yystate] == yyErrCode {
						goto yystack
					}
				}

				/* the current p has no shift on "error", pop stack */
				if yyDebug >= 2 {
					__yyfmt__.Printf("error recovery pops state %d\n", yyS[yyp].yys)
				}
				yyp--
			}
			/* there is no state on the stack with an error shift ... abort */
			goto ret1

		case 3: /* no shift yet; clobber input char */
			if yyDebug >= 2 {
				__yyfmt__.Printf("error recovery discards %s\n", yyTokname(yytoken))
			}
			if yytoken == yyEofCode {
				goto ret1
			}
			yyrcvr.char = -1
			yytoken = -1
			goto yynewstate /* try again in the same state */
		}
	}

	/* reduction by production yyn */
	if yyDebug >= 2 {
		__yyfmt__.Printf("reduce %v in:\n\t%v\n", yyn, yyStatname(yystate))
	}

	yynt := yyn
	yypt := yyp
	_ = yypt // guard against "declared and not used"

	yyp -= yyR2[yyn]
	// yyp is now the index of $0. Perform the default action. Iff the
	// reduced production is ε, $1 is possibly out of range.
	if yyp+1 >= len(yyS) {
		nyys := make([]yySymType, len(yyS)*2)
		copy(nyys, yyS)
		yyS = nyys
	}
	yyVAL = yyS[yyp+1]

	/* consult goto table to find next state */
	yyn = yyR1[yyn]
	yyg := yyPgo[yyn]
	yyj := yyg + yyS[yyp].yys + 1

	if yyj >= yyLast {
		yystate = yyAct[yyg]
	} else {
		yystate = yyAct[yyj]
		if yyChk[yystate] != -yyn {
			yystate = yyAct[yyg]
		}
	}
	// dummy call; replaced with literal code
	switch yynt {

	case 1:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:326
		{
			setParseTree(yylex, yyDollar[1].statement)
		}
	case 2:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:331
		{
		}
	case 3:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:332
		{
		}
	case 4:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:336
		{
			yyVAL.statement = yyDollar[1].selStmt
		}
	case 25:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:362
		{
			sel := yyDollar[1].selStmt.(*Select)
			sel.OrderBy = yyDollar[2].orderBy
			sel.Limit = yyDollar[3].limit
			sel.Lock = yyDollar[4].str
			yyVAL.selStmt = sel
		}
	case 26:
		yyDollar = yyS[yypt-6 : yypt+1]
//line sql.y:370
		{
			yyVAL.selStmt = &Union{Type: yyDollar[2].str, Left: yyDollar[1].selStmt, Right: yyDollar[3].selStmt, OrderBy: yyDollar[4].orderBy, Limit: yyDollar[5].limit, Lock: yyDollar[6].str}
		}
	case 27:
		yyDollar = yyS[yypt-7 : yypt+1]
//line sql.y:374
		{
			yyVAL.selStmt = &Select{Comments: Comments(yyDollar[2].bytes2), Cache: yyDollar[3].str, SelectExprs: SelectExprs{Nextval{Expr: yyDollar[5].expr}}, From: TableExprs{&AliasedTableExpr{Expr: yyDollar[7].tableName}}}
		}
	case 28:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:380
		{
			yyVAL.statement = &Stream{Comments: Comments(yyDollar[2].bytes2), SelectExpr: yyDollar[3].selectExpr, Table: yyDollar[5].tableName}
		}
	case 29:
		yyDollar = yyS[yypt-10 : yypt+1]
//line sql.y:387
		{
			yyVAL.selStmt = &Select{Comments: Comments(yyDollar[2].bytes2), Cache: yyDollar[3].str, Distinct: yyDollar[4].str, Hints: yyDollar[5].str, SelectExprs: yyDollar[6].selectExprs, From: yyDollar[7].tableExprs, Where: NewWhere(WhereStr, yyDollar[8].expr), GroupBy: GroupBy(yyDollar[9].exprs), Having: NewWhere(HavingStr, yyDollar[10].expr)}
		}
	case 30:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:393
		{
			yyVAL.selStmt = yyDollar[1].selStmt
		}
	case 31:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:397
		{
			yyVAL.selStmt = &ParenSelect{Select: yyDollar[2].selStmt}
		}
	case 32:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:403
		{
			yyVAL.selStmt = yyDollar[1].selStmt
		}
	case 33:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:407
		{
			yyVAL.selStmt = &ParenSelect{Select: yyDollar[2].selStmt}
		}
	case 34:
		yyDollar = yyS[yypt-8 : yypt+1]
//line sql.y:414
		{
			// insert_data returns a *Insert pre-filled with Columns & Values
			ins := yyDollar[6].ins
			ins.Action = yyDollar[1].str
			ins.Comments = yyDollar[2].bytes2
			ins.Ignore = yyDollar[3].str
			ins.Table = yyDollar[4].tableName
			ins.Partitions = yyDollar[5].partitions
			ins.OnDup = OnDup(yyDollar[7].updateExprs)
			ins.Returning = yyDollar[8].returning
			yyVAL.statement = ins
		}
	case 35:
		yyDollar = yyS[yypt-8 : yypt+1]
//line sql.y:427
		{
			cols := make(Columns, 0, len(yyDollar[7].updateExprs))
			vals := make(ValTuple, 0, len(yyDollar[8].updateExprs))
			for _, updateList := range yyDollar[7].updateExprs {
				cols = append(cols, updateList.Name.Name)
				vals = append(vals, updateList.Expr)
			}
			yyVAL.statement = &Insert{Action: yyDollar[1].str, Comments: Comments(yyDollar[2].bytes2), Ignore: yyDollar[3].str, Table: yyDollar[4].tableName, Partitions: yyDollar[5].partitions, Columns: cols, Rows: Values{vals}, OnDup: OnDup(yyDollar[8].updateExprs)}
		}
	case 36:
		yyDollar = yyS[yypt-6 : yypt+1]
//line sql.y:437
		{
			yyVAL.statement = &Insert{Action: yyDollar[1].str, Comments: Comments(yyDollar[2].bytes2), Ignore: yyDollar[3].str, Table: yyDollar[4].tableName, Default: true}
		}
	case 37:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:443
		{
			yyVAL.str = InsertStr
		}
	case 38:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:447
		{
			yyVAL.str = ReplaceStr
		}
	case 39:
		yyDollar = yyS[yypt-8 : yypt+1]
//line sql.y:453
		{
			yyVAL.statement = &Update{Comments: Comments(yyDollar[2].bytes2), TableExprs: yyDollar[3].tableExprs, Exprs: yyDollar[5].updateExprs, Where: NewWhere(WhereStr, yyDollar[6].expr), OrderBy: yyDollar[7].orderBy, Limit: yyDollar[8].limit}
		}
	case 40:
		yyDollar = yyS[yypt-8 : yypt+1]
//line sql.y:459
		{
			yyVAL.statement = &Delete{Comments: Comments(yyDollar[2].bytes2), TableExprs: TableExprs{&AliasedTableExpr{Expr: yyDollar[4].tableName}}, Partitions: yyDollar[5].partitions, Where: NewWhere(WhereStr, yyDollar[6].expr), OrderBy: yyDollar[7].orderBy, Limit: yyDollar[8].limit}
		}
	case 41:
		yyDollar = yyS[yypt-7 : yypt+1]
//line sql.y:463
		{
			yyVAL.statement = &Delete{Comments: Comments(yyDollar[2].bytes2), Targets: yyDollar[4].tableNames, TableExprs: yyDollar[6].tableExprs, Where: NewWhere(WhereStr, yyDollar[7].expr)}
		}
	case 42:
		yyDollar = yyS[yypt-6 : yypt+1]
//line sql.y:467
		{
			yyVAL.statement = &Delete{Comments: Comments(yyDollar[2].bytes2), Targets: yyDollar[3].tableNames, TableExprs: yyDollar[5].tableExprs, Where: NewWhere(WhereStr, yyDollar[6].expr)}
		}
	case 43:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:472
		{
		}
	case 44:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:473
		{
		}
	case 45:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:477
		{
			yyVAL.tableNames = TableNames{yyDollar[1].tableName}
		}
	case 46:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:481
		{
			yyVAL.tableNames = append(yyVAL.tableNames, yyDollar[3].tableName)
		}
	case 47:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:486
		{
			yyVAL.partitions = nil
		}
	case 48:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:490
		{
			yyVAL.partitions = yyDollar[3].partitions
		}
	case 49:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:496
		{
			yyVAL.statement = &Set{Comments: Comments(yyDollar[2].bytes2), Exprs: yyDollar[3].setExprs}
		}
	case 50:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:500
		{
			yyVAL.statement = &Set{Comments: Comments(yyDollar[2].bytes2), Exprs: yyDollar[3].setExprs}
		}
	case 51:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:504
		{
			yyVAL.statement = &Set{Comments: Comments(yyDollar[2].bytes2), Scope: yyDollar[3].str, Exprs: yyDollar[4].setExprs}
		}
	case 52:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:508
		{
			yyVAL.statement = &Set{Comments: Comments(yyDollar[2].bytes2), Scope: yyDollar[3].str, Exprs: yyDollar[4].setExprs}
		}
	case 53:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:512
		{
			yyVAL.statement = &Set{Comments: Comments(yyDollar[2].bytes2), Scope: yyDollar[3].str, Exprs: yyDollar[5].setExprs}
		}
	case 54:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:516
		{
			yyVAL.statement = &Set{Comments: Comments(yyDollar[2].bytes2), Exprs: yyDollar[4].setExprs}
		}
	case 55:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:522
		{
			yyVAL.setExprs = SetExprs{yyDollar[1].setExpr}
		}
	case 56:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:526
		{
			yyVAL.setExprs = append(yyVAL.setExprs, yyDollar[3].setExpr)
		}
	case 57:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:532
		{
			yyVAL.setExpr = yyDollar[3].setExpr
		}
	case 58:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:536
		{
			yyVAL.setExpr = &SetExpr{Name: NewColIdent("tx_read_only"), Expr: NewIntVal([]byte("0"))}
		}
	case 59:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:540
		{
			yyVAL.setExpr = &SetExpr{Name: NewColIdent("tx_read_only"), Expr: NewIntVal([]byte("1"))}
		}
	case 60:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:546
		{
			yyVAL.setExpr = &SetExpr{Name: NewColIdent("tx_isolation"), Expr: NewStrVal([]byte("repeatable read"))}
		}
	case 61:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:550
		{
			yyVAL.setExpr = &SetExpr{Name: NewColIdent("tx_isolation"), Expr: NewStrVal([]byte("read committed"))}
		}
	case 62:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:554
		{
			yyVAL.setExpr = &SetExpr{Name: NewColIdent("tx_isolation"), Expr: NewStrVal([]byte("read uncommitted"))}
		}
	case 63:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:558
		{
			yyVAL.setExpr = &SetExpr{Name: NewColIdent("tx_isolation"), Expr: NewStrVal([]byte("serializable"))}
		}
	case 65:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:567
		{
			yyVAL.str = LocalStr
		}
	case 66:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:574
		{
			yyVAL.str = SessionStr
		}
	case 67:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:578
		{
			yyVAL.str = GlobalStr
		}
	case 68:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:584
		{
			yyDollar[1].ddl.TableSpec = yyDollar[2].TableSpec
			yyVAL.statement = yyDollar[1].ddl
		}
	case 69:
		yyDollar = yyS[yypt-8 : yypt+1]
//line sql.y:589
		{
			// Change this to an alter statement
			yyVAL.statement = &DDL{Action: AlterStr, Table: yyDollar[7].tableName, NewName: yyDollar[7].tableName}
		}
	case 70:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:594
		{
			yyVAL.statement = &DDL{Action: CreateStr, NewName: yyDollar[3].tableName.ToViewName()}
		}
	case 71:
		yyDollar = yyS[yypt-6 : yypt+1]
//line sql.y:598
		{
			yyVAL.statement = &DDL{Action: CreateStr, NewName: yyDollar[5].tableName.ToViewName()}
		}
	case 72:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:602
		{
			yyVAL.statement = &DDL{Action: CreateVindexStr, VindexSpec: &VindexSpec{
				Name:   yyDollar[3].colIdent,
				Type:   yyDollar[4].colIdent,
				Params: yyDollar[5].vindexParams,
			}}
		}
	case 73:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:610
		{
			yyVAL.statement = &DBDDL{Action: CreateStr, DBName: string(yyDollar[4].bytes)}
		}
	case 74:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:614
		{
			yyVAL.statement = &DBDDL{Action: CreateStr, DBName: string(yyDollar[4].bytes)}
		}
	case 75:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:619
		{
			yyVAL.colIdent = NewColIdent("")
		}
	case 76:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:623
		{
			yyVAL.colIdent = yyDollar[2].colIdent
		}
	case 77:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:629
		{
			yyVAL.colIdent = NewColIdent(string(yyDollar[1].bytes))
		}
	case 78:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:634
		{
			var v []VindexParam
			yyVAL.vindexParams = v
		}
	case 79:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:639
		{
			yyVAL.vindexParams = yyDollar[2].vindexParams
		}
	case 80:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:645
		{
			yyVAL.vindexParams = make([]VindexParam, 0, 4)
			yyVAL.vindexParams = append(yyVAL.vindexParams, yyDollar[1].vindexParam)
		}
	case 81:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:650
		{
			yyVAL.vindexParams = append(yyVAL.vindexParams, yyDollar[3].vindexParam)
		}
	case 82:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:656
		{
			yyVAL.vindexParam = VindexParam{Key: yyDollar[1].colIdent, Val: yyDollar[3].str}
		}
	case 83:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:662
		{
			yyVAL.ddl = &DDL{Action: CreateStr, NewName: yyDollar[4].tableName}
			setDDL(yylex, yyVAL.ddl)
		}
	case 84:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:669
		{
			yyVAL.TableSpec = yyDollar[2].TableSpec
			yyVAL.TableSpec.Options = yyDollar[4].str
		}
	case 85:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:676
		{
			yyVAL.TableSpec = &TableSpec{}
			yyVAL.TableSpec.AddColumn(yyDollar[1].columnDefinition)
		}
	case 86:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:681
		{
			yyVAL.TableSpec.AddColumn(yyDollar[3].columnDefinition)
		}
	case 87:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:685
		{
			yyVAL.TableSpec.AddIndex(yyDollar[3].indexDefinition)
		}
	case 88:
		yyDollar = yyS[yypt-8 : yypt+1]
//line sql.y:691
		{
			yyDollar[2].columnType.NotNull = yyDollar[3].boolVal
			yyDollar[2].columnType.Default = yyDollar[4].optVal
			yyDollar[2].columnType.OnUpdate = yyDollar[5].optVal
			yyDollar[2].columnType.Autoincrement = yyDollar[6].boolVal
			yyDollar[2].columnType.KeyOpt = yyDollar[7].colKeyOpt
			yyDollar[2].columnType.Comment = yyDollar[8].optVal
			yyVAL.columnDefinition = &ColumnDefinition{Name: NewColIdent(string(yyDollar[1].bytes)), Type: yyDollar[2].columnType}
		}
	case 89:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:703
		{
			yyVAL.columnTypes = ColumnTypes{yyDollar[1].columnType}
		}
	case 90:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:707
		{
			yyVAL.columnTypes = append(yyDollar[1].columnTypes, yyDollar[3].columnType)
		}
	case 91:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:713
		{
			yyVAL.columnType = yyDollar[1].columnType
			yyVAL.columnType.Unsigned = yyDollar[2].boolVal
			yyVAL.columnType.Zerofill = yyDollar[3].boolVal
		}
	case 96:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:725
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 97:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:732
		{
			yyVAL.columnType = yyDollar[1].columnType
			yyVAL.columnType.Length = yyDollar[2].optVal
		}
	case 98:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:737
		{
			yyVAL.columnType = yyDollar[1].columnType
		}
	case 99:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:743
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 100:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:747
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 101:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:751
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 102:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:755
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 103:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:759
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 104:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:763
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 105:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:767
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 106:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:773
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
			yyVAL.columnType.Length = yyDollar[2].LengthScaleOption.Length
			yyVAL.columnType.Scale = yyDollar[2].LengthScaleOption.Scale
		}
	case 107:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:779
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
			yyVAL.columnType.Length = yyDollar[2].LengthScaleOption.Length
			yyVAL.columnType.Scale = yyDollar[2].LengthScaleOption.Scale
		}
	case 108:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:785
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
			yyVAL.columnType.Length = yyDollar[2].LengthScaleOption.Length
			yyVAL.columnType.Scale = yyDollar[2].LengthScaleOption.Scale
		}
	case 109:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:791
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
			yyVAL.columnType.Length = yyDollar[2].LengthScaleOption.Length
			yyVAL.columnType.Scale = yyDollar[2].LengthScaleOption.Scale
		}
	case 110:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:797
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
			yyVAL.columnType.Length = yyDollar[2].LengthScaleOption.Length
			yyVAL.columnType.Scale = yyDollar[2].LengthScaleOption.Scale
		}
	case 111:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:805
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 112:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:809
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal}
		}
	case 113:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:813
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal}
		}
	case 114:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:817
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal}
		}
	case 115:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:821
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 116:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:827
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal, Charset: yyDollar[3].str, Collate: yyDollar[4].str}
		}
	case 117:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:831
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal, Charset: yyDollar[3].str, Collate: yyDollar[4].str}
		}
	case 118:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:835
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal}
		}
	case 119:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:839
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal}
		}
	case 120:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:843
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Charset: yyDollar[2].str, Collate: yyDollar[3].str}
		}
	case 121:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:847
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Charset: yyDollar[2].str, Collate: yyDollar[3].str}
		}
	case 122:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:851
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Charset: yyDollar[2].str, Collate: yyDollar[3].str}
		}
	case 123:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:855
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Charset: yyDollar[2].str, Collate: yyDollar[3].str}
		}
	case 124:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:859
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 125:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:863
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 126:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:867
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 127:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:871
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 128:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:875
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 129:
		yyDollar = yyS[yypt-6 : yypt+1]
//line sql.y:879
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), EnumValues: yyDollar[3].strs, Charset: yyDollar[5].str, Collate: yyDollar[6].str}
		}
	case 130:
		yyDollar = yyS[yypt-6 : yypt+1]
//line sql.y:884
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), EnumValues: yyDollar[3].strs, Charset: yyDollar[5].str, Collate: yyDollar[6].str}
		}
	case 131:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:890
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 132:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:894
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 133:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:898
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 134:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:902
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 135:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:906
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 136:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:910
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 137:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:914
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 138:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:918
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 139:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:924
		{
			yyVAL.strs = make([]string, 0, 4)
			yyVAL.strs = append(yyVAL.strs, "'"+string(yyDollar[1].bytes)+"'")
		}
	case 140:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:929
		{
			yyVAL.strs = append(yyDollar[1].strs, "'"+string(yyDollar[3].bytes)+"'")
		}
	case 141:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:934
		{
			yyVAL.optVal = nil
		}
	case 142:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:938
		{
			yyVAL.optVal = NewIntVal(yyDollar[2].bytes)
		}
	case 143:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:943
		{
			yyVAL.LengthScaleOption = LengthScaleOption{}
		}
	case 144:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:947
		{
			yyVAL.LengthScaleOption = LengthScaleOption{
				Length: NewIntVal(yyDollar[2].bytes),
				Scale:  NewIntVal(yyDollar[4].bytes),
			}
		}
	case 145:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:955
		{
			yyVAL.LengthScaleOption = LengthScaleOption{}
		}
	case 146:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:959
		{
			yyVAL.LengthScaleOption = LengthScaleOption{
				Length: NewIntVal(yyDollar[2].bytes),
			}
		}
	case 147:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:965
		{
			yyVAL.LengthScaleOption = LengthScaleOption{
				Length: NewIntVal(yyDollar[2].bytes),
				Scale:  NewIntVal(yyDollar[4].bytes),
			}
		}
	case 148:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:973
		{
			yyVAL.boolVal = BoolVal(false)
		}
	case 149:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:977
		{
			yyVAL.boolVal = BoolVal(true)
		}
	case 150:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:982
		{
			yyVAL.boolVal = BoolVal(false)
		}
	case 151:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:986
		{
			yyVAL.boolVal = BoolVal(true)
		}
	case 152:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:992
		{
			yyVAL.boolVal = BoolVal(false)
		}
	case 153:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:996
		{
			yyVAL.boolVal = BoolVal(false)
		}
	case 154:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1000
		{
			yyVAL.boolVal = BoolVal(true)
		}
	case 155:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1005
		{
			yyVAL.optVal = nil
		}
	case 156:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1009
		{
			yyVAL.optVal = NewStrVal(yyDollar[2].bytes)
		}
	case 157:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1013
		{
			yyVAL.optVal = NewIntVal(yyDollar[2].bytes)
		}
	case 158:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1017
		{
			yyVAL.optVal = NewFloatVal(yyDollar[2].bytes)
		}
	case 159:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1021
		{
			yyVAL.optVal = NewValArg(yyDollar[2].bytes)
		}
	case 160:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1025
		{
			yyVAL.optVal = NewValArg(yyDollar[2].bytes)
		}
	case 161:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1029
		{
			yyVAL.optVal = NewBitVal(yyDollar[2].bytes)
		}
	case 162:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1034
		{
			yyVAL.optVal = nil
		}
	case 163:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1038
		{
			yyVAL.optVal = NewValArg(yyDollar[3].bytes)
		}
	case 164:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1043
		{
			yyVAL.boolVal = BoolVal(false)
		}
	case 165:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1047
		{
			yyVAL.boolVal = BoolVal(true)
		}
	case 166:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1052
		{
			yyVAL.str = ""
		}
	case 167:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1056
		{
			yyVAL.str = string(yyDollar[3].bytes)
		}
	case 168:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1060
		{
			yyVAL.str = string(yyDollar[3].bytes)
		}
	case 169:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1065
		{
			yyVAL.str = ""
		}
	case 170:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1069
		{
			yyVAL.str = string(yyDollar[2].bytes)
		}
	case 171:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1073
		{
			yyVAL.str = string(yyDollar[2].bytes)
		}
	case 172:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1078
		{
			yyVAL.colKeyOpt = colKeyNone
		}
	case 173:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1082
		{
			yyVAL.colKeyOpt = colKeyPrimary
		}
	case 174:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1086
		{
			yyVAL.colKeyOpt = colKey
		}
	case 175:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1090
		{
			yyVAL.colKeyOpt = colKeyUniqueKey
		}
	case 176:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1094
		{
			yyVAL.colKeyOpt = colKeyUnique
		}
	case 177:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1099
		{
			yyVAL.optVal = nil
		}
	case 178:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1103
		{
			yyVAL.optVal = NewStrVal(yyDollar[2].bytes)
		}
	case 179:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:1109
		{
			yyVAL.indexDefinition = &IndexDefinition{Info: yyDollar[1].indexInfo, Columns: yyDollar[3].indexColumns, Options: yyDollar[5].indexOptions}
		}
	case 180:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:1113
		{
			yyVAL.indexDefinition = &IndexDefinition{Info: yyDollar[1].indexInfo, Columns: yyDollar[3].indexColumns}
		}
	case 181:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1119
		{
			yyVAL.indexOptions = []*IndexOption{yyDollar[1].indexOption}
		}
	case 182:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1123
		{
			yyVAL.indexOptions = append(yyVAL.indexOptions, yyDollar[2].indexOption)
		}
	case 183:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1129
		{
			yyVAL.indexOption = &IndexOption{Name: string(yyDollar[1].bytes), Using: string(yyDollar[2].bytes)}
		}
	case 184:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1133
		{
			// should not be string
			yyVAL.indexOption = &IndexOption{Name: string(yyDollar[1].bytes), Value: NewIntVal(yyDollar[3].bytes)}
		}
	case 185:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1138
		{
			yyVAL.indexOption = &IndexOption{Name: string(yyDollar[1].bytes), Value: NewStrVal(yyDollar[2].bytes)}
		}
	case 186:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1144
		{
			yyVAL.str = ""
		}
	case 187:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1148
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 188:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1154
		{
			yyVAL.indexInfo = &IndexInfo{Type: string(yyDollar[1].bytes) + " " + string(yyDollar[2].bytes), Name: NewColIdent("PRIMARY"), Primary: true, Unique: true}
		}
	case 189:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1158
		{
			yyVAL.indexInfo = &IndexInfo{Type: string(yyDollar[1].bytes) + " " + string(yyDollar[2].str), Name: NewColIdent(string(yyDollar[3].bytes)), Spatial: true, Unique: false}
		}
	case 190:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1162
		{
			yyVAL.indexInfo = &IndexInfo{Type: string(yyDollar[1].bytes) + " " + string(yyDollar[2].str), Name: NewColIdent(string(yyDollar[3].bytes)), Unique: true}
		}
	case 191:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1166
		{
			yyVAL.indexInfo = &IndexInfo{Type: string(yyDollar[1].bytes), Name: NewColIdent(string(yyDollar[2].bytes)), Unique: true}
		}
	case 192:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1170
		{
			yyVAL.indexInfo = &IndexInfo{Type: string(yyDollar[1].str), Name: NewColIdent(string(yyDollar[2].bytes)), Unique: false}
		}
	case 193:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1176
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 194:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1180
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 195:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1186
		{
			yyVAL.indexColumns = []*IndexColumn{yyDollar[1].indexColumn}
		}
	case 196:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1190
		{
			yyVAL.indexColumns = append(yyVAL.indexColumns, yyDollar[3].indexColumn)
		}
	case 197:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1196
		{
			yyVAL.indexColumn = &IndexColumn{Column: yyDollar[1].colIdent, Length: yyDollar[2].optVal}
		}
	case 198:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1201
		{
			yyVAL.str = ""
		}
	case 199:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1205
		{
			yyVAL.str = " " + string(yyDollar[1].str)
		}
	case 200:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1209
		{
			yyVAL.str = string(yyDollar[1].str) + ", " + string(yyDollar[3].str)
		}
	case 201:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1217
		{
			yyVAL.str = yyDollar[1].str
		}
	case 202:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1221
		{
			yyVAL.str = yyDollar[1].str + " " + yyDollar[2].str
		}
	case 203:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1225
		{
			yyVAL.str = yyDollar[1].str + "=" + yyDollar[3].str
		}
	case 204:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1231
		{
			yyVAL.str = yyDollar[1].colIdent.String()

		}
	case 205:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1236
		{
			yyVAL.str = defaultDialect.QuoteHandler().WrapStringLiteral(string(yyDollar[1].bytes))
		}
	case 206:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1240
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 207:
		yyDollar = yyS[yypt-6 : yypt+1]
//line sql.y:1246
		{
			yyVAL.statement = &DDL{Action: AlterStr, Table: yyDollar[4].tableName, NewName: yyDollar[4].tableName}
		}
	case 208:
		yyDollar = yyS[yypt-7 : yypt+1]
//line sql.y:1250
		{
			yyVAL.statement = &DDL{Action: AlterStr, Table: yyDollar[4].tableName, NewName: yyDollar[4].tableName}
		}
	case 209:
		yyDollar = yyS[yypt-7 : yypt+1]
//line sql.y:1254
		{
			yyVAL.statement = &DDL{Action: AlterStr, Table: yyDollar[4].tableName, NewName: yyDollar[4].tableName}
		}
	case 210:
		yyDollar = yyS[yypt-12 : yypt+1]
//line sql.y:1258
		{
			yyVAL.statement = &DDL{
				Action: AddColVindexStr,
				Table:  yyDollar[4].tableName,
				VindexSpec: &VindexSpec{
					Name:   yyDollar[7].colIdent,
					Type:   yyDollar[11].colIdent,
					Params: yyDollar[12].vindexParams,
				},
				VindexCols: yyDollar[9].columns,
			}
		}
	case 211:
		yyDollar = yyS[yypt-7 : yypt+1]
//line sql.y:1271
		{
			yyVAL.statement = &DDL{
				Action: DropColVindexStr,
				Table:  yyDollar[4].tableName,
				VindexSpec: &VindexSpec{
					Name: yyDollar[7].colIdent,
				},
			}
		}
	case 212:
		yyDollar = yyS[yypt-7 : yypt+1]
//line sql.y:1281
		{
			// Change this to a rename statement
			yyVAL.statement = &DDL{Action: RenameStr, Table: yyDollar[4].tableName, NewName: yyDollar[7].tableName}
		}
	case 213:
		yyDollar = yyS[yypt-7 : yypt+1]
//line sql.y:1286
		{
			// Rename an index can just be an alter
			yyVAL.statement = &DDL{Action: AlterStr, Table: yyDollar[4].tableName, NewName: yyDollar[4].tableName}
		}
	case 214:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:1291
		{
			yyVAL.statement = &DDL{Action: AlterStr, Table: yyDollar[3].tableName.ToViewName(), NewName: yyDollar[3].tableName.ToViewName()}
		}
	case 215:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:1295
		{
			yyVAL.statement = &DDL{Action: AlterStr, Table: yyDollar[4].tableName, PartitionSpec: yyDollar[5].partSpec}
		}
	case 227:
		yyDollar = yyS[yypt-7 : yypt+1]
//line sql.y:1314
		{
			yyVAL.partSpec = &PartitionSpec{Action: ReorganizeStr, Name: yyDollar[3].colIdent, Definitions: yyDollar[6].partDefs}
		}
	case 228:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1320
		{
			yyVAL.partDefs = []*PartitionDefinition{yyDollar[1].partDef}
		}
	case 229:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1324
		{
			yyVAL.partDefs = append(yyDollar[1].partDefs, yyDollar[3].partDef)
		}
	case 230:
		yyDollar = yyS[yypt-8 : yypt+1]
//line sql.y:1330
		{
			yyVAL.partDef = &PartitionDefinition{Name: yyDollar[2].colIdent, Limit: yyDollar[7].expr}
		}
	case 231:
		yyDollar = yyS[yypt-8 : yypt+1]
//line sql.y:1334
		{
			yyVAL.partDef = &PartitionDefinition{Name: yyDollar[2].colIdent, Maxvalue: true}
		}
	case 232:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:1340
		{
			yyVAL.statement = &DDL{Action: RenameStr, Table: yyDollar[3].tableName, NewName: yyDollar[5].tableName}
		}
	case 233:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:1346
		{
			var exists bool
			if yyDollar[3].byt != 0 {
				exists = true
			}
			yyVAL.statement = &DDL{Action: DropStr, Table: yyDollar[4].tableName, IfExists: exists}
		}
	case 234:
		yyDollar = yyS[yypt-6 : yypt+1]
//line sql.y:1354
		{
			// Change this to an alter statement
			yyVAL.statement = &DDL{Action: AlterStr, Table: yyDollar[5].tableName, NewName: yyDollar[5].tableName}
		}
	case 235:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:1359
		{
			var exists bool
			if yyDollar[3].byt != 0 {
				exists = true
			}
			yyVAL.statement = &DDL{Action: DropStr, Table: yyDollar[4].tableName.ToViewName(), IfExists: exists}
		}
	case 236:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:1367
		{
			yyVAL.statement = &DBDDL{Action: DropStr, DBName: string(yyDollar[4].bytes)}
		}
	case 237:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:1371
		{
			yyVAL.statement = &DBDDL{Action: DropStr, DBName: string(yyDollar[4].bytes)}
		}
	case 238:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1377
		{
			yyVAL.statement = &DDL{Action: TruncateStr, Table: yyDollar[3].tableName}
		}
	case 239:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1381
		{
			yyVAL.statement = &DDL{Action: TruncateStr, Table: yyDollar[2].tableName}
		}
	case 240:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1386
		{
			yyVAL.statement = &DDL{Action: AlterStr, Table: yyDollar[3].tableName, NewName: yyDollar[3].tableName}
		}
	case 241:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:1392
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes) + " " + string(yyDollar[3].bytes)}
		}
	case 242:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:1396
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes) + " " + string(yyDollar[3].bytes)}
		}
	case 243:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:1400
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes) + " " + string(yyDollar[3].bytes)}
		}
	case 244:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:1405
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes) + " " + string(yyDollar[3].bytes)}
		}
	case 245:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:1409
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes) + " " + string(yyDollar[3].bytes)}
		}
	case 246:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:1413
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes) + " " + string(yyDollar[3].bytes)}
		}
	case 247:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:1417
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes) + " " + string(yyDollar[3].bytes)}
		}
	case 248:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:1421
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes) + " " + string(yyDollar[3].bytes)}
		}
	case 249:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1425
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes)}
		}
	case 250:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1429
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes)}
		}
	case 251:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1433
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes)}
		}
	case 252:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1437
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes)}
		}
	case 253:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:1441
		{
			yyVAL.statement = &Show{Scope: yyDollar[2].str, Type: string(yyDollar[3].bytes)}
		}
	case 254:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:1445
		{
			yyVAL.statement = &Show{Scope: yyDollar[2].str, Type: string(yyDollar[3].bytes)}
		}
	case 255:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1449
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes)}
		}
	case 256:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:1453
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes)}
		}
	case 257:
		yyDollar = yyS[yypt-6 : yypt+1]
//line sql.y:1457
		{
			// this is ugly, but I couldn't find a better way for now
			if yyDollar[4].str == "processlist" {
				yyVAL.statement = &Show{Type: yyDollar[4].str}
			} else {
				showTablesOpt := &ShowTablesOpt{Extended: yyDollar[2].str, Full: yyDollar[3].str, DbName: yyDollar[5].str, Filter: yyDollar[6].showFilter}
				yyVAL.statement = &Show{Type: yyDollar[4].str, ShowTablesOpt: showTablesOpt}
			}
		}
	case 258:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:1467
		{
			yyVAL.statement = &Show{Scope: yyDollar[2].str, Type: string(yyDollar[3].bytes)}
		}
	case 259:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:1471
		{
			yyVAL.statement = &Show{Scope: yyDollar[2].str, Type: string(yyDollar[3].bytes)}
		}
	case 260:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1475
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes)}
		}
	case 261:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:1479
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes), OnTable: yyDollar[4].tableName}
		}
	case 262:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1483
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes)}
		}
	case 263:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1487
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes)}
		}
	case 264:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1491
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes)}
		}
	case 265:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1495
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes)}
		}
	case 266:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1505
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes)}
		}
	case 267:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1511
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 268:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1515
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 269:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1521
		{
			yyVAL.str = ""
		}
	case 270:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1525
		{
			yyVAL.str = "extended "
		}
	case 271:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1531
		{
			yyVAL.str = ""
		}
	case 272:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1535
		{
			yyVAL.str = "full "
		}
	case 273:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1541
		{
			yyVAL.str = ""
		}
	case 274:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1545
		{
			yyVAL.str = yyDollar[2].tableIdent.v
		}
	case 275:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1549
		{
			yyVAL.str = yyDollar[2].tableIdent.v
		}
	case 276:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1555
		{
			yyVAL.showFilter = nil
		}
	case 277:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1559
		{
			yyVAL.showFilter = &ShowFilter{Like: string(yyDollar[2].bytes)}
		}
	case 278:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1563
		{
			yyVAL.showFilter = &ShowFilter{Filter: yyDollar[2].expr}
		}
	case 280:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1570
		{
			yyVAL.str = LocalStr
		}
	case 281:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1576
		{
			yyVAL.str = ""
		}
	case 282:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1580
		{
			yyVAL.str = SessionStr
		}
	case 283:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1584
		{
			yyVAL.str = GlobalStr
		}
	case 284:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1590
		{
			yyVAL.statement = &Use{DBName: yyDollar[2].tableIdent}
		}
	case 285:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1594
		{
			yyVAL.statement = &Use{DBName: TableIdent{v: ""}}
		}
	case 286:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1600
		{
			yyVAL.statement = &Begin{}
		}
	case 287:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1604
		{
			yyVAL.statement = &Begin{}
		}
	case 288:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1610
		{
			yyVAL.statement = &Commit{}
		}
	case 289:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1616
		{
			yyVAL.statement = &Rollback{}
		}
	case 290:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1622
		{
			yyVAL.statement = &OtherRead{}
		}
	case 291:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1626
		{
			yyVAL.statement = &OtherRead{}
		}
	case 292:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1630
		{
			yyVAL.statement = &OtherRead{}
		}
	case 293:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1634
		{
			yyVAL.statement = &OtherAdmin{}
		}
	case 294:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1638
		{
			yyVAL.statement = &OtherAdmin{}
		}
	case 295:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1644
		{
			yyVAL.statement = &DeallocatePrepare{PreparedStatementName: yyDollar[3].tableIdent}
		}
	case 296:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:1650
		{
			yyVAL.statement = &Prepare{PreparedStatementName: yyDollar[2].tableIdent, PreparedStatementQuery: yyDollar[4].preparedQuery}
		}
	case 297:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:1654
		{
			yyVAL.statement = &Prepare{PreparedStatementName: yyDollar[2].tableIdent, PreparedStatementQuery: yyDollar[4].preparedQuery}
		}
	case 298:
		yyDollar = yyS[yypt-7 : yypt+1]
//line sql.y:1658
		{
			yyVAL.statement = &Prepare{PreparedStatementName: yyDollar[2].tableIdent, ColumnTypes: yyDollar[4].columnTypes, PreparedStatementQuery: yyDollar[7].preparedQuery}
		}
	case 299:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1664
		{
			yyVAL.preparedQuery = yyDollar[1].selStmt.(*Select)
		}
	case 300:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1668
		{
			yyVAL.preparedQuery = yyDollar[1].statement.(*Insert)
		}
	case 301:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1672
		{
			yyVAL.preparedQuery = yyDollar[1].statement.(*Delete)
		}
	case 302:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1676
		{
			yyVAL.preparedQuery = yyDollar[1].statement.(*Update)
		}
	case 303:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1680
		{
			yyVAL.preparedQuery = NewTableIdent(string(yyDollar[1].bytes))
		}
	case 304:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1684
		{
			statement, err := NewPreparedQueryFromString(string(yyDollar[1].bytes))
			if statement == nil {
				yylex.Error("unsupported type of prepared query")
				return 1
			}
			if err != nil {
				yylex.Error("syntax error in prepared query")
				return 1
			}
			yyVAL.preparedQuery = statement
		}
	case 305:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1699
		{
			yyVAL.statement = &Execute{PreparedStatementName: NewTableIdent(string(yyDollar[2].bytes))}
		}
	case 306:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:1703
		{
			yyVAL.statement = &Execute{PreparedStatementName: NewTableIdent(string(yyDollar[2].bytes)), Using: yyDollar[4].usingInExecuteList}
		}
	case 307:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1709
		{
			yyVAL.usingInExecuteList = UsingInExecuteList{yyDollar[1].tableIdent}
		}
	case 308:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1713
		{
			yyVAL.usingInExecuteList = append(yyDollar[1].usingInExecuteList, yyDollar[3].tableIdent)
		}
	case 309:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1718
		{
			setAllowComments(yylex, true)
		}
	case 310:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1722
		{
			yyVAL.bytes2 = yyDollar[2].bytes2
			setAllowComments(yylex, false)
		}
	case 311:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1728
		{
			yyVAL.bytes2 = nil
		}
	case 312:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1732
		{
			yyVAL.bytes2 = append(yyDollar[1].bytes2, yyDollar[2].bytes)
		}
	case 313:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1738
		{
			yyVAL.str = UnionStr
		}
	case 314:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1742
		{
			yyVAL.str = UnionAllStr
		}
	case 315:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1746
		{
			yyVAL.str = UnionDistinctStr
		}
	case 316:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1751
		{
			yyVAL.str = ""
		}
	case 317:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1755
		{
			yyVAL.str = SQLNoCacheStr
		}
	case 318:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1759
		{
			yyVAL.str = SQLCacheStr
		}
	case 319:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1764
		{
			yyVAL.str = ""
		}
	case 320:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1768
		{
			yyVAL.str = DistinctStr
		}
	case 321:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1773
		{
			yyVAL.str = ""
		}
	case 322:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1777
		{
			yyVAL.str = StraightJoinHint
		}
	case 323:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1782
		{
			yyVAL.selectExprs = nil
		}
	case 324:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1786
		{
			yyVAL.selectExprs = yyDollar[1].selectExprs
		}
	case 325:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1792
		{
			yyVAL.selectExprs = SelectExprs{yyDollar[1].selectExpr}
		}
	case 326:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1796
		{
			yyVAL.selectExprs = append(yyVAL.selectExprs, yyDollar[3].selectExpr)
		}
	case 327:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1802
		{
			yyVAL.selectExpr = &StarExpr{}
		}
	case 328:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1806
		{
			yyVAL.selectExpr = &AliasedExpr{Expr: yyDollar[1].expr, As: yyDollar[2].colIdent}
		}
	case 329:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1810
		{
			yyVAL.selectExpr = &StarExpr{TableName: TableName{Name: yyDollar[1].tableIdent}}
		}
	case 330:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:1814
		{
			yyVAL.selectExpr = &StarExpr{TableName: TableName{Qualifier: yyDollar[1].tableIdent, Name: yyDollar[3].tableIdent}}
		}
	case 331:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1819
		{
			yyVAL.colIdent = ColIdent{}
		}
	case 332:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1823
		{
			yyVAL.colIdent = yyDollar[1].colIdent
		}
	case 333:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1827
		{
			yyVAL.colIdent = yyDollar[2].colIdent
		}
	case 334:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1833
		{
			yyVAL.colIdent = NewColIdentWithQuotes(string(yyDollar[1].bytes), '\'')
		}
	case 335:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1837
		{
			yyVAL.colIdent = NewColIdentWithQuotes(string(yyDollar[1].bytes), '"')
		}
	case 336:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1841
		{
			yyVAL.colIdent = NewColIdentWithQuotes(string(yyDollar[1].bytes), '`')
		}
	case 339:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1853
		{
			yyVAL.tableExprs = TableExprs{&AliasedTableExpr{Expr: TableName{Name: NewTableIdent("dual")}}}
		}
	case 340:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1857
		{
			yyVAL.tableExprs = yyDollar[2].tableExprs
		}
	case 341:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1863
		{
			yyVAL.tableExprs = TableExprs{yyDollar[1].tableExpr}
		}
	case 342:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1867
		{
			yyVAL.tableExprs = append(yyVAL.tableExprs, yyDollar[3].tableExpr)
		}
	case 345:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1877
		{
			yyVAL.tableExpr = yyDollar[1].aliasedTableName
		}
	case 346:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1881
		{
			yyVAL.tableExpr = &AliasedTableExpr{Expr: yyDollar[1].subquery, As: yyDollar[3].tableIdent}
		}
	case 347:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1885
		{
			yyVAL.tableExpr = &ParenTableExpr{Exprs: yyDollar[2].tableExprs}
		}
	case 348:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1891
		{
			yyVAL.aliasedTableName = &AliasedTableExpr{Expr: yyDollar[1].tableName, As: yyDollar[2].tableIdent, Hints: yyDollar[3].indexHints}
		}
	case 349:
		yyDollar = yyS[yypt-7 : yypt+1]
//line sql.y:1895
		{
			yyVAL.aliasedTableName = &AliasedTableExpr{Expr: yyDollar[1].tableName, Partitions: yyDollar[4].partitions, As: yyDollar[6].tableIdent, Hints: yyDollar[7].indexHints}
		}
	case 350:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1901
		{
			yyVAL.columns = Columns{yyDollar[1].colIdent}
		}
	case 351:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1905
		{
			yyVAL.columns = append(yyVAL.columns, yyDollar[3].colIdent)
		}
	case 352:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1911
		{
			yyVAL.partitions = Partitions{yyDollar[1].colIdent}
		}
	case 353:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1915
		{
			yyVAL.partitions = append(yyVAL.partitions, yyDollar[3].colIdent)
		}
	case 354:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:1928
		{
			yyVAL.tableExpr = &JoinTableExpr{LeftExpr: yyDollar[1].tableExpr, Join: yyDollar[2].str, RightExpr: yyDollar[3].tableExpr, Condition: yyDollar[4].joinCondition}
		}
	case 355:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:1932
		{
			yyVAL.tableExpr = &JoinTableExpr{LeftExpr: yyDollar[1].tableExpr, Join: yyDollar[2].str, RightExpr: yyDollar[3].tableExpr, Condition: yyDollar[4].joinCondition}
		}
	case 356:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:1936
		{
			yyVAL.tableExpr = &JoinTableExpr{LeftExpr: yyDollar[1].tableExpr, Join: yyDollar[2].str, RightExpr: yyDollar[3].tableExpr, Condition: yyDollar[4].joinCondition}
		}
	case 357:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1940
		{
			yyVAL.tableExpr = &JoinTableExpr{LeftExpr: yyDollar[1].tableExpr, Join: yyDollar[2].str, RightExpr: yyDollar[3].tableExpr}
		}
	case 358:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1946
		{
			yyVAL.joinCondition = JoinCondition{On: yyDollar[2].expr}
		}
	case 359:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:1948
		{
			yyVAL.joinCondition = JoinCondition{Using: yyDollar[3].columns}
		}
	case 360:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1952
		{
			yyVAL.joinCondition = JoinCondition{}
		}
	case 361:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1954
		{
			yyVAL.joinCondition = yyDollar[1].joinCondition
		}
	case 362:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1958
		{
			yyVAL.joinCondition = JoinCondition{}
		}
	case 363:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1960
		{
			yyVAL.joinCondition = JoinCondition{On: yyDollar[2].expr}
		}
	case 364:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1963
		{
			yyVAL.empty = struct{}{}
		}
	case 365:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1965
		{
			yyVAL.empty = struct{}{}
		}
	case 366:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1968
		{
			yyVAL.tableIdent = NewTableIdent("")
		}
	case 367:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1972
		{
			yyVAL.tableIdent = yyDollar[1].tableIdent
		}
	case 368:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1976
		{
			yyVAL.tableIdent = yyDollar[2].tableIdent
		}
	case 370:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1986
		{
			yyVAL.str = JoinStr
		}
	case 371:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1990
		{
			yyVAL.str = JoinStr
		}
	case 372:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1994
		{
			yyVAL.str = JoinStr
		}
	case 373:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2000
		{
			yyVAL.str = StraightJoinStr
		}
	case 374:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2006
		{
			yyVAL.str = LeftJoinStr
		}
	case 375:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2010
		{
			yyVAL.str = LeftJoinStr
		}
	case 376:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2014
		{
			yyVAL.str = RightJoinStr
		}
	case 377:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2018
		{
			yyVAL.str = RightJoinStr
		}
	case 378:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2024
		{
			yyVAL.str = NaturalJoinStr
		}
	case 379:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2028
		{
			if yyDollar[2].str == LeftJoinStr {
				yyVAL.str = NaturalLeftJoinStr
			} else {
				yyVAL.str = NaturalRightJoinStr
			}
		}
	case 380:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2038
		{
			yyVAL.tableName = yyDollar[2].tableName
		}
	case 381:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2042
		{
			yyVAL.tableName = yyDollar[1].tableName
		}
	case 382:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2048
		{
			yyVAL.tableName = TableName{Name: yyDollar[1].tableIdent}
		}
	case 383:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2052
		{
			yyVAL.tableName = TableName{Qualifier: yyDollar[1].tableIdent, Name: yyDollar[3].tableIdent}
		}
	case 384:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:2057
		{
			yyVAL.indexHints = nil
		}
	case 385:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:2061
		{
			yyVAL.indexHints = &IndexHints{Type: UseStr, Indexes: yyDollar[4].columns}
		}
	case 386:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:2065
		{
			yyVAL.indexHints = &IndexHints{Type: IgnoreStr, Indexes: yyDollar[4].columns}
		}
	case 387:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:2069
		{
			yyVAL.indexHints = &IndexHints{Type: ForceStr, Indexes: yyDollar[4].columns}
		}
	case 388:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:2074
		{
			yyVAL.expr = nil
		}
	case 389:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2078
		{
			yyVAL.expr = yyDollar[2].expr
		}
	case 390:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2084
		{
			yyVAL.expr = yyDollar[1].expr
		}
	case 391:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2088
		{
			yyVAL.expr = &AndExpr{Left: yyDollar[1].expr, Right: yyDollar[3].expr}
		}
	case 392:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2092
		{
			yyVAL.expr = &OrExpr{Left: yyDollar[1].expr, Right: yyDollar[3].expr}
		}
	case 393:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2096
		{
			yyVAL.expr = &NotExpr{Expr: yyDollar[2].expr}
		}
	case 394:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2100
		{
			yyVAL.expr = &IsExpr{Operator: yyDollar[3].str, Expr: yyDollar[1].expr}
		}
	case 395:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2104
		{
			yyVAL.expr = yyDollar[1].expr
		}
	case 396:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2108
		{
			yyVAL.expr = &Default{ColName: yyDollar[2].str}
		}
	case 397:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:2114
		{
			yyVAL.str = ""
		}
	case 398:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2118
		{
			yyVAL.str = string(yyDollar[2].bytes)
		}
	case 399:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2124
		{
			yyVAL.boolVal = BoolVal(true)
		}
	case 400:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2128
		{
			yyVAL.boolVal = BoolVal(false)
		}
	case 401:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2134
		{
			yyVAL.expr = &ComparisonExpr{Left: yyDollar[1].expr, Operator: yyDollar[2].str, Right: yyDollar[3].expr}
		}
	case 402:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2138
		{
			yyVAL.expr = &ComparisonExpr{Left: yyDollar[1].expr, Operator: InStr, Right: yyDollar[3].colTuple}
		}
	case 403:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:2142
		{
			yyVAL.expr = &ComparisonExpr{Left: yyDollar[1].expr, Operator: NotInStr, Right: yyDollar[4].colTuple}
		}
	case 404:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:2146
		{
			yyVAL.expr = &ComparisonExpr{Left: yyDollar[1].expr, Operator: LikeStr, Right: yyDollar[3].expr, Escape: yyDollar[4].expr}
		}
	case 405:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:2150
		{
			yyVAL.expr = &ComparisonExpr{Left: yyDollar[1].expr, Operator: NotLikeStr, Right: yyDollar[4].expr, Escape: yyDollar[5].expr}
		}
	case 406:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2154
		{
			yyVAL.expr = &ComparisonExpr{Left: yyDollar[1].expr, Operator: RegexpStr, Right: yyDollar[3].expr}
		}
	case 407:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:2158
		{
			yyVAL.expr = &ComparisonExpr{Left: yyDollar[1].expr, Operator: NotRegexpStr, Right: yyDollar[4].expr}
		}
	case 408:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:2162
		{
			yyVAL.expr = &RangeCond{Left: yyDollar[1].expr, Operator: BetweenStr, From: yyDollar[3].expr, To: yyDollar[5].expr}
		}
	case 409:
		yyDollar = yyS[yypt-6 : yypt+1]
//line sql.y:2166
		{
			yyVAL.expr = &RangeCond{Left: yyDollar[1].expr, Operator: NotBetweenStr, From: yyDollar[4].expr, To: yyDollar[6].expr}
		}
	case 410:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2170
		{
			yyVAL.expr = &ExistsExpr{Subquery: yyDollar[2].subquery}
		}
	case 411:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2176
		{
			yyVAL.str = IsNullStr
		}
	case 412:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2180
		{
			yyVAL.str = IsNotNullStr
		}
	case 413:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2184
		{
			yyVAL.str = IsTrueStr
		}
	case 414:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2188
		{
			yyVAL.str = IsNotTrueStr
		}
	case 415:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2192
		{
			yyVAL.str = IsFalseStr
		}
	case 416:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2196
		{
			yyVAL.str = IsNotFalseStr
		}
	case 417:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2202
		{
			yyVAL.str = EqualStr
		}
	case 418:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2206
		{
			yyVAL.str = LessThanStr
		}
	case 419:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2210
		{
			yyVAL.str = GreaterThanStr
		}
	case 420:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2214
		{
			yyVAL.str = LessEqualStr
		}
	case 421:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2218
		{
			yyVAL.str = GreaterEqualStr
		}
	case 422:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2222
		{
			yyVAL.str = NotEqualStr
		}
	case 423:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2226
		{
			yyVAL.str = NullSafeEqualStr
		}
	case 424:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:2231
		{
			yyVAL.expr = nil
		}
	case 425:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2235
		{
			yyVAL.expr = yyDollar[2].expr
		}
	case 426:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2241
		{
			yyVAL.colTuple = yyDollar[1].valTuple
		}
	case 427:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2245
		{
			yyVAL.colTuple = yyDollar[1].subquery
		}
	case 428:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2249
		{
			yyVAL.colTuple = ListArg(yyDollar[1].bytes)
		}
	case 429:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2255
		{
			yyVAL.subquery = &Subquery{yyDollar[2].selStmt}
		}
	case 430:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2261
		{
			yyVAL.exprs = Exprs{yyDollar[1].expr}
		}
	case 431:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2265
		{
			yyVAL.exprs = append(yyDollar[1].exprs, yyDollar[3].expr)
		}
	case 432:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2272
		{
			yyVAL.expr = yyDollar[1].colName
		}
	case 433:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2276
		{
			yyVAL.expr = yyDollar[1].expr
		}
	case 434:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2280
		{
			yyVAL.expr = yyDollar[1].boolVal
		}
	case 435:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2284
		{
			yyVAL.expr = yyDollar[1].expr
		}
	case 436:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2288
		{
			yyVAL.expr = yyDollar[1].subquery
		}
	case 437:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2292
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: BitAndStr, Right: yyDollar[3].expr}
		}
	case 438:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2296
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: BitOrStr, Right: yyDollar[3].expr}
		}
	case 439:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2300
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: BitXorStr, Right: yyDollar[3].expr}
		}
	case 440:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2304
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: PlusStr, Right: yyDollar[3].expr}
		}
	case 441:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2308
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: MinusStr, Right: yyDollar[3].expr}
		}
	case 442:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2312
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: MultStr, Right: yyDollar[3].expr}
		}
	case 443:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2316
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: DivStr, Right: yyDollar[3].expr}
		}
	case 444:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2320
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: IntDivStr, Right: yyDollar[3].expr}
		}
	case 445:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2324
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: ModStr, Right: yyDollar[3].expr}
		}
	case 446:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2328
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: ModStr, Right: yyDollar[3].expr}
		}
	case 447:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2332
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: ShiftLeftStr, Right: yyDollar[3].expr}
		}
	case 448:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2336
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: ShiftRightStr, Right: yyDollar[3].expr}
		}
	case 449:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2340
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].colName, Operator: JSONExtractOp, Right: yyDollar[3].expr}
		}
	case 450:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2344
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].colName, Operator: JSONUnquoteExtractOp, Right: yyDollar[3].expr}
		}
	case 451:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2348
		{
			yyVAL.expr = &CollateExpr{Expr: yyDollar[1].expr, Charset: yyDollar[3].str}
		}
	case 452:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2352
		{
			yyVAL.expr = &UnaryExpr{Operator: BinaryStr, Expr: yyDollar[2].expr}
		}
	case 453:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2356
		{
			yyVAL.expr = &UnaryExpr{Operator: UBinaryStr, Expr: yyDollar[2].expr}
		}
	case 454:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2360
		{
			if num, ok := yyDollar[2].expr.(*SQLVal); ok && num.Type == IntVal {
				yyVAL.expr = num
			} else {
				yyVAL.expr = &UnaryExpr{Operator: UPlusStr, Expr: yyDollar[2].expr}
			}
		}
	case 455:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2368
		{
			if num, ok := yyDollar[2].expr.(*SQLVal); ok && num.Type == IntVal {
				// Handle double negative
				if num.Val[0] == '-' {
					num.Val = num.Val[1:]
					yyVAL.expr = num
				} else {
					yyVAL.expr = NewIntVal(append([]byte("-"), num.Val...))
				}
			} else {
				yyVAL.expr = &UnaryExpr{Operator: UMinusStr, Expr: yyDollar[2].expr}
			}
		}
	case 456:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2382
		{
			yyVAL.expr = &UnaryExpr{Operator: TildaStr, Expr: yyDollar[2].expr}
		}
	case 457:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2386
		{
			yyVAL.expr = &UnaryExpr{Operator: BangStr, Expr: yyDollar[2].expr}
		}
	case 458:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2390
		{
			yyVAL.expr = yyDollar[1].intervalExpr
		}
	case 459:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2394
		{
			yyVAL.expr = yyDollar[1].intervalExpr
		}
	case 464:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2404
		{
			if yylex.(*Tokenizer).IsMySQL() {
				yylex.Error("MySQL don't support PostgreSQL syntax of interval expression")
				return 1
			}
			// Postgresql type of interval where interval value is string with values+units
			yyVAL.intervalExpr = &IntervalExpr{Expr: NewStrVal(yyDollar[2].bytes)}
		}
	case 465:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2415
		{
			if yylex.(*Tokenizer).IsPostgreSQL() {
				yylex.Error("PostgreSQL don't support Mysql syntax of interval expression")
				return 1
			}
			// This rule prevents the usage of INTERVAL
			// as a function. If support is needed for that,
			// we'll need to revisit this. The solution
			// will be non-trivial because of grammar conflicts.
			yyVAL.intervalExpr = &IntervalExpr{Expr: yyDollar[2].expr, Unit: string(yyDollar[3].bytes)}
		}
	case 466:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:2433
		{
			yyVAL.expr = &FuncExpr{Name: yyDollar[1].colIdent, Exprs: yyDollar[3].selectExprs}
		}
	case 467:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:2437
		{
			yyVAL.expr = &FuncExpr{Name: yyDollar[1].colIdent, Distinct: true, Exprs: yyDollar[4].selectExprs}
		}
	case 468:
		yyDollar = yyS[yypt-6 : yypt+1]
//line sql.y:2441
		{
			yyVAL.expr = &FuncExpr{Qualifier: yyDollar[1].tableIdent, Name: yyDollar[3].colIdent, Exprs: yyDollar[5].selectExprs}
		}
	case 469:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:2451
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("left"), Exprs: yyDollar[3].selectExprs}
		}
	case 470:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:2455
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("right"), Exprs: yyDollar[3].selectExprs}
		}
	case 471:
		yyDollar = yyS[yypt-6 : yypt+1]
//line sql.y:2459
		{
			yyVAL.expr = &ConvertExpr{Expr: yyDollar[3].expr, Type: yyDollar[5].convertType}
		}
	case 472:
		yyDollar = yyS[yypt-6 : yypt+1]
//line sql.y:2463
		{
			yyVAL.expr = &ConvertExpr{Expr: yyDollar[3].expr, Type: yyDollar[5].convertType}
		}
	case 473:
		yyDollar = yyS[yypt-6 : yypt+1]
//line sql.y:2467
		{
			yyVAL.expr = &ConvertUsingExpr{Expr: yyDollar[3].expr, Type: yyDollar[5].str}
		}
	case 474:
		yyDollar = yyS[yypt-6 : yypt+1]
//line sql.y:2471
		{
			yyVAL.expr = &SubstrExpr{Name: yyDollar[3].colName, From: yyDollar[5].expr, To: nil}
		}
	case 475:
		yyDollar = yyS[yypt-8 : yypt+1]
//line sql.y:2475
		{
			yyVAL.expr = &SubstrExpr{Name: yyDollar[3].colName, From: yyDollar[5].expr, To: yyDollar[7].expr}
		}
	case 476:
		yyDollar = yyS[yypt-8 : yypt+1]
//line sql.y:2479
		{
			yyVAL.expr = &SubstrExpr{Name: yyDollar[3].colName, From: yyDollar[5].expr, To: yyDollar[7].expr}
		}
	case 477:
		yyDollar = yyS[yypt-6 : yypt+1]
//line sql.y:2483
		{
			yyVAL.expr = &SubstrExpr{Name: yyDollar[3].colName, From: yyDollar[5].expr, To: nil}
		}
	case 478:
		yyDollar = yyS[yypt-8 : yypt+1]
//line sql.y:2487
		{
			yyVAL.expr = &SubstrExpr{Name: yyDollar[3].colName, From: yyDollar[5].expr, To: yyDollar[7].expr}
		}
	case 479:
		yyDollar = yyS[yypt-8 : yypt+1]
//line sql.y:2491
		{
			yyVAL.expr = &SubstrExpr{Name: yyDollar[3].colName, From: yyDollar[5].expr, To: yyDollar[7].expr}
		}
	case 480:
		yyDollar = yyS[yypt-9 : yypt+1]
//line sql.y:2495
		{
			yyVAL.expr = &MatchExpr{Columns: yyDollar[3].selectExprs, Expr: yyDollar[7].expr, Option: yyDollar[8].str}
		}
	case 481:
		yyDollar = yyS[yypt-7 : yypt+1]
//line sql.y:2499
		{
			yyVAL.expr = &GroupConcatExpr{Distinct: yyDollar[3].str, Exprs: yyDollar[4].selectExprs, OrderBy: yyDollar[5].orderBy, Separator: yyDollar[6].str}
		}
	case 482:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:2503
		{
			yyVAL.expr = &CaseExpr{Expr: yyDollar[2].expr, Whens: yyDollar[3].whens, Else: yyDollar[4].expr}
		}
	case 483:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:2507
		{
			yyVAL.expr = &ValuesFuncExpr{Name: yyDollar[3].colName}
		}
	case 484:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2519
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("current_timestamp")}
		}
	case 485:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2523
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("utc_timestamp")}
		}
	case 486:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2527
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("utc_time")}
		}
	case 487:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2531
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("utc_date")}
		}
	case 488:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2536
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("localtime")}
		}
	case 489:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2541
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("localtimestamp")}
		}
	case 490:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2546
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("current_date")}
		}
	case 491:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2551
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("current_time")}
		}
	case 494:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:2565
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("if"), Exprs: yyDollar[3].selectExprs}
		}
	case 495:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:2569
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("database"), Exprs: yyDollar[3].selectExprs}
		}
	case 496:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:2573
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("mod"), Exprs: yyDollar[3].selectExprs}
		}
	case 497:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:2577
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("replace"), Exprs: yyDollar[3].selectExprs}
		}
	case 498:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:2583
		{
			yyVAL.str = ""
		}
	case 499:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2587
		{
			yyVAL.str = BooleanModeStr
		}
	case 500:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:2591
		{
			yyVAL.str = NaturalLanguageModeStr
		}
	case 501:
		yyDollar = yyS[yypt-7 : yypt+1]
//line sql.y:2595
		{
			yyVAL.str = NaturalLanguageModeWithQueryExpansionStr
		}
	case 502:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2599
		{
			yyVAL.str = QueryExpansionStr
		}
	case 503:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2605
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 504:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2609
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 505:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2615
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal}
		}
	case 506:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2619
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal, Charset: yyDollar[3].str, Operator: CharacterSetStr}
		}
	case 507:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2623
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal, Charset: string(yyDollar[3].bytes)}
		}
	case 508:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2627
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
		}
	case 509:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2631
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal}
		}
	case 510:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2635
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
			yyVAL.convertType.Length = yyDollar[2].LengthScaleOption.Length
			yyVAL.convertType.Scale = yyDollar[2].LengthScaleOption.Scale
		}
	case 511:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2641
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
		}
	case 512:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2645
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal}
		}
	case 513:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2649
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
		}
	case 514:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2653
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
		}
	case 515:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2657
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal}
		}
	case 516:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2661
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
		}
	case 517:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2665
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
		}
	case 518:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:2669
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
		}
	case 519:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:2674
		{
			yyVAL.expr = nil
		}
	case 520:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2678
		{
			yyVAL.expr = yyDollar[1].expr
		}
	case 521:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:2683
		{
			yyVAL.str = string("")
		}
	case 522:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2687
		{
			yyVAL.str = " separator '" + string(yyDollar[2].bytes) + "'"
		}
	case 523:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2693
		{
			yyVAL.whens = []*When{yyDollar[1].when}
		}
	case 524:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2697
		{
			yyVAL.whens = append(yyDollar[1].whens, yyDollar[2].when)
		}
	case 525:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:2703
		{
			yyVAL.when = &When{Cond: yyDollar[2].expr, Val: yyDollar[4].expr}
		}
	case 526:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:2708
		{
			yyVAL.expr = nil
		}
	case 527:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2712
		{
			yyVAL.expr = yyDollar[2].expr
		}
	case 528:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2718
		{
			yyVAL.colName = &ColName{Name: yyDollar[1].colIdent}
		}
	case 529:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2722
		{
			yyVAL.colName = &ColName{Qualifier: TableName{Name: yyDollar[1].tableIdent}, Name: yyDollar[3].colIdent}
		}
	case 530:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:2726
		{
			yyVAL.colName = &ColName{Qualifier: TableName{Qualifier: yyDollar[1].tableIdent, Name: yyDollar[3].tableIdent}, Name: yyDollar[5].colIdent}
		}
	case 531:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2732
		{
			yyVAL.expr = NewStrVal(yyDollar[1].bytes)
		}
	case 532:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2736
		{
			val, err := NewMySQLDoubleQuotedStrVal(yyDollar[1].bytes)
			if err != nil {
				yylex.Error("dialect don't allow to use double quotes for string literals. " + err.Error())
				return 1
			}
			yyVAL.expr = val
		}
	case 533:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2745
		{
			yyVAL.expr = NewHexVal(yyDollar[1].bytes)
		}
	case 534:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2749
		{
			yyVAL.expr = NewBitVal(yyDollar[1].bytes)
		}
	case 535:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2753
		{
			yyVAL.expr = NewIntVal(yyDollar[1].bytes)
		}
	case 536:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2757
		{
			yyVAL.expr = NewFloatVal(yyDollar[1].bytes)
		}
	case 537:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2761
		{
			yyVAL.expr = NewHexNum(yyDollar[1].bytes)
		}
	case 538:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2765
		{
			yyVAL.expr = NewValArg(yyDollar[1].bytes)
		}
	case 539:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2769
		{
			yyVAL.expr = &NullVal{}
		}
	case 540:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2773
		{
			yyVAL.expr = NewPgEscapeString(yyDollar[1].bytes)
		}
	case 541:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2777
		{
			result, err := NewDollarExpr(string(yyDollar[1].bytes))
			if err != nil {
				yylex.Error("syntax error")
				return 1
			}
			yyVAL.expr = result
		}
	case 542:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2786
		{
			yyVAL.expr = NewCastVal(yyDollar[1].expr, yyDollar[2].bytes)
		}
	case 543:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2790
		{
			yyVAL.expr = &Default{}
		}
	case 544:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2796
		{
			yyVAL.bytes = yyDollar[1].bytes
		}
	case 545:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2801
		{
			yyVAL.bytes = append(yyDollar[1].bytes, yyDollar[2].bytes...)
		}
	case 546:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2809
		{
			// TODO(sougou): Deprecate this construct.
			if yyDollar[1].colIdent.Lowered() != "value" {
				yylex.Error("expecting value after next")
				return 1
			}
			yyVAL.expr = NewIntVal([]byte("1"))
		}
	case 547:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2818
		{
			yyVAL.expr = NewIntVal(yyDollar[1].bytes)
		}
	case 548:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2822
		{
			yyVAL.expr = NewValArg(yyDollar[1].bytes)
		}
	case 549:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:2827
		{
			yyVAL.exprs = nil
		}
	case 550:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2831
		{
			yyVAL.exprs = yyDollar[3].exprs
		}
	case 551:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:2836
		{
			yyVAL.expr = nil
		}
	case 552:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2840
		{
			yyVAL.expr = yyDollar[2].expr
		}
	case 553:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:2845
		{
			yyVAL.orderBy = nil
		}
	case 554:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2849
		{
			yyVAL.orderBy = yyDollar[3].orderBy
		}
	case 555:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2855
		{
			yyVAL.orderBy = OrderBy{yyDollar[1].order}
		}
	case 556:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2859
		{
			yyVAL.orderBy = append(yyDollar[1].orderBy, yyDollar[3].order)
		}
	case 557:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2865
		{
			yyVAL.order = &Order{Expr: yyDollar[1].expr, Direction: yyDollar[2].str}
		}
	case 558:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:2870
		{
			yyVAL.str = AscScr
		}
	case 559:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2874
		{
			yyVAL.str = AscScr
		}
	case 560:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2878
		{
			yyVAL.str = DescScr
		}
	case 561:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:2883
		{
			yyVAL.limit = nil
		}
	case 562:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2887
		{
			yyVAL.limit = &Limit{Rowcount: yyDollar[2].expr}
		}
	case 563:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:2891
		{
			yyVAL.limit = &Limit{Offset: yyDollar[2].expr, Rowcount: yyDollar[4].expr}
		}
	case 564:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:2895
		{
			yyVAL.limit = &Limit{Offset: yyDollar[4].expr, Rowcount: yyDollar[2].expr}
		}
	case 565:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:2900
		{
			yyVAL.str = ""
		}
	case 566:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2904
		{
			yyVAL.str = ForUpdateStr
		}
	case 567:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:2908
		{
			yyVAL.str = ShareModeStr
		}
	case 568:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2921
		{
			yyVAL.ins = &Insert{Rows: yyDollar[2].values}
		}
	case 569:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2925
		{
			yyVAL.ins = &Insert{Rows: yyDollar[1].selStmt}
		}
	case 570:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2929
		{
			// Drop the redundant parenthesis.
			yyVAL.ins = &Insert{Rows: yyDollar[2].selStmt}
		}
	case 571:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:2934
		{
			yyVAL.ins = &Insert{Columns: yyDollar[2].columns, Rows: yyDollar[5].values}
		}
	case 572:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:2938
		{
			yyVAL.ins = &Insert{Columns: yyDollar[2].columns, Rows: yyDollar[4].selStmt}
		}
	case 573:
		yyDollar = yyS[yypt-6 : yypt+1]
//line sql.y:2942
		{
			// Drop the redundant parenthesis.
			yyVAL.ins = &Insert{Columns: yyDollar[2].columns, Rows: yyDollar[5].selStmt}
		}
	case 574:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2949
		{
			yyVAL.columns = Columns{yyDollar[1].colIdent}
		}
	case 575:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2953
		{
			yyVAL.columns = Columns{yyDollar[3].colIdent}
		}
	case 576:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2957
		{
			yyVAL.columns = append(yyVAL.columns, yyDollar[3].colIdent)
		}
	case 577:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:2961
		{
			yyVAL.columns = append(yyVAL.columns, yyDollar[5].colIdent)
		}
	case 578:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:2966
		{
			yyVAL.updateExprs = nil
		}
	case 579:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:2970
		{
			yyVAL.updateExprs = yyDollar[5].updateExprs
		}
	case 580:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2976
		{
			yyVAL.values = Values{yyDollar[1].valTuple}
		}
	case 581:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2980
		{
			yyVAL.values = append(yyDollar[1].values, yyDollar[3].valTuple)
		}
	case 582:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2986
		{
			yyVAL.valTuple = yyDollar[1].valTuple
		}
	case 583:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2990
		{
			yyVAL.valTuple = ValTuple{}
		}
	case 584:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2996
		{
			yyVAL.valTuple = ValTuple(yyDollar[2].exprs)
		}
	case 585:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3002
		{
			if len(yyDollar[1].valTuple) == 1 {
				yyVAL.expr = &ParenExpr{yyDollar[1].valTuple[0]}
			} else {
				yyVAL.expr = yyDollar[1].valTuple
			}
		}
	case 586:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:3011
		{
			yyVAL.returning = nil
		}
	case 587:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:3016
		{
			yyVAL.returning = Returning{&StarExpr{}}
		}
	case 588:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:3021
		{
			yyVAL.returning = Returning(yyDollar[2].exprs)
		}
	case 589:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3028
		{
			yyVAL.updateExprs = UpdateExprs{yyDollar[1].updateExpr}
		}
	case 590:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:3032
		{
			yyVAL.updateExprs = append(yyDollar[1].updateExprs, yyDollar[3].updateExpr)
		}
	case 591:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:3038
		{
			yyVAL.updateExpr = &UpdateExpr{Name: yyDollar[1].colName, Expr: yyDollar[3].expr}
		}
	case 592:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3044
		{
			yyVAL.setExprs = SetExprs{yyDollar[1].setExpr}
		}
	case 593:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:3048
		{
			yyVAL.setExprs = append(yyDollar[1].setExprs, yyDollar[3].setExpr)
		}
	case 594:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:3054
		{
			yyVAL.setExprs = SetExprs{&SetExpr{Name: yyDollar[1].colIdent, Expr: yyDollar[3].expr}}
		}
	case 595:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:3058
		{
			yyVAL.setExprs = append(yyDollar[1].setExprs, &SetExpr{Name: yyDollar[1].setExprs[0].Name, Expr: yyDollar[3].expr})
		}
	case 596:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:3064
		{
			yyVAL.setExpr = &SetExpr{Name: yyDollar[1].colIdent, Expr: NewStrVal([]byte("on"))}
		}
	case 597:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:3068
		{
			yyVAL.setExpr = &SetExpr{Name: yyDollar[1].colIdent, Expr: yyDollar[3].expr}
		}
	case 598:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:3072
		{
			yyVAL.setExpr = &SetExpr{Name: NewColIdent(string(yyDollar[1].bytes)), Expr: yyDollar[2].expr}
		}
	case 600:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:3083
		{
			yyVAL.bytes = []byte("charset")
		}
	case 602:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3090
		{
			yyVAL.expr = NewStrVal([]byte(yyDollar[1].colIdent.String()))
		}
	case 603:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3094
		{
			yyVAL.expr = NewStrVal(yyDollar[1].bytes)
		}
	case 604:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3098
		{
			yyVAL.expr = &Default{}
		}
	case 607:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:3107
		{
			yyVAL.byt = 0
		}
	case 608:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:3109
		{
			yyVAL.byt = 1
		}
	case 609:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:3112
		{
			yyVAL.empty = struct{}{}
		}
	case 610:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:3114
		{
			yyVAL.empty = struct{}{}
		}
	case 611:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:3117
		{
			yyVAL.str = ""
		}
	case 612:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3119
		{
			yyVAL.str = IgnoreStr
		}
	case 613:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3123
		{
			yyVAL.empty = struct{}{}
		}
	case 614:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3125
		{
			yyVAL.empty = struct{}{}
		}
	case 615:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3127
		{
			yyVAL.empty = struct{}{}
		}
	case 616:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3129
		{
			yyVAL.empty = struct{}{}
		}
	case 617:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3131
		{
			yyVAL.empty = struct{}{}
		}
	case 618:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3133
		{
			yyVAL.empty = struct{}{}
		}
	case 619:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3135
		{
			yyVAL.empty = struct{}{}
		}
	case 620:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3137
		{
			yyVAL.empty = struct{}{}
		}
	case 621:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3139
		{
			yyVAL.empty = struct{}{}
		}
	case 622:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3141
		{
			yyVAL.empty = struct{}{}
		}
	case 623:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:3144
		{
			yyVAL.empty = struct{}{}
		}
	case 624:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3146
		{
			yyVAL.empty = struct{}{}
		}
	case 625:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3148
		{
			yyVAL.empty = struct{}{}
		}
	case 626:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3152
		{
			yyVAL.empty = struct{}{}
		}
	case 627:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3154
		{
			yyVAL.empty = struct{}{}
		}
	case 628:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:3157
		{
			yyVAL.empty = struct{}{}
		}
	case 629:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3159
		{
			yyVAL.empty = struct{}{}
		}
	case 630:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3161
		{
			yyVAL.empty = struct{}{}
		}
	case 631:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:3164
		{
			yyVAL.colIdent = ColIdent{}
		}
	case 632:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:3166
		{
			yyVAL.colIdent = yyDollar[2].colIdent
		}
	case 633:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3170
		{
			yyVAL.colIdent = NewColIdent(string(yyDollar[1].bytes))
		}
	case 634:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3174
		{
			yyVAL.colIdent = NewColIdent(string(yyDollar[1].bytes))
		}
	case 636:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3181
		{
			yyVAL.colIdent = NewColIdent(string(yyDollar[1].bytes))
		}
	case 637:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3187
		{
			if yylex.(*Tokenizer).IsMySQL() && !yylex.(*Tokenizer).dialect.(*mysql.MySQLDialect).IsModeANSIOn() {
				yylex.Error("MySQL dialect configured ANSI_mode=off and doesn't allow double quoted table identifiers")
				return 1
			}
			yyVAL.tableIdent = NewTableIdentWithQuotes(string(yyDollar[1].bytes), '"')
		}
	case 638:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3195
		{
			if yylex.(*Tokenizer).IsPostgreSQL() {
				yylex.Error("PostgreSQL dialect doesn't allow to use backtick quotes for table identifiers")
				return 1
			}
			yyVAL.tableIdent = NewTableIdentWithQuotes(string(yyDollar[1].bytes), '`')
		}
	case 639:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3203
		{
			yyVAL.tableIdent = NewTableIdentWithQuotes(string(yyDollar[1].bytes), '\'')
		}
	case 640:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3208
		{
			yyVAL.tableIdent = NewTableIdent(string(yyDollar[1].bytes))
		}
	case 641:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3212
		{
			yyVAL.tableIdent = NewTableIdent(string(yyDollar[1].bytes))
		}
	case 643:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3219
		{
			yyVAL.tableIdent = NewTableIdent(string(yyDollar[1].bytes))
		}
	case 857:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3464
		{
			if incNesting(yylex) {
				yylex.Error("max nesting level reached")
				return 1
			}
		}
	case 858:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3473
		{
			decNesting(yylex)
		}
	case 859:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:3478
		{
			forceEOF(yylex)
		}
	case 860:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:3483
		{
			forceEOF(yylex)
		}
	case 861:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3487
		{
			forceEOF(yylex)
		}
	case 862:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3491
		{
			forceEOF(yylex)
		}
	}
	goto yystack /* stack new state and value */
}
