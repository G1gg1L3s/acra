// Code generated by goyacc -o sql.go sql.y. DO NOT EDIT.

//line sql.y:18
package sqlparser

import __yyfmt__ "fmt"

//line sql.y:18

import "github.com/cossacklabs/acra/sqlparser/dialect/mysql"

func setParseTree(yylex interface{}, stmt Statement) {
	yylex.(*Tokenizer).ParseTree = stmt
}

func setAllowComments(yylex interface{}, allow bool) {
	yylex.(*Tokenizer).AllowComments = allow
}

func setDDL(yylex interface{}, ddl *DDL) {
	yylex.(*Tokenizer).partialDDL = ddl
}

func incNesting(yylex interface{}) bool {
	yylex.(*Tokenizer).nesting++
	if yylex.(*Tokenizer).nesting == 200 {
		return true
	}
	return false
}

func decNesting(yylex interface{}) {
	yylex.(*Tokenizer).nesting--
}

// forceEOF forces the lexer to end prematurely. Not all SQL statements
// are supported by the Parser, thus calling forceEOF will make the lexer
// return EOF early.
func forceEOF(yylex interface{}) {
	yylex.(*Tokenizer).ForceEOF = true
}

//line sql.y:55
type yySymType struct {
	yys                int
	empty              struct{}
	statement          Statement
	selStmt            SelectStatement
	ddl                *DDL
	ins                *Insert
	byt                byte
	bytes              []byte
	bytes2             [][]byte
	str                string
	strs               []string
	selectExprs        SelectExprs
	selectExpr         SelectExpr
	columns            Columns
	partitions         Partitions
	colName            *ColName
	tableExprs         TableExprs
	tableExpr          TableExpr
	joinCondition      JoinCondition
	tableName          TableName
	tableNames         TableNames
	indexHints         *IndexHints
	returning          Returning
	expr               Expr
	exprs              Exprs
	boolVal            BoolVal
	colTuple           ColTuple
	values             Values
	valTuple           ValTuple
	subquery           *Subquery
	whens              []*When
	when               *When
	orderBy            OrderBy
	order              *Order
	limit              *Limit
	updateExprs        UpdateExprs
	setExprs           SetExprs
	updateExpr         *UpdateExpr
	setExpr            *SetExpr
	colIdent           ColIdent
	tableIdent         TableIdent
	usingInExecuteList UsingInExecuteList
	convertType        *ConvertType
	aliasedTableName   *AliasedTableExpr
	TableSpec          *TableSpec
	columnType         ColumnType
	columnTypes        []ColumnType
	colKeyOpt          ColumnKeyOption
	optVal             *SQLVal
	LengthScaleOption  LengthScaleOption
	columnDefinition   *ColumnDefinition
	indexDefinition    *IndexDefinition
	indexInfo          *IndexInfo
	indexOption        *IndexOption
	indexOptions       []*IndexOption
	indexColumn        *IndexColumn
	indexColumns       []*IndexColumn
	partDefs           []*PartitionDefinition
	partDef            *PartitionDefinition
	partSpec           *PartitionSpec
	vindexParam        VindexParam
	vindexParams       []VindexParam
	showFilter         *ShowFilter
	preparedQuery      PreparedQuery
	intervalExpr       *IntervalExpr
}

const LEX_ERROR = 57346
const UNION = 57347
const SELECT = 57348
const STREAM = 57349
const INSERT = 57350
const UPDATE = 57351
const DELETE = 57352
const FROM = 57353
const WHERE = 57354
const GROUP = 57355
const HAVING = 57356
const ORDER = 57357
const BY = 57358
const LIMIT = 57359
const OFFSET = 57360
const FOR = 57361
const ALL = 57362
const DISTINCT = 57363
const AS = 57364
const EXISTS = 57365
const ASC = 57366
const DESC = 57367
const INTO = 57368
const DUPLICATE = 57369
const KEY = 57370
const DEFAULT = 57371
const SET = 57372
const LOCK = 57373
const KEYS = 57374
const VALUES = 57375
const LAST_INSERT_ID = 57376
const NEXT = 57377
const VALUE = 57378
const SHARE = 57379
const MODE = 57380
const SQL_NO_CACHE = 57381
const SQL_CACHE = 57382
const JOIN = 57383
const STRAIGHT_JOIN = 57384
const LEFT = 57385
const RIGHT = 57386
const INNER = 57387
const OUTER = 57388
const CROSS = 57389
const NATURAL = 57390
const USE = 57391
const FORCE = 57392
const ON = 57393
const USING = 57394
const INTERVAL = 57395
const ID = 57396
const PG_ESCAPE_STRING = 57397
const HEX = 57398
const SINGLE_QUOTE_STRING = 57399
const DOUBLE_QUOTE_STRING = 57400
const BACK_QUOTE_STRING = 57401
const INTEGRAL = 57402
const FLOAT = 57403
const HEXNUM = 57404
const VALUE_ARG = 57405
const COMMENT = 57406
const COMMENT_KEYWORD = 57407
const BIT_LITERAL = 57408
const DOLLAR_SIGN = 57409
const LIST_ARG = 57410
const NULL = 57411
const TRUE = 57412
const FALSE = 57413
const MICROSECOND = 57414
const SECOND = 57415
const MINUTE = 57416
const HOUR = 57417
const DAY = 57418
const WEEK = 57419
const MONTH = 57420
const QUARTER = 57421
const SECOND_MICROSECOND = 57422
const MINUTE_MICROSECOND = 57423
const MINUTE_SECOND = 57424
const HOUR_MICROSECOND = 57425
const HOUR_SECOND = 57426
const HOUR_MINUTE = 57427
const DAY_MICROSECOND = 57428
const DAY_SECOND = 57429
const DAY_MINUTE = 57430
const DAY_HOUR = 57431
const YEAR_MONTH = 57432
const YEAR = 57433
const OR = 57434
const AND = 57435
const NOT = 57436
const BETWEEN = 57437
const CASE = 57438
const WHEN = 57439
const THEN = 57440
const ELSE = 57441
const END = 57442
const LE = 57443
const GE = 57444
const NE = 57445
const NULL_SAFE_EQUAL = 57446
const IS = 57447
const LIKE = 57448
const REGEXP = 57449
const IN = 57450
const SHIFT_LEFT = 57451
const SHIFT_RIGHT = 57452
const DIV = 57453
const MOD = 57454
const UNARY = 57455
const COLLATE = 57456
const BINARY = 57457
const UNDERSCORE_BINARY = 57458
const JSON_EXTRACT_OP = 57459
const JSON_UNQUOTE_EXTRACT_OP = 57460
const CREATE = 57461
const ALTER = 57462
const DROP = 57463
const RENAME = 57464
const ANALYZE = 57465
const ADD = 57466
const SCHEMA = 57467
const TABLE = 57468
const INDEX = 57469
const VIEW = 57470
const TO = 57471
const IGNORE = 57472
const IF = 57473
const UNIQUE = 57474
const PRIMARY = 57475
const COLUMN = 57476
const CONSTRAINT = 57477
const SPATIAL = 57478
const FULLTEXT = 57479
const FOREIGN = 57480
const KEY_BLOCK_SIZE = 57481
const SHOW = 57482
const DESCRIBE = 57483
const EXPLAIN = 57484
const DATE = 57485
const ESCAPE = 57486
const REPAIR = 57487
const OPTIMIZE = 57488
const TRUNCATE = 57489
const MAXVALUE = 57490
const PARTITION = 57491
const REORGANIZE = 57492
const LESS = 57493
const THAN = 57494
const PROCEDURE = 57495
const TRIGGER = 57496
const VINDEX = 57497
const VINDEXES = 57498
const STATUS = 57499
const VARIABLES = 57500
const BEGIN = 57501
const START = 57502
const TRANSACTION = 57503
const COMMIT = 57504
const ROLLBACK = 57505
const DEALLOCATE = 57506
const PREPARE = 57507
const EXECUTE = 57508
const BIT = 57509
const TINYINT = 57510
const SMALLINT = 57511
const MEDIUMINT = 57512
const INT = 57513
const INTEGER = 57514
const BIGINT = 57515
const INTNUM = 57516
const REAL = 57517
const DOUBLE = 57518
const FLOAT_TYPE = 57519
const DECIMAL = 57520
const NUMERIC = 57521
const TIME = 57522
const TIMESTAMP = 57523
const DATETIME = 57524
const CHAR = 57525
const VARCHAR = 57526
const BOOL = 57527
const CHARACTER = 57528
const VARBINARY = 57529
const NCHAR = 57530
const TEXT = 57531
const TINYTEXT = 57532
const MEDIUMTEXT = 57533
const LONGTEXT = 57534
const BLOB = 57535
const TINYBLOB = 57536
const MEDIUMBLOB = 57537
const LONGBLOB = 57538
const JSON = 57539
const ENUM = 57540
const GEOMETRY = 57541
const POINT = 57542
const LINESTRING = 57543
const POLYGON = 57544
const GEOMETRYCOLLECTION = 57545
const MULTIPOINT = 57546
const MULTILINESTRING = 57547
const MULTIPOLYGON = 57548
const NULLX = 57549
const AUTO_INCREMENT = 57550
const APPROXNUM = 57551
const SIGNED = 57552
const UNSIGNED = 57553
const ZEROFILL = 57554
const DATABASES = 57555
const TABLES = 57556
const VITESS_KEYSPACES = 57557
const VITESS_SHARDS = 57558
const VITESS_TABLETS = 57559
const VSCHEMA_TABLES = 57560
const EXTENDED = 57561
const FULL = 57562
const PROCESSLIST = 57563
const NAMES = 57564
const CHARSET = 57565
const GLOBAL = 57566
const SESSION = 57567
const LOCAL = 57568
const ISOLATION = 57569
const LEVEL = 57570
const READ = 57571
const WRITE = 57572
const ONLY = 57573
const REPEATABLE = 57574
const COMMITTED = 57575
const UNCOMMITTED = 57576
const SERIALIZABLE = 57577
const CURRENT_TIMESTAMP = 57578
const DATABASE = 57579
const CURRENT_DATE = 57580
const CURRENT_TIME = 57581
const LOCALTIME = 57582
const LOCALTIMESTAMP = 57583
const UTC_DATE = 57584
const UTC_TIME = 57585
const UTC_TIMESTAMP = 57586
const REPLACE = 57587
const CONVERT = 57588
const CAST = 57589
const SUBSTR = 57590
const SUBSTRING = 57591
const GROUP_CONCAT = 57592
const SEPARATOR = 57593
const MATCH = 57594
const AGAINST = 57595
const BOOLEAN = 57596
const LANGUAGE = 57597
const WITH = 57598
const QUERY = 57599
const EXPANSION = 57600
const UNUSED = 57601
const RETURNING = 57602

var yyToknames = [...]string{
	"$end",
	"error",
	"$unk",
	"LEX_ERROR",
	"UNION",
	"SELECT",
	"STREAM",
	"INSERT",
	"UPDATE",
	"DELETE",
	"FROM",
	"WHERE",
	"GROUP",
	"HAVING",
	"ORDER",
	"BY",
	"LIMIT",
	"OFFSET",
	"FOR",
	"ALL",
	"DISTINCT",
	"AS",
	"EXISTS",
	"ASC",
	"DESC",
	"INTO",
	"DUPLICATE",
	"KEY",
	"DEFAULT",
	"SET",
	"LOCK",
	"KEYS",
	"VALUES",
	"LAST_INSERT_ID",
	"NEXT",
	"VALUE",
	"SHARE",
	"MODE",
	"SQL_NO_CACHE",
	"SQL_CACHE",
	"JOIN",
	"STRAIGHT_JOIN",
	"LEFT",
	"RIGHT",
	"INNER",
	"OUTER",
	"CROSS",
	"NATURAL",
	"USE",
	"FORCE",
	"ON",
	"USING",
	"'('",
	"','",
	"')'",
	"INTERVAL",
	"ID",
	"PG_ESCAPE_STRING",
	"HEX",
	"SINGLE_QUOTE_STRING",
	"DOUBLE_QUOTE_STRING",
	"BACK_QUOTE_STRING",
	"INTEGRAL",
	"FLOAT",
	"HEXNUM",
	"VALUE_ARG",
	"COMMENT",
	"COMMENT_KEYWORD",
	"BIT_LITERAL",
	"DOLLAR_SIGN",
	"LIST_ARG",
	"NULL",
	"TRUE",
	"FALSE",
	"MICROSECOND",
	"SECOND",
	"MINUTE",
	"HOUR",
	"DAY",
	"WEEK",
	"MONTH",
	"QUARTER",
	"SECOND_MICROSECOND",
	"MINUTE_MICROSECOND",
	"MINUTE_SECOND",
	"HOUR_MICROSECOND",
	"HOUR_SECOND",
	"HOUR_MINUTE",
	"DAY_MICROSECOND",
	"DAY_SECOND",
	"DAY_MINUTE",
	"DAY_HOUR",
	"YEAR_MONTH",
	"YEAR",
	"OR",
	"AND",
	"NOT",
	"'!'",
	"BETWEEN",
	"CASE",
	"WHEN",
	"THEN",
	"ELSE",
	"END",
	"'='",
	"'<'",
	"'>'",
	"LE",
	"GE",
	"NE",
	"NULL_SAFE_EQUAL",
	"IS",
	"LIKE",
	"REGEXP",
	"IN",
	"'|'",
	"'&'",
	"SHIFT_LEFT",
	"SHIFT_RIGHT",
	"'+'",
	"'-'",
	"'*'",
	"'/'",
	"DIV",
	"'%'",
	"MOD",
	"'^'",
	"'~'",
	"UNARY",
	"COLLATE",
	"BINARY",
	"UNDERSCORE_BINARY",
	"'.'",
	"JSON_EXTRACT_OP",
	"JSON_UNQUOTE_EXTRACT_OP",
	"CREATE",
	"ALTER",
	"DROP",
	"RENAME",
	"ANALYZE",
	"ADD",
	"SCHEMA",
	"TABLE",
	"INDEX",
	"VIEW",
	"TO",
	"IGNORE",
	"IF",
	"UNIQUE",
	"PRIMARY",
	"COLUMN",
	"CONSTRAINT",
	"SPATIAL",
	"FULLTEXT",
	"FOREIGN",
	"KEY_BLOCK_SIZE",
	"SHOW",
	"DESCRIBE",
	"EXPLAIN",
	"DATE",
	"ESCAPE",
	"REPAIR",
	"OPTIMIZE",
	"TRUNCATE",
	"MAXVALUE",
	"PARTITION",
	"REORGANIZE",
	"LESS",
	"THAN",
	"PROCEDURE",
	"TRIGGER",
	"VINDEX",
	"VINDEXES",
	"STATUS",
	"VARIABLES",
	"BEGIN",
	"START",
	"TRANSACTION",
	"COMMIT",
	"ROLLBACK",
	"DEALLOCATE",
	"PREPARE",
	"EXECUTE",
	"BIT",
	"TINYINT",
	"SMALLINT",
	"MEDIUMINT",
	"INT",
	"INTEGER",
	"BIGINT",
	"INTNUM",
	"REAL",
	"DOUBLE",
	"FLOAT_TYPE",
	"DECIMAL",
	"NUMERIC",
	"TIME",
	"TIMESTAMP",
	"DATETIME",
	"CHAR",
	"VARCHAR",
	"BOOL",
	"CHARACTER",
	"VARBINARY",
	"NCHAR",
	"TEXT",
	"TINYTEXT",
	"MEDIUMTEXT",
	"LONGTEXT",
	"BLOB",
	"TINYBLOB",
	"MEDIUMBLOB",
	"LONGBLOB",
	"JSON",
	"ENUM",
	"GEOMETRY",
	"POINT",
	"LINESTRING",
	"POLYGON",
	"GEOMETRYCOLLECTION",
	"MULTIPOINT",
	"MULTILINESTRING",
	"MULTIPOLYGON",
	"NULLX",
	"AUTO_INCREMENT",
	"APPROXNUM",
	"SIGNED",
	"UNSIGNED",
	"ZEROFILL",
	"DATABASES",
	"TABLES",
	"VITESS_KEYSPACES",
	"VITESS_SHARDS",
	"VITESS_TABLETS",
	"VSCHEMA_TABLES",
	"EXTENDED",
	"FULL",
	"PROCESSLIST",
	"NAMES",
	"CHARSET",
	"GLOBAL",
	"SESSION",
	"LOCAL",
	"ISOLATION",
	"LEVEL",
	"READ",
	"WRITE",
	"ONLY",
	"REPEATABLE",
	"COMMITTED",
	"UNCOMMITTED",
	"SERIALIZABLE",
	"CURRENT_TIMESTAMP",
	"DATABASE",
	"CURRENT_DATE",
	"CURRENT_TIME",
	"LOCALTIME",
	"LOCALTIMESTAMP",
	"UTC_DATE",
	"UTC_TIME",
	"UTC_TIMESTAMP",
	"REPLACE",
	"CONVERT",
	"CAST",
	"SUBSTR",
	"SUBSTRING",
	"GROUP_CONCAT",
	"SEPARATOR",
	"MATCH",
	"AGAINST",
	"BOOLEAN",
	"LANGUAGE",
	"WITH",
	"QUERY",
	"EXPANSION",
	"UNUSED",
	"RETURNING",
	"';'",
}

var yyStatenames = [...]string{}

const yyEofCode = 1
const yyErrCode = 2
const yyInitialStackSize = 16

//line yacctab:1
var yyExca = [...]int{
	-1, 1,
	1, -1,
	-2, 0,
	-1, 3,
	5, 30,
	-2, 4,
	-1, 39,
	174, 279,
	175, 279,
	-2, 267,
	-1, 252,
	71, 541,
	97, 541,
	99, 541,
	105, 541,
	106, 541,
	107, 541,
	108, 541,
	109, 541,
	110, 541,
	111, 541,
	113, 541,
	114, 541,
	115, 541,
	116, 541,
	117, 541,
	118, 541,
	119, 541,
	120, 541,
	121, 541,
	122, 541,
	123, 541,
	124, 541,
	125, 541,
	126, 541,
	127, 541,
	130, 541,
	-2, 395,
	-1, 253,
	133, 635,
	-2, 530,
	-1, 254,
	133, 637,
	-2, 529,
	-1, 255,
	133, 638,
	-2, 631,
	-1, 256,
	133, 639,
	-2, 632,
	-1, 330,
	105, 790,
	-2, 63,
	-1, 331,
	105, 818,
	-2, 64,
	-1, 332,
	105, 778,
	-2, 65,
	-1, 336,
	105, 762,
	146, 762,
	-2, 597,
	-1, 338,
	105, 800,
	146, 800,
	-2, 599,
	-1, 561,
	71, 529,
	133, 637,
	-2, 462,
	-1, 612,
	52, 45,
	54, 45,
	-2, 47,
	-1, 766,
	133, 641,
	-2, 634,
	-1, 999,
	5, 31,
	-2, 427,
	-1, 1024,
	5, 30,
	-2, 567,
	-1, 1262,
	5, 31,
	-2, 568,
	-1, 1309,
	5, 30,
	-2, 570,
	-1, 1372,
	5, 31,
	-2, 571,
}

const yyPrivate = 57344

const yyLast = 11768

var yyAct = [...]int{
	288, 53, 1363, 938, 689, 1320, 852, 508, 258, 558,
	1194, 1164, 870, 557, 3, 1165, 1161, 1268, 607, 605,
	894, 287, 1089, 1028, 223, 918, 893, 890, 932, 59,
	853, 232, 724, 991, 24, 1044, 791, 637, 335, 1092,
	800, 1080, 1137, 622, 1033, 840, 492, 486, 904, 928,
	621, 256, 896, 768, 53, 328, 803, 594, 262, 432,
	498, 609, 237, 912, 314, 973, 848, 231, 319, 324,
	259, 224, 225, 226, 227, 506, 241, 322, 58, 1257,
	1392, 1382, 1390, 1370, 1388, 82, 574, 313, 315, 195,
	939, 1381, 195, 1156, 1369, 1254, 236, 238, 436, 54,
	29, 30, 1329, 195, 187, 183, 184, 185, 1053, 1188,
	1189, 1052, 885, 886, 1054, 623, 1187, 624, 884, 195,
	195, 82, 245, 719, 474, 195, 318, 82, 1345, 522,
	521, 531, 532, 524, 525, 526, 527, 528, 529, 530,
	523, 476, 1071, 533, 63, 911, 1280, 919, 729, 457,
	445, 631, 632, 633, 464, 631, 632, 633, 1201, 1202,
	1242, 721, 1240, 228, 1205, 620, 222, 1203, 722, 1295,
	1389, 802, 65, 66, 67, 68, 69, 471, 472, 469,
	470, 522, 521, 531, 532, 524, 525, 526, 527, 528,
	529, 530, 523, 1387, 849, 533, 1364, 1113, 850, 446,
	1327, 439, 1110, 463, 463, 463, 463, 181, 1112, 463,
	1049, 180, 688, 181, 906, 1321, 186, 463, 906, 697,
	871, 873, 625, 1043, 333, 906, 992, 1042, 955, 1041,
	482, 1323, 195, 434, 195, 459, 442, 461, 53, 198,
	195, 182, 954, 1065, 545, 546, 1350, 433, 1265, 1124,
	195, 495, 1007, 542, 82, 82, 82, 82, 544, 1138,
	82, 1209, 458, 460, 985, 494, 740, 513, 82, 452,
	959, 523, 891, 533, 533, 737, 556, 965, 505, 1355,
	195, 953, 1219, 1031, 1100, 1158, 1346, 626, 1140, 560,
	841, 563, 564, 565, 566, 567, 568, 569, 570, 82,
	573, 575, 575, 575, 575, 575, 575, 575, 575, 583,
	584, 585, 586, 1098, 1117, 919, 543, 1368, 872, 1322,
	606, 1328, 1326, 1142, 1111, 1146, 1109, 1141, 1139, 1148,
	905, 850, 1069, 1144, 905, 1210, 448, 449, 450, 903,
	901, 905, 1143, 902, 692, 908, 456, 484, 1204, 739,
	950, 947, 948, 55, 946, 1145, 1147, 526, 527, 528,
	529, 530, 523, 275, 195, 533, 503, 504, 503, 548,
	909, 195, 195, 195, 1003, 1004, 1002, 82, 318, 957,
	960, 966, 505, 496, 505, 738, 82, 629, 576, 577,
	578, 579, 580, 581, 582, 619, 799, 80, 775, 613,
	1099, 841, 1358, 1014, 438, 1104, 1101, 1094, 1095, 1102,
	1097, 1096, 773, 774, 772, 1116, 952, 504, 503, 982,
	983, 984, 1103, 504, 503, 500, 504, 503, 1106, 56,
	1160, 743, 744, 329, 505, 1374, 463, 1296, 951, 437,
	505, 1353, 1286, 505, 463, 1285, 1084, 771, 504, 503,
	758, 760, 761, 1083, 1072, 463, 463, 463, 463, 463,
	463, 463, 463, 179, 485, 505, 631, 632, 633, 1197,
	463, 463, 463, 463, 792, 759, 956, 631, 632, 633,
	333, 1056, 440, 441, 631, 632, 633, 82, 1196, 958,
	1066, 706, 941, 195, 195, 82, 794, 195, 703, 702,
	195, 693, 504, 503, 195, 691, 82, 82, 82, 82,
	82, 82, 82, 82, 731, 725, 725, 686, 704, 505,
	733, 82, 82, 82, 82, 454, 745, 447, 433, 195,
	312, 230, 1333, 730, 730, 195, 1378, 485, 769, 1332,
	596, 599, 600, 601, 597, 53, 598, 602, 1206, 82,
	1034, 1035, 766, 195, 1313, 1361, 877, 247, 615, 82,
	1029, 560, 1313, 485, 1313, 1314, 465, 465, 465, 465,
	1277, 1276, 465, 747, 807, 770, 833, 836, 805, 764,
	465, 26, 842, 762, 1183, 485, 793, 1264, 485, 1216,
	1215, 1030, 319, 319, 319, 319, 319, 1212, 1213, 854,
	1212, 1211, 997, 485, 1260, 1022, 1127, 606, 1023, 874,
	26, 512, 967, 485, 26, 319, 795, 798, 591, 485,
	807, 805, 485, 636, 635, 845, 1009, 1162, 56, 690,
	1029, 838, 591, 591, 878, 1218, 60, 1308, 1030, 590,
	195, 1214, 616, 195, 195, 195, 195, 195, 1006, 997,
	318, 318, 318, 318, 318, 195, 855, 56, 195, 858,
	867, 56, 195, 591, 1058, 318, 195, 195, 765, 1008,
	82, 882, 875, 318, 880, 997, 920, 921, 922, 876,
	1029, 856, 857, 617, 859, 615, 480, 82, 883, 329,
	997, 1005, 463, 969, 463, 618, 898, 481, 628, 741,
	238, 56, 463, 1290, 913, 933, 1177, 1061, 929, 914,
	915, 916, 917, 924, 934, 596, 599, 600, 601, 597,
	923, 598, 602, 1034, 1035, 925, 926, 927, 56, 71,
	936, 483, 930, 931, 1199, 829, 830, 1162, 1085, 1037,
	195, 837, 1100, 82, 700, 82, 550, 56, 477, 195,
	753, 864, 195, 82, 862, 844, 865, 846, 847, 863,
	866, 1040, 600, 601, 1039, 861, 986, 860, 242, 243,
	1386, 1098, 1380, 333, 1123, 283, 276, 796, 797, 766,
	278, 279, 280, 281, 970, 1385, 277, 284, 974, 282,
	895, 489, 493, 975, 769, 499, 1026, 980, 979, 465,
	487, 1076, 634, 455, 1068, 1360, 1359, 465, 514, 497,
	1306, 1062, 488, 1258, 1291, 943, 699, 499, 465, 465,
	465, 465, 465, 465, 465, 465, 987, 1121, 604, 239,
	240, 770, 978, 465, 465, 465, 465, 233, 1338, 234,
	977, 60, 1337, 746, 1293, 1030, 559, 501, 1347, 1025,
	1281, 1027, 736, 62, 727, 7, 572, 64, 1099, 728,
	6, 749, 1024, 1104, 1101, 1094, 1095, 1102, 1097, 1096,
	614, 512, 726, 5, 57, 1, 270, 465, 319, 269,
	1103, 808, 734, 1256, 547, 1013, 1093, 940, 1088, 949,
	1362, 1319, 1193, 900, 892, 765, 431, 1047, 70, 1354,
	1046, 899, 1048, 1038, 1325, 804, 806, 1279, 907, 1070,
	910, 1198, 1357, 1067, 1059, 524, 525, 526, 527, 528,
	529, 530, 523, 843, 981, 533, 82, 1050, 642, 195,
	641, 834, 834, 639, 640, 638, 318, 834, 463, 644,
	1073, 1074, 643, 732, 1057, 82, 1075, 207, 1077, 1078,
	1079, 1063, 1064, 869, 834, 325, 206, 326, 603, 627,
	935, 502, 72, 463, 1108, 1107, 1082, 945, 1115, 720,
	1091, 964, 475, 996, 210, 541, 1081, 1081, 976, 1051,
	334, 1169, 881, 742, 491, 1336, 1292, 1105, 82, 82,
	1012, 82, 571, 839, 261, 757, 274, 271, 273, 465,
	272, 748, 1021, 515, 260, 1120, 249, 317, 587, 595,
	1011, 593, 592, 1036, 82, 1032, 316, 195, 195, 1126,
	1253, 195, 1131, 1344, 1167, 752, 53, 1130, 195, 1163,
	28, 854, 61, 1170, 244, 23, 22, 82, 854, 1168,
	1149, 1157, 1179, 1180, 1181, 1166, 766, 1150, 895, 21,
	19, 18, 17, 20, 1136, 465, 793, 465, 1172, 16,
	1173, 755, 756, 1171, 15, 465, 14, 32, 13, 12,
	11, 1185, 10, 9, 8, 4, 1184, 82, 235, 82,
	968, 1192, 25, 2, 0, 1191, 0, 0, 0, 0,
	0, 0, 0, 0, 1090, 0, 0, 0, 0, 0,
	0, 1207, 1208, 0, 465, 0, 0, 0, 0, 0,
	82, 0, 82, 82, 0, 0, 0, 1220, 559, 0,
	0, 1200, 0, 831, 832, 0, 0, 0, 319, 0,
	1222, 0, 0, 1225, 0, 0, 0, 195, 0, 251,
	1129, 0, 994, 0, 0, 82, 0, 1231, 995, 1243,
	1230, 0, 0, 0, 1229, 999, 725, 1252, 82, 195,
	0, 0, 1153, 0, 0, 82, 0, 0, 0, 1227,
	0, 1238, 0, 0, 730, 0, 82, 1000, 1001, 195,
	1259, 0, 0, 0, 889, 1010, 318, 0, 0, 0,
	1016, 0, 1017, 1018, 1019, 1020, 0, 1270, 1271, 1272,
	0, 1273, 1235, 1236, 1267, 1237, 0, 0, 1239, 0,
	1241, 0, 1059, 895, 0, 895, 1275, 0, 463, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 82,
	0, 82, 82, 82, 195, 82, 0, 1282, 1045, 1284,
	1289, 1288, 0, 82, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 490, 0, 0, 0, 465, 0, 1278,
	0, 1167, 1294, 0, 1310, 1283, 0, 1305, 0, 82,
	82, 82, 1311, 1312, 0, 0, 1307, 1309, 0, 1129,
	0, 0, 1166, 0, 0, 0, 1318, 0, 1324, 0,
	320, 190, 1335, 0, 221, 0, 971, 972, 0, 493,
	1086, 465, 0, 465, 0, 229, 0, 1303, 1334, 1167,
	1330, 53, 1331, 0, 0, 0, 82, 82, 462, 248,
	1348, 190, 190, 0, 1349, 1352, 465, 190, 189, 82,
	1166, 531, 532, 524, 525, 526, 527, 528, 529, 530,
	523, 0, 82, 533, 1135, 0, 895, 0, 1366, 465,
	0, 0, 0, 0, 1371, 0, 854, 0, 1373, 323,
	0, 0, 0, 998, 435, 82, 1376, 0, 0, 0,
	0, 465, 0, 1090, 895, 0, 1356, 0, 0, 0,
	1383, 1384, 0, 0, 0, 0, 834, 0, 0, 512,
	1391, 1045, 1182, 834, 0, 0, 204, 485, 0, 1015,
	0, 0, 82, 549, 551, 552, 553, 554, 555, 0,
	0, 1375, 0, 0, 0, 0, 82, 0, 0, 0,
	0, 216, 465, 0, 465, 1195, 0, 0, 0, 562,
	0, 0, 0, 0, 190, 0, 190, 0, 0, 0,
	0, 0, 190, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 190, 0, 0, 0, 0, 1221, 522, 521,
	531, 532, 524, 525, 526, 527, 528, 529, 530, 523,
	1223, 443, 533, 444, 0, 0, 0, 1226, 1232, 451,
	0, 0, 479, 0, 0, 1234, 0, 0, 465, 453,
	0, 0, 0, 0, 0, 199, 0, 1244, 1245, 1246,
	201, 0, 1249, 0, 0, 0, 0, 208, 203, 0,
	0, 0, 0, 0, 0, 1261, 1262, 1263, 0, 1266,
	0, 0, 466, 467, 468, 0, 0, 473, 0, 0,
	0, 0, 0, 0, 205, 478, 0, 211, 0, 0,
	0, 1269, 209, 1269, 1269, 1269, 0, 1274, 0, 0,
	0, 0, 0, 0, 0, 465, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 190, 200, 0, 0,
	0, 0, 1159, 190, 611, 190, 0, 0, 0, 0,
	0, 465, 465, 465, 0, 0, 0, 0, 1174, 1175,
	0, 0, 1176, 0, 202, 1178, 212, 213, 214, 215,
	220, 1302, 0, 589, 0, 218, 217, 219, 0, 0,
	0, 0, 612, 0, 0, 0, 0, 1055, 1315, 1316,
	1317, 0, 0, 0, 0, 0, 0, 0, 512, 512,
	521, 531, 532, 524, 525, 526, 527, 528, 529, 530,
	523, 1195, 0, 533, 1339, 1340, 1341, 1342, 1343, 0,
	0, 0, 0, 0, 1269, 767, 0, 0, 776, 777,
	778, 779, 780, 781, 782, 783, 784, 785, 786, 787,
	788, 789, 790, 0, 0, 1228, 0, 1351, 0, 522,
	521, 531, 532, 524, 525, 526, 527, 528, 529, 530,
	523, 0, 1367, 533, 0, 190, 190, 1372, 1251, 190,
	0, 0, 190, 0, 0, 0, 705, 0, 0, 0,
	1377, 834, 0, 0, 512, 0, 0, 0, 1255, 0,
	0, 0, 0, 0, 0, 559, 0, 0, 1379, 0,
	0, 190, 694, 695, 0, 0, 698, 735, 0, 701,
	0, 1395, 1396, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 687, 190, 0, 0, 0, 0,
	0, 0, 696, 0, 0, 887, 0, 705, 723, 0,
	0, 0, 0, 707, 708, 709, 710, 711, 712, 713,
	714, 0, 0, 0, 0, 0, 0, 0, 715, 716,
	717, 718, 754, 0, 0, 522, 521, 531, 532, 524,
	525, 526, 527, 528, 529, 530, 523, 0, 0, 533,
	248, 0, 0, 0, 0, 559, 0, 248, 248, 0,
	0, 835, 835, 248, 0, 0, 0, 835, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 248, 248, 248,
	248, 0, 190, 0, 835, 190, 190, 190, 190, 190,
	0, 26, 27, 54, 29, 30, 0, 868, 0, 0,
	190, 0, 0, 0, 611, 0, 0, 0, 190, 190,
	45, 0, 0, 0, 0, 31, 0, 0, 0, 851,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 40, 1365, 559, 0, 56, 0,
	0, 0, 0, 0, 0, 0, 879, 0, 0, 0,
	0, 0, 0, 988, 989, 990, 809, 810, 811, 812,
	813, 814, 815, 816, 818, 819, 820, 821, 822, 823,
	824, 825, 826, 827, 828, 817, 0, 0, 0, 0,
	0, 0, 190, 0, 0, 0, 0, 0, 0, 0,
	0, 190, 0, 0, 190, 0, 0, 522, 521, 531,
	532, 524, 525, 526, 527, 528, 529, 530, 523, 0,
	0, 533, 0, 0, 0, 0, 0, 0, 0, 937,
	0, 33, 34, 36, 35, 38, 0, 0, 961, 0,
	0, 962, 0, 0, 705, 0, 0, 0, 0, 0,
	0, 0, 39, 46, 47, 0, 248, 48, 49, 37,
	942, 0, 944, 1250, 485, 1248, 0, 0, 0, 0,
	963, 41, 42, 0, 43, 44, 50, 51, 52, 0,
	0, 0, 1247, 485, 0, 0, 0, 0, 0, 0,
	517, 0, 520, 0, 0, 0, 0, 0, 534, 535,
	536, 537, 538, 539, 540, 248, 518, 519, 516, 522,
	521, 531, 532, 524, 525, 526, 527, 528, 529, 530,
	523, 0, 0, 533, 0, 522, 521, 531, 532, 524,
	525, 526, 527, 528, 529, 530, 523, 0, 0, 533,
	0, 0, 248, 0, 522, 521, 531, 532, 524, 525,
	526, 527, 528, 529, 530, 523, 0, 55, 533, 0,
	0, 0, 522, 521, 531, 532, 524, 525, 526, 527,
	528, 529, 530, 523, 0, 0, 533, 0, 0, 0,
	659, 190, 1133, 1134, 1132, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1151, 1152, 0, 1154, 1155,
	993, 0, 0, 0, 522, 521, 531, 532, 524, 525,
	526, 527, 528, 529, 530, 523, 0, 0, 533, 0,
	522, 521, 531, 532, 524, 525, 526, 527, 528, 529,
	530, 523, 0, 0, 533, 0, 0, 0, 0, 1186,
	0, 0, 0, 0, 664, 1190, 522, 521, 531, 532,
	524, 525, 526, 527, 528, 529, 530, 523, 0, 0,
	533, 0, 0, 0, 0, 0, 0, 0, 0, 1118,
	1119, 0, 0, 1122, 0, 0, 0, 0, 0, 0,
	190, 647, 0, 0, 0, 0, 0, 0, 0, 0,
	248, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 248, 0, 0, 0, 0, 1087, 0, 0, 0,
	660, 705, 0, 0, 0, 0, 0, 1125, 0, 0,
	0, 0, 1233, 0, 0, 0, 835, 0, 0, 0,
	0, 1114, 0, 835, 674, 675, 676, 677, 678, 679,
	680, 0, 681, 682, 683, 684, 685, 661, 662, 663,
	645, 646, 673, 0, 648, 0, 649, 650, 651, 652,
	653, 654, 655, 656, 657, 658, 665, 666, 667, 668,
	669, 670, 671, 672, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 190,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 190, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1217, 0, 0, 0,
	0, 190, 0, 0, 0, 0, 0, 1297, 1298, 0,
	1299, 1300, 1301, 0, 0, 0, 0, 0, 1224, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 611, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 420, 410, 0, 382, 422, 360,
	374, 430, 375, 376, 403, 346, 390, 132, 372, 0,
	363, 341, 369, 342, 361, 384, 99, 387, 359, 412,
	393, 113, 428, 115, 398, 0, 149, 125, 0, 0,
	386, 414, 388, 408, 381, 404, 351, 397, 423, 373,
	401, 424, 0, 0, 0, 383, 81, 0, 0, 631,
	632, 633, 897, 0, 0, 0, 0, 92, 0, 0,
	0, 400, 419, 371, 0, 0, 0, 0, 0, 0,
	0, 1393, 0, 0, 0, 0, 1287, 0, 0, 0,
	0, 0, 0, 0, 402, 340, 399, 0, 344, 347,
	429, 417, 366, 367, 1060, 0, 0, 0, 0, 0,
	0, 385, 389, 405, 379, 0, 0, 0, 0, 0,
	0, 0, 0, 364, 0, 396, 0, 0, 0, 348,
	345, 0, 0, 0, 0, 350, 0, 365, 406, 0,
	339, 409, 415, 380, 196, 418, 378, 377, 421, 138,
	0, 835, 152, 104, 103, 112, 413, 362, 370, 95,
	368, 144, 134, 164, 395, 135, 143, 116, 156, 139,
	163, 197, 171, 154, 170, 84, 153, 162, 93, 146,
	0, 0, 0, 86, 160, 151, 123, 108, 109, 85,
	0, 142, 98, 102, 97, 131, 157, 158, 96, 89,
	169, 88, 90, 168, 130, 155, 161, 124, 121, 87,
	159, 122, 120, 111, 100, 105, 136, 118, 137, 106,
	127, 126, 128, 0, 343, 0, 150, 166, 178, 358,
	416, 172, 173, 174, 175, 0, 0, 0, 129, 91,
	107, 147, 119, 110, 117, 141, 177, 133, 145, 94,
	165, 148, 354, 357, 352, 353, 391, 392, 425, 426,
	427, 407, 349, 0, 355, 356, 0, 411, 394, 83,
	0, 114, 176, 140, 101, 167, 420, 410, 0, 382,
	422, 360, 374, 430, 375, 376, 403, 346, 390, 132,
	372, 0, 363, 341, 369, 342, 361, 384, 99, 387,
	359, 412, 393, 113, 428, 115, 398, 0, 149, 125,
	0, 0, 386, 414, 388, 408, 381, 404, 351, 397,
	423, 373, 401, 424, 0, 0, 0, 383, 81, 0,
	0, 631, 632, 633, 897, 0, 0, 0, 0, 92,
	0, 0, 0, 400, 419, 371, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 402, 340, 399, 0,
	344, 347, 429, 417, 366, 367, 0, 0, 0, 0,
	0, 0, 0, 385, 389, 405, 379, 0, 0, 0,
	0, 0, 0, 0, 0, 364, 0, 396, 0, 0,
	0, 348, 345, 0, 0, 0, 0, 350, 0, 365,
	406, 0, 339, 409, 415, 380, 196, 418, 378, 377,
	421, 138, 0, 0, 152, 104, 103, 112, 413, 362,
	370, 95, 368, 144, 134, 164, 395, 135, 143, 116,
	156, 139, 163, 197, 171, 154, 170, 84, 153, 162,
	93, 146, 0, 0, 0, 86, 160, 151, 123, 108,
	109, 85, 0, 142, 98, 102, 97, 131, 157, 158,
	96, 89, 169, 88, 90, 168, 130, 155, 161, 124,
	121, 87, 159, 122, 120, 111, 100, 105, 136, 118,
	137, 106, 127, 126, 128, 0, 343, 0, 150, 166,
	178, 358, 416, 172, 173, 174, 175, 0, 0, 0,
	129, 91, 107, 147, 119, 110, 117, 141, 177, 133,
	145, 94, 165, 148, 354, 357, 352, 353, 391, 392,
	425, 426, 427, 407, 349, 0, 355, 356, 0, 411,
	394, 83, 0, 114, 176, 140, 101, 167, 420, 410,
	0, 382, 422, 360, 374, 430, 375, 376, 403, 346,
	390, 132, 372, 0, 363, 341, 369, 342, 361, 384,
	99, 387, 359, 412, 393, 113, 428, 115, 398, 0,
	149, 125, 0, 0, 386, 414, 388, 408, 381, 404,
	351, 397, 423, 373, 401, 424, 0, 0, 0, 383,
	255, 0, 0, 193, 191, 192, 0, 0, 0, 0,
	0, 92, 0, 0, 0, 400, 419, 371, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 402, 340,
	399, 0, 344, 347, 429, 417, 366, 367, 0, 0,
	0, 0, 0, 0, 0, 385, 389, 405, 379, 0,
	0, 0, 0, 0, 0, 763, 0, 364, 0, 396,
	0, 0, 0, 348, 345, 0, 0, 0, 0, 350,
	0, 365, 406, 0, 339, 409, 415, 380, 196, 418,
	378, 377, 421, 138, 0, 0, 152, 104, 103, 112,
	413, 362, 370, 95, 368, 144, 134, 164, 395, 135,
	143, 116, 156, 139, 163, 197, 171, 154, 170, 84,
	153, 162, 93, 146, 0, 0, 0, 86, 160, 151,
	123, 108, 109, 85, 0, 142, 98, 102, 97, 131,
	157, 158, 96, 89, 169, 88, 90, 168, 130, 155,
	161, 124, 121, 87, 159, 122, 120, 111, 100, 105,
	136, 118, 137, 106, 127, 126, 128, 0, 343, 0,
	150, 166, 178, 358, 416, 172, 173, 174, 175, 0,
	0, 0, 129, 91, 107, 147, 119, 110, 117, 141,
	177, 133, 145, 94, 165, 148, 354, 357, 352, 353,
	391, 392, 425, 426, 427, 407, 349, 0, 355, 356,
	0, 411, 394, 83, 0, 114, 176, 140, 101, 167,
	420, 410, 0, 382, 422, 360, 374, 430, 375, 376,
	403, 346, 390, 132, 372, 0, 363, 341, 369, 342,
	361, 384, 99, 387, 359, 412, 393, 113, 428, 115,
	398, 0, 149, 125, 0, 0, 386, 414, 388, 408,
	381, 404, 351, 397, 423, 373, 401, 424, 0, 0,
	0, 383, 255, 0, 0, 193, 191, 192, 0, 0,
	0, 0, 0, 92, 0, 0, 0, 400, 419, 371,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	402, 340, 399, 0, 344, 347, 429, 417, 366, 367,
	0, 0, 0, 0, 0, 0, 0, 385, 389, 405,
	379, 0, 0, 0, 0, 0, 0, 0, 0, 364,
	0, 396, 0, 0, 0, 348, 345, 0, 0, 0,
	0, 350, 0, 365, 406, 0, 339, 409, 415, 380,
	196, 418, 378, 377, 421, 138, 0, 0, 152, 104,
	103, 112, 413, 362, 370, 95, 368, 144, 134, 164,
	395, 135, 143, 116, 156, 139, 163, 197, 171, 154,
	170, 84, 153, 162, 93, 146, 0, 0, 0, 86,
	160, 151, 123, 108, 109, 85, 0, 142, 98, 102,
	97, 131, 157, 158, 96, 89, 169, 88, 90, 168,
	130, 155, 161, 124, 121, 87, 159, 122, 120, 111,
	100, 105, 136, 118, 137, 106, 127, 126, 128, 0,
	343, 0, 150, 166, 178, 358, 416, 172, 173, 174,
	175, 0, 0, 0, 129, 91, 107, 147, 119, 110,
	117, 141, 177, 133, 145, 94, 165, 148, 354, 357,
	352, 353, 391, 392, 425, 426, 427, 407, 349, 0,
	355, 356, 0, 411, 394, 83, 0, 114, 176, 140,
	101, 167, 420, 410, 0, 382, 422, 360, 374, 430,
	375, 376, 403, 346, 390, 132, 372, 0, 363, 341,
	369, 342, 361, 384, 99, 387, 359, 412, 393, 113,
	428, 115, 398, 0, 149, 125, 0, 0, 386, 414,
	388, 408, 381, 404, 351, 397, 423, 373, 401, 424,
	0, 0, 0, 383, 194, 0, 0, 193, 191, 192,
	0, 0, 0, 0, 0, 92, 0, 0, 0, 400,
	419, 371, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 402, 340, 399, 0, 344, 347, 429, 417,
	366, 367, 0, 0, 0, 0, 0, 0, 0, 385,
	389, 405, 379, 0, 0, 0, 0, 0, 0, 0,
	0, 364, 0, 396, 0, 0, 0, 348, 345, 0,
	0, 0, 0, 350, 0, 365, 406, 0, 339, 409,
	415, 380, 196, 418, 378, 377, 421, 138, 0, 0,
	152, 104, 103, 112, 413, 362, 370, 95, 368, 144,
	134, 164, 395, 135, 143, 116, 156, 139, 163, 197,
	171, 154, 170, 84, 153, 162, 93, 146, 0, 0,
	0, 86, 160, 151, 123, 108, 109, 85, 0, 142,
	98, 102, 97, 131, 157, 158, 96, 89, 169, 88,
	90, 168, 130, 155, 161, 124, 121, 87, 159, 122,
	120, 111, 100, 105, 136, 118, 137, 106, 127, 126,
	128, 0, 343, 0, 150, 166, 178, 358, 416, 172,
	173, 174, 175, 0, 0, 0, 129, 91, 107, 147,
	119, 110, 117, 141, 177, 133, 145, 94, 165, 148,
	354, 357, 352, 353, 391, 392, 425, 426, 427, 407,
	349, 0, 355, 356, 0, 411, 394, 83, 0, 114,
	176, 140, 101, 167, 420, 410, 0, 382, 422, 360,
	374, 430, 375, 376, 403, 346, 390, 132, 372, 0,
	363, 341, 369, 342, 361, 384, 99, 387, 359, 412,
	393, 113, 428, 115, 398, 0, 149, 125, 0, 0,
	386, 414, 388, 408, 381, 404, 351, 397, 423, 373,
	401, 424, 56, 0, 0, 383, 81, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 92, 0, 0,
	0, 400, 419, 371, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 402, 340, 399, 0, 344, 347,
	429, 417, 366, 367, 0, 0, 0, 0, 0, 0,
	0, 385, 389, 405, 379, 0, 0, 0, 0, 0,
	0, 0, 0, 364, 0, 396, 0, 0, 0, 348,
	345, 0, 0, 0, 0, 350, 0, 365, 406, 0,
	339, 409, 415, 380, 196, 418, 378, 377, 421, 138,
	0, 0, 152, 104, 103, 112, 413, 362, 370, 95,
	368, 144, 134, 164, 395, 135, 143, 116, 156, 139,
	163, 197, 171, 154, 170, 84, 153, 162, 93, 146,
	0, 0, 0, 86, 160, 151, 123, 108, 109, 85,
	0, 142, 98, 102, 97, 131, 157, 158, 96, 89,
	169, 88, 90, 168, 130, 155, 161, 124, 121, 87,
	159, 122, 120, 111, 100, 105, 136, 118, 137, 106,
	127, 126, 128, 0, 343, 0, 150, 166, 178, 358,
	416, 172, 173, 174, 175, 0, 0, 0, 129, 91,
	107, 147, 119, 110, 117, 141, 177, 133, 145, 94,
	165, 148, 354, 357, 352, 353, 391, 392, 425, 426,
	427, 407, 349, 0, 355, 356, 0, 411, 394, 83,
	0, 114, 176, 140, 101, 167, 420, 410, 0, 382,
	422, 360, 374, 430, 375, 376, 403, 346, 390, 132,
	372, 0, 363, 341, 369, 342, 361, 384, 99, 387,
	359, 412, 393, 113, 428, 115, 398, 0, 149, 125,
	0, 0, 386, 414, 388, 408, 381, 404, 351, 397,
	423, 373, 401, 424, 0, 0, 0, 383, 81, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 92,
	0, 0, 0, 400, 419, 371, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 402, 340, 399, 0,
	344, 347, 429, 417, 366, 367, 0, 0, 0, 0,
	0, 0, 0, 385, 389, 405, 379, 0, 0, 0,
	0, 0, 0, 1128, 0, 364, 0, 396, 0, 0,
	0, 348, 345, 0, 0, 0, 0, 350, 0, 365,
	406, 0, 339, 409, 415, 380, 196, 418, 378, 377,
	421, 138, 0, 0, 152, 104, 103, 112, 413, 362,
	370, 95, 368, 144, 134, 164, 395, 135, 143, 116,
	156, 139, 163, 197, 171, 154, 170, 84, 153, 162,
	93, 146, 0, 0, 0, 86, 160, 151, 123, 108,
	109, 85, 0, 142, 98, 102, 97, 131, 157, 158,
	96, 89, 169, 88, 90, 168, 130, 155, 161, 124,
	121, 87, 159, 122, 120, 111, 100, 105, 136, 118,
	137, 106, 127, 126, 128, 0, 343, 0, 150, 166,
	178, 358, 416, 172, 173, 174, 175, 0, 0, 0,
	129, 91, 107, 147, 119, 110, 117, 141, 177, 133,
	145, 94, 165, 148, 354, 357, 352, 353, 391, 392,
	425, 426, 427, 407, 349, 0, 355, 356, 0, 411,
	394, 83, 0, 114, 176, 140, 101, 167, 420, 410,
	0, 382, 422, 360, 374, 430, 375, 376, 403, 346,
	390, 132, 372, 0, 363, 341, 369, 342, 361, 384,
	99, 387, 359, 412, 393, 113, 428, 115, 398, 0,
	149, 125, 0, 0, 386, 414, 388, 408, 381, 404,
	351, 397, 423, 373, 401, 424, 0, 0, 0, 383,
	81, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 92, 0, 0, 0, 400, 419, 371, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 402, 340,
	399, 0, 344, 347, 429, 417, 366, 367, 0, 0,
	0, 0, 0, 0, 0, 385, 389, 405, 379, 0,
	0, 0, 0, 0, 0, 0, 0, 364, 0, 396,
	0, 0, 0, 348, 345, 0, 0, 0, 0, 350,
	0, 365, 406, 0, 339, 409, 415, 380, 196, 418,
	378, 377, 421, 138, 0, 0, 152, 104, 103, 112,
	413, 362, 370, 95, 368, 144, 134, 164, 395, 135,
	143, 116, 156, 139, 163, 197, 171, 154, 170, 84,
	153, 162, 93, 146, 0, 0, 0, 86, 160, 151,
	123, 108, 109, 85, 0, 142, 98, 102, 97, 131,
	157, 158, 96, 89, 169, 88, 90, 168, 130, 155,
	161, 124, 121, 87, 159, 122, 120, 111, 100, 105,
	136, 118, 137, 106, 127, 126, 128, 0, 343, 0,
	150, 166, 178, 358, 416, 172, 173, 174, 175, 0,
	0, 0, 129, 91, 107, 147, 119, 110, 117, 141,
	177, 133, 145, 94, 165, 148, 354, 357, 352, 353,
	391, 392, 425, 426, 427, 407, 349, 0, 355, 356,
	0, 411, 394, 83, 0, 114, 176, 140, 101, 167,
	420, 410, 0, 382, 422, 360, 374, 430, 375, 376,
	403, 346, 390, 132, 372, 0, 363, 341, 369, 342,
	361, 384, 99, 387, 359, 412, 393, 113, 428, 115,
	398, 0, 149, 125, 0, 0, 386, 414, 388, 408,
	381, 404, 351, 397, 423, 373, 401, 424, 0, 0,
	0, 383, 81, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 92, 0, 0, 0, 400, 419, 371,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	402, 340, 399, 0, 344, 347, 429, 417, 366, 367,
	0, 0, 0, 0, 0, 0, 0, 385, 389, 405,
	379, 0, 0, 0, 0, 0, 0, 0, 0, 364,
	0, 396, 0, 0, 0, 348, 345, 0, 0, 0,
	0, 350, 0, 365, 406, 0, 339, 409, 415, 380,
	196, 418, 378, 377, 421, 138, 0, 0, 152, 104,
	103, 112, 413, 362, 370, 95, 368, 144, 134, 164,
	395, 135, 143, 116, 156, 139, 163, 197, 171, 154,
	170, 84, 153, 162, 93, 146, 0, 0, 0, 86,
	160, 151, 123, 108, 109, 85, 0, 142, 98, 102,
	97, 131, 157, 158, 96, 89, 169, 88, 337, 168,
	130, 155, 161, 124, 121, 87, 159, 122, 120, 111,
	100, 105, 136, 118, 137, 106, 127, 126, 128, 0,
	343, 0, 150, 166, 178, 358, 416, 172, 173, 174,
	175, 0, 0, 0, 338, 336, 107, 147, 119, 110,
	117, 141, 177, 133, 145, 94, 165, 148, 354, 357,
	352, 353, 391, 392, 425, 426, 427, 407, 349, 0,
	355, 356, 0, 411, 394, 83, 0, 114, 176, 140,
	101, 167, 420, 410, 0, 382, 422, 360, 374, 430,
	375, 376, 403, 346, 390, 132, 372, 0, 363, 341,
	369, 342, 361, 384, 99, 387, 359, 412, 393, 113,
	428, 115, 398, 0, 149, 125, 0, 0, 386, 414,
	388, 408, 381, 404, 351, 397, 423, 373, 401, 424,
	0, 0, 0, 383, 81, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 92, 0, 0, 0, 400,
	419, 371, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 402, 340, 399, 0, 344, 347, 429, 417,
	366, 367, 0, 0, 0, 0, 0, 0, 0, 385,
	389, 405, 379, 0, 0, 0, 0, 0, 0, 0,
	0, 364, 0, 396, 0, 0, 0, 348, 345, 0,
	0, 0, 0, 350, 0, 365, 406, 0, 339, 409,
	415, 380, 196, 418, 378, 377, 421, 138, 0, 0,
	152, 104, 103, 112, 413, 362, 370, 95, 368, 144,
	134, 164, 395, 135, 143, 116, 156, 139, 163, 197,
	171, 154, 170, 84, 153, 327, 93, 146, 0, 0,
	0, 86, 160, 151, 123, 108, 109, 85, 0, 142,
	98, 102, 97, 131, 157, 158, 96, 89, 169, 88,
	337, 168, 130, 155, 161, 124, 121, 87, 159, 122,
	120, 111, 100, 105, 136, 118, 137, 106, 127, 126,
	128, 0, 343, 0, 150, 166, 178, 358, 416, 172,
	173, 174, 175, 0, 0, 0, 338, 336, 332, 331,
	330, 110, 117, 141, 177, 133, 145, 94, 165, 148,
	354, 357, 352, 353, 391, 392, 425, 426, 427, 407,
	349, 0, 355, 356, 0, 411, 394, 83, 0, 114,
	176, 140, 101, 167, 132, 0, 0, 801, 0, 257,
	0, 0, 0, 99, 0, 252, 0, 0, 113, 299,
	115, 0, 0, 149, 125, 0, 0, 0, 0, 290,
	291, 0, 0, 0, 0, 0, 0, 0, 0, 56,
	0, 0, 289, 255, 283, 276, 254, 253, 192, 278,
	279, 280, 281, 0, 92, 277, 284, 0, 282, 285,
	286, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 250, 268, 0, 298, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 265, 266, 246, 0,
	0, 0, 310, 0, 267, 0, 0, 263, 264, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 196, 0, 0, 308, 0, 138, 0, 0, 152,
	104, 103, 112, 0, 0, 0, 95, 0, 144, 134,
	164, 0, 135, 143, 116, 156, 139, 163, 197, 171,
	154, 170, 84, 153, 162, 93, 146, 0, 0, 0,
	86, 160, 151, 123, 108, 109, 85, 0, 142, 98,
	102, 97, 131, 157, 158, 96, 89, 169, 88, 90,
	168, 130, 155, 161, 124, 121, 87, 159, 122, 120,
	111, 100, 105, 136, 118, 137, 106, 127, 126, 128,
	0, 0, 0, 150, 166, 178, 0, 0, 172, 173,
	174, 175, 0, 0, 0, 129, 91, 107, 147, 119,
	110, 117, 141, 177, 133, 145, 94, 165, 148, 300,
	309, 306, 307, 304, 305, 303, 302, 301, 311, 292,
	293, 294, 295, 297, 0, 296, 83, 0, 114, 176,
	140, 101, 167, 132, 0, 0, 0, 0, 257, 0,
	0, 0, 99, 0, 252, 0, 0, 113, 299, 115,
	0, 0, 149, 125, 0, 0, 0, 0, 290, 291,
	0, 0, 0, 0, 0, 0, 0, 0, 56, 0,
	0, 289, 255, 283, 276, 254, 253, 192, 278, 279,
	280, 281, 0, 92, 277, 284, 0, 282, 285, 286,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 250, 268, 0, 298, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 265, 266, 1304, 0, 0,
	0, 310, 0, 267, 0, 0, 263, 264, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	196, 0, 0, 308, 0, 138, 0, 0, 152, 104,
	103, 112, 0, 0, 0, 95, 0, 144, 134, 164,
	0, 135, 143, 116, 156, 139, 163, 197, 171, 154,
	170, 84, 153, 162, 93, 146, 0, 0, 0, 86,
	160, 151, 123, 108, 109, 85, 0, 142, 98, 102,
	97, 131, 157, 158, 96, 89, 169, 88, 90, 168,
	130, 155, 161, 124, 121, 87, 159, 122, 120, 111,
	100, 105, 136, 118, 137, 106, 127, 126, 128, 0,
	0, 0, 150, 166, 178, 0, 0, 172, 173, 174,
	175, 0, 0, 0, 129, 91, 107, 147, 119, 110,
	117, 141, 177, 133, 145, 94, 165, 148, 300, 309,
	306, 307, 304, 305, 303, 302, 301, 311, 292, 293,
	294, 295, 297, 0, 296, 83, 0, 114, 176, 140,
	101, 167, 132, 0, 0, 0, 0, 257, 0, 0,
	0, 99, 0, 252, 0, 0, 113, 299, 115, 0,
	0, 149, 125, 0, 0, 0, 0, 290, 291, 0,
	0, 0, 0, 0, 0, 0, 0, 56, 0, 485,
	289, 255, 283, 276, 254, 253, 192, 278, 279, 280,
	281, 0, 92, 277, 284, 0, 282, 285, 286, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 250, 268, 0, 298, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 265, 266, 0, 0, 0, 0,
	310, 0, 267, 0, 0, 263, 264, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 196,
	0, 0, 308, 0, 138, 0, 0, 152, 104, 103,
	112, 0, 0, 0, 95, 0, 144, 134, 164, 0,
	135, 143, 116, 156, 139, 163, 197, 171, 154, 170,
	84, 153, 162, 93, 146, 0, 0, 0, 86, 160,
	151, 123, 108, 109, 85, 0, 142, 98, 102, 97,
	131, 157, 158, 96, 89, 169, 88, 90, 168, 130,
	155, 161, 124, 121, 87, 159, 122, 120, 111, 100,
	105, 136, 118, 137, 106, 127, 126, 128, 0, 0,
	0, 150, 166, 178, 0, 0, 172, 173, 174, 175,
	0, 0, 0, 129, 91, 107, 147, 119, 110, 117,
	141, 177, 133, 145, 94, 165, 148, 300, 309, 306,
	307, 304, 305, 303, 302, 301, 311, 292, 293, 294,
	295, 297, 0, 296, 83, 0, 114, 176, 140, 101,
	167, 132, 0, 0, 0, 0, 257, 0, 0, 0,
	99, 0, 252, 0, 0, 113, 299, 115, 0, 0,
	149, 125, 0, 0, 0, 0, 290, 291, 0, 0,
	0, 0, 0, 0, 0, 0, 56, 0, 0, 289,
	255, 283, 276, 254, 253, 192, 278, 279, 280, 281,
	0, 92, 277, 284, 0, 282, 285, 286, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	250, 268, 0, 298, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 265, 266, 246, 0, 0, 0, 310,
	0, 267, 0, 0, 263, 264, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 196, 0,
	0, 308, 0, 138, 0, 0, 152, 104, 103, 112,
	0, 0, 0, 95, 0, 144, 134, 164, 0, 135,
	143, 116, 156, 139, 163, 197, 171, 154, 170, 84,
	153, 162, 93, 146, 0, 0, 0, 86, 160, 151,
	123, 108, 109, 85, 0, 142, 98, 102, 97, 131,
	157, 158, 96, 89, 169, 88, 90, 168, 130, 155,
	161, 124, 121, 87, 159, 122, 120, 111, 100, 105,
	136, 118, 137, 106, 127, 126, 128, 0, 0, 0,
	150, 166, 178, 0, 0, 172, 173, 174, 175, 0,
	0, 0, 129, 91, 107, 147, 119, 110, 117, 141,
	177, 133, 145, 94, 165, 148, 300, 309, 306, 307,
	304, 305, 303, 302, 301, 311, 292, 293, 294, 295,
	297, 0, 296, 83, 0, 114, 176, 140, 101, 167,
	132, 0, 0, 0, 0, 257, 0, 0, 0, 99,
	0, 252, 0, 0, 113, 299, 115, 0, 0, 149,
	125, 0, 0, 0, 0, 290, 291, 0, 0, 0,
	0, 0, 0, 888, 0, 56, 0, 0, 289, 255,
	283, 276, 254, 253, 192, 278, 279, 280, 281, 0,
	92, 277, 284, 0, 282, 285, 286, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 250,
	268, 0, 298, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 265, 266, 0, 0, 0, 0, 310, 0,
	267, 0, 0, 263, 264, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 196, 0, 0,
	308, 0, 138, 0, 0, 152, 104, 103, 112, 0,
	0, 0, 95, 0, 144, 134, 164, 0, 135, 143,
	116, 156, 139, 163, 197, 171, 154, 170, 84, 153,
	162, 93, 146, 0, 0, 0, 86, 160, 151, 123,
	108, 109, 85, 0, 142, 98, 102, 97, 131, 157,
	158, 96, 89, 169, 88, 90, 168, 130, 155, 161,
	124, 121, 87, 159, 122, 120, 111, 100, 105, 136,
	118, 137, 106, 127, 126, 128, 0, 0, 0, 150,
	166, 178, 0, 0, 172, 173, 174, 175, 0, 0,
	0, 129, 91, 107, 147, 119, 110, 117, 141, 177,
	133, 145, 94, 165, 148, 300, 309, 306, 307, 304,
	305, 303, 302, 301, 311, 292, 293, 294, 295, 297,
	26, 296, 83, 0, 114, 176, 140, 101, 167, 0,
	0, 0, 132, 0, 0, 0, 0, 257, 0, 0,
	0, 99, 0, 252, 0, 0, 113, 299, 115, 0,
	0, 149, 125, 0, 0, 0, 0, 290, 291, 0,
	0, 0, 0, 0, 0, 0, 0, 56, 0, 0,
	289, 255, 283, 276, 254, 253, 192, 278, 279, 280,
	281, 0, 92, 277, 284, 0, 282, 285, 286, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 250, 268, 0, 298, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 265, 266, 0, 0, 0, 0,
	310, 0, 267, 0, 0, 263, 264, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 196,
	0, 0, 308, 0, 138, 0, 0, 152, 104, 103,
	112, 0, 0, 0, 95, 0, 144, 134, 164, 0,
	135, 143, 116, 156, 139, 163, 197, 171, 154, 170,
	84, 153, 162, 93, 146, 0, 0, 0, 86, 160,
	151, 123, 108, 109, 85, 0, 142, 98, 102, 97,
	131, 157, 158, 96, 89, 169, 88, 90, 168, 130,
	155, 161, 124, 121, 87, 159, 122, 120, 111, 100,
	105, 136, 118, 137, 106, 127, 126, 128, 0, 0,
	0, 150, 166, 178, 0, 0, 172, 173, 174, 175,
	0, 0, 0, 129, 91, 107, 147, 119, 110, 117,
	141, 177, 133, 145, 94, 165, 148, 300, 309, 306,
	307, 304, 305, 303, 302, 301, 311, 292, 293, 294,
	295, 297, 0, 296, 83, 0, 114, 176, 140, 101,
	167, 132, 0, 0, 0, 0, 257, 0, 0, 0,
	99, 0, 252, 0, 0, 113, 299, 115, 0, 0,
	149, 125, 0, 0, 0, 0, 290, 291, 0, 0,
	0, 0, 0, 0, 0, 0, 56, 0, 0, 289,
	255, 283, 276, 254, 253, 192, 278, 279, 280, 281,
	0, 92, 277, 284, 0, 282, 285, 286, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	250, 268, 0, 298, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 265, 266, 0, 0, 0, 0, 310,
	0, 267, 0, 0, 263, 264, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 196, 0,
	0, 308, 0, 138, 0, 0, 152, 104, 103, 112,
	0, 0, 0, 95, 0, 144, 134, 164, 0, 135,
	143, 116, 156, 139, 163, 197, 171, 154, 170, 84,
	153, 162, 93, 146, 0, 0, 0, 86, 160, 151,
	123, 108, 109, 85, 0, 142, 98, 102, 97, 131,
	157, 158, 96, 89, 169, 88, 90, 168, 130, 155,
	161, 124, 121, 87, 159, 122, 120, 111, 100, 105,
	136, 118, 137, 106, 127, 126, 128, 0, 0, 0,
	150, 166, 178, 0, 0, 172, 173, 174, 175, 0,
	0, 0, 129, 91, 107, 147, 119, 110, 117, 141,
	177, 133, 145, 94, 165, 148, 300, 309, 306, 307,
	304, 305, 303, 302, 301, 311, 292, 293, 294, 295,
	297, 132, 296, 83, 0, 114, 176, 140, 101, 167,
	99, 0, 550, 0, 0, 113, 299, 115, 0, 0,
	149, 125, 0, 0, 0, 0, 290, 291, 0, 0,
	0, 0, 0, 0, 0, 0, 56, 0, 0, 289,
	255, 283, 276, 254, 253, 192, 278, 279, 280, 281,
	0, 92, 277, 284, 0, 282, 285, 286, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 268, 0, 298, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 265, 266, 0, 0, 0, 0, 310,
	0, 267, 0, 0, 263, 264, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 196, 0,
	0, 308, 0, 138, 0, 0, 152, 104, 103, 112,
	0, 0, 0, 95, 0, 144, 134, 164, 1394, 135,
	143, 116, 156, 139, 163, 197, 171, 154, 170, 84,
	153, 162, 93, 146, 0, 0, 0, 86, 160, 151,
	123, 108, 109, 85, 0, 142, 98, 102, 97, 131,
	157, 158, 96, 89, 169, 88, 90, 168, 130, 155,
	161, 124, 121, 87, 159, 122, 120, 111, 100, 105,
	136, 118, 137, 106, 127, 126, 128, 0, 0, 0,
	150, 166, 178, 0, 0, 172, 173, 174, 175, 0,
	0, 0, 129, 91, 107, 147, 119, 110, 117, 141,
	177, 133, 145, 94, 165, 148, 300, 309, 306, 307,
	304, 305, 303, 302, 301, 311, 292, 293, 294, 295,
	297, 132, 296, 83, 0, 114, 176, 140, 101, 167,
	99, 0, 550, 0, 0, 113, 299, 115, 0, 0,
	149, 125, 0, 0, 0, 0, 290, 291, 0, 0,
	0, 0, 0, 0, 0, 0, 56, 0, 0, 289,
	255, 283, 276, 254, 253, 192, 278, 279, 280, 281,
	0, 92, 277, 284, 0, 282, 285, 286, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 268, 0, 298, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 265, 266, 0, 0, 0, 0, 310,
	0, 267, 0, 0, 263, 264, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 196, 0,
	0, 308, 0, 138, 0, 0, 152, 104, 103, 112,
	0, 0, 0, 95, 0, 144, 134, 164, 0, 135,
	143, 116, 156, 139, 163, 197, 171, 154, 170, 84,
	153, 162, 93, 146, 0, 0, 0, 86, 160, 151,
	123, 108, 109, 85, 0, 142, 98, 102, 97, 131,
	157, 158, 96, 89, 169, 88, 90, 168, 130, 155,
	161, 124, 121, 87, 159, 122, 120, 111, 100, 105,
	136, 118, 137, 106, 127, 126, 128, 0, 0, 0,
	150, 166, 178, 0, 0, 172, 173, 174, 175, 0,
	0, 0, 129, 91, 107, 147, 119, 110, 117, 141,
	177, 133, 145, 94, 165, 148, 300, 309, 306, 307,
	304, 305, 303, 302, 301, 311, 292, 293, 294, 295,
	297, 132, 296, 83, 0, 114, 176, 140, 101, 167,
	99, 0, 550, 0, 0, 113, 299, 115, 0, 0,
	149, 125, 0, 0, 0, 0, 290, 291, 0, 0,
	0, 0, 0, 0, 0, 0, 56, 0, 0, 289,
	255, 283, 276, 561, 253, 192, 278, 279, 280, 281,
	0, 92, 277, 284, 0, 282, 285, 286, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 268, 0, 298, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 265, 266, 0, 0, 0, 0, 310,
	0, 267, 0, 0, 263, 264, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 196, 0,
	0, 308, 0, 138, 0, 0, 152, 104, 103, 112,
	0, 0, 0, 95, 0, 144, 134, 164, 0, 135,
	143, 116, 156, 139, 163, 197, 171, 154, 170, 84,
	153, 162, 93, 146, 0, 0, 0, 86, 160, 151,
	123, 108, 109, 85, 0, 142, 98, 102, 97, 131,
	157, 158, 96, 89, 169, 88, 90, 168, 130, 155,
	161, 124, 121, 87, 159, 122, 120, 111, 100, 105,
	136, 118, 137, 106, 127, 126, 128, 0, 0, 0,
	150, 166, 178, 0, 0, 172, 173, 174, 175, 0,
	0, 0, 129, 91, 107, 147, 119, 110, 117, 141,
	177, 133, 145, 94, 165, 148, 300, 309, 306, 307,
	304, 305, 303, 302, 301, 311, 292, 293, 294, 295,
	297, 0, 296, 83, 0, 114, 176, 140, 101, 167,
	132, 0, 0, 0, 507, 0, 0, 0, 0, 99,
	0, 0, 0, 0, 113, 0, 115, 0, 0, 149,
	125, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 81,
	0, 0, 509, 510, 511, 0, 0, 0, 0, 0,
	92, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 504, 503, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 505, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 196, 0, 0,
	0, 0, 138, 0, 0, 152, 104, 103, 112, 0,
	0, 0, 95, 0, 144, 134, 164, 0, 135, 143,
	116, 156, 139, 163, 197, 171, 154, 170, 84, 153,
	162, 93, 146, 0, 0, 0, 86, 160, 151, 123,
	108, 109, 85, 0, 142, 98, 102, 97, 131, 157,
	158, 96, 89, 169, 88, 90, 168, 130, 155, 161,
	124, 121, 87, 159, 122, 120, 111, 100, 105, 136,
	118, 137, 106, 127, 126, 128, 0, 0, 0, 150,
	166, 178, 0, 0, 172, 173, 174, 175, 0, 0,
	0, 129, 91, 107, 147, 119, 110, 117, 141, 177,
	133, 145, 94, 165, 148, 0, 0, 0, 26, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	132, 0, 83, 0, 114, 176, 140, 101, 167, 99,
	0, 0, 0, 0, 113, 0, 115, 0, 0, 149,
	125, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 56, 0, 0, 0, 81,
	0, 0, 509, 510, 511, 0, 0, 0, 0, 0,
	92, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 196, 0, 0,
	0, 0, 138, 0, 0, 152, 104, 103, 112, 0,
	0, 0, 95, 0, 144, 134, 164, 0, 135, 143,
	116, 156, 139, 163, 197, 171, 154, 170, 84, 153,
	162, 93, 146, 0, 0, 0, 86, 160, 151, 123,
	108, 109, 85, 0, 142, 98, 102, 97, 131, 157,
	158, 96, 89, 169, 88, 90, 168, 130, 155, 161,
	124, 121, 87, 159, 122, 120, 111, 100, 105, 136,
	118, 137, 106, 127, 126, 128, 0, 0, 0, 150,
	166, 178, 0, 0, 172, 173, 174, 175, 0, 0,
	0, 129, 91, 107, 147, 119, 110, 117, 141, 177,
	133, 145, 94, 165, 148, 0, 0, 0, 26, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	132, 0, 83, 0, 114, 176, 140, 101, 167, 99,
	0, 0, 0, 0, 113, 0, 115, 0, 0, 149,
	125, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 56, 0, 0, 0, 194,
	0, 0, 193, 191, 192, 0, 0, 0, 0, 0,
	92, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 196, 0, 0,
	0, 0, 138, 0, 0, 152, 104, 103, 112, 0,
	0, 0, 95, 0, 144, 134, 164, 0, 135, 143,
	116, 156, 139, 163, 197, 171, 154, 170, 84, 153,
	162, 93, 146, 0, 0, 0, 86, 160, 151, 123,
	108, 109, 85, 0, 142, 98, 102, 97, 131, 157,
	158, 96, 89, 169, 88, 90, 168, 130, 155, 161,
	124, 121, 87, 159, 122, 120, 111, 100, 105, 136,
	118, 137, 106, 127, 126, 128, 0, 0, 0, 150,
	166, 178, 0, 0, 172, 173, 174, 175, 0, 0,
	0, 129, 91, 107, 147, 119, 110, 117, 141, 177,
	133, 145, 94, 165, 148, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	132, 0, 83, 0, 114, 176, 140, 101, 167, 99,
	0, 0, 0, 0, 113, 0, 115, 0, 0, 149,
	125, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 81,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	92, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 74, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 77, 78, 0, 73, 0, 0,
	0, 79, 138, 0, 0, 152, 104, 103, 112, 0,
	0, 0, 95, 0, 144, 134, 164, 0, 135, 143,
	116, 156, 139, 163, 75, 171, 154, 170, 84, 153,
	162, 93, 146, 0, 0, 0, 86, 160, 151, 123,
	108, 109, 85, 0, 142, 98, 102, 97, 131, 157,
	158, 96, 89, 169, 88, 90, 168, 130, 155, 161,
	124, 121, 87, 159, 122, 120, 111, 100, 105, 136,
	118, 137, 106, 127, 126, 128, 0, 0, 0, 150,
	166, 178, 0, 0, 172, 173, 174, 175, 0, 0,
	0, 129, 91, 107, 147, 119, 110, 117, 141, 177,
	133, 145, 94, 165, 148, 0, 76, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 83, 0, 114, 176, 140, 101, 167, 132,
	0, 0, 0, 610, 0, 0, 0, 0, 99, 0,
	0, 0, 0, 113, 0, 115, 0, 0, 149, 125,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 194, 0,
	0, 193, 191, 192, 0, 0, 0, 0, 0, 92,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 196, 0, 0, 0,
	0, 138, 0, 0, 152, 104, 103, 112, 0, 0,
	0, 95, 0, 144, 134, 164, 0, 135, 143, 116,
	156, 139, 163, 197, 171, 154, 170, 84, 153, 162,
	93, 146, 0, 0, 0, 86, 160, 151, 123, 108,
	109, 85, 0, 142, 98, 102, 97, 131, 157, 158,
	96, 89, 169, 88, 90, 168, 130, 155, 161, 124,
	121, 87, 159, 122, 120, 111, 100, 105, 136, 118,
	137, 106, 127, 126, 128, 0, 0, 0, 150, 166,
	178, 0, 0, 172, 173, 174, 175, 0, 0, 0,
	129, 91, 107, 147, 119, 110, 117, 141, 177, 133,
	145, 94, 165, 148, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 132,
	0, 83, 0, 114, 176, 140, 101, 167, 99, 0,
	0, 0, 0, 113, 0, 115, 0, 0, 149, 125,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 56, 0, 0, 0, 194, 0,
	0, 193, 191, 192, 0, 0, 0, 0, 0, 92,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 196, 0, 0, 0,
	0, 138, 0, 0, 152, 104, 103, 112, 0, 0,
	0, 95, 0, 144, 134, 164, 0, 135, 143, 116,
	156, 139, 163, 197, 171, 154, 170, 84, 153, 162,
	93, 146, 0, 0, 0, 86, 160, 151, 123, 108,
	109, 85, 0, 142, 98, 102, 97, 131, 157, 158,
	96, 89, 169, 88, 90, 168, 130, 155, 161, 124,
	121, 87, 159, 122, 120, 111, 100, 105, 136, 118,
	137, 106, 127, 126, 128, 0, 0, 0, 150, 166,
	178, 0, 0, 172, 173, 174, 175, 0, 0, 0,
	129, 91, 107, 147, 119, 110, 117, 141, 177, 133,
	145, 94, 165, 148, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 132,
	0, 83, 0, 114, 176, 140, 101, 167, 99, 0,
	630, 0, 0, 113, 0, 115, 0, 0, 149, 125,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 81, 0,
	0, 631, 632, 633, 0, 0, 0, 0, 0, 92,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 196, 0, 0, 0,
	0, 138, 0, 0, 152, 104, 103, 112, 0, 0,
	0, 95, 0, 144, 134, 164, 0, 135, 143, 116,
	156, 139, 163, 197, 171, 154, 170, 84, 153, 162,
	93, 146, 0, 0, 0, 86, 160, 151, 123, 108,
	109, 85, 0, 142, 98, 102, 97, 131, 157, 158,
	96, 89, 169, 88, 90, 168, 130, 155, 161, 124,
	121, 87, 159, 122, 120, 111, 100, 105, 136, 118,
	137, 106, 127, 126, 128, 0, 0, 0, 150, 166,
	178, 0, 0, 172, 173, 174, 175, 0, 0, 0,
	129, 91, 107, 147, 119, 110, 117, 141, 177, 133,
	145, 94, 165, 148, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 83, 0, 114, 176, 140, 101, 167, 132, 0,
	0, 0, 610, 0, 0, 0, 0, 99, 0, 0,
	0, 0, 113, 0, 115, 0, 0, 149, 125, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 194, 0, 0,
	193, 191, 192, 0, 0, 0, 0, 0, 92, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 196, 0, 0, 0, 0,
	138, 0, 0, 152, 104, 103, 112, 0, 0, 0,
	95, 0, 144, 134, 164, 0, 608, 143, 116, 156,
	139, 163, 197, 171, 154, 170, 84, 153, 162, 93,
	146, 0, 0, 0, 86, 160, 151, 123, 108, 109,
	85, 0, 142, 98, 102, 97, 131, 157, 158, 96,
	89, 169, 88, 90, 168, 130, 155, 161, 124, 121,
	87, 159, 122, 120, 111, 100, 105, 136, 118, 137,
	106, 127, 126, 128, 0, 0, 0, 150, 166, 178,
	0, 0, 172, 173, 174, 175, 0, 0, 0, 129,
	91, 107, 147, 119, 110, 117, 141, 177, 133, 145,
	94, 165, 148, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 132,
	83, 0, 114, 176, 140, 101, 167, 588, 99, 0,
	0, 0, 0, 113, 0, 115, 0, 0, 149, 125,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 194, 0,
	0, 193, 191, 192, 0, 0, 0, 0, 0, 92,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 196, 0, 0, 0,
	0, 138, 0, 0, 152, 104, 103, 112, 0, 0,
	0, 95, 0, 144, 134, 164, 0, 135, 143, 116,
	156, 139, 163, 197, 171, 154, 170, 84, 153, 162,
	93, 146, 0, 0, 0, 86, 160, 151, 123, 108,
	109, 85, 0, 142, 98, 102, 97, 131, 157, 158,
	96, 89, 169, 88, 90, 168, 130, 155, 161, 124,
	121, 87, 159, 122, 120, 111, 100, 105, 136, 118,
	137, 106, 127, 126, 128, 0, 0, 0, 150, 166,
	178, 0, 0, 172, 173, 174, 175, 0, 0, 0,
	129, 91, 107, 147, 119, 110, 117, 141, 177, 133,
	145, 94, 165, 148, 0, 0, 0, 0, 0, 0,
	0, 0, 321, 0, 0, 0, 0, 0, 0, 132,
	0, 83, 0, 114, 176, 140, 101, 167, 99, 0,
	0, 0, 0, 113, 0, 115, 0, 0, 149, 125,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 194, 0,
	0, 193, 191, 192, 0, 0, 0, 0, 0, 92,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 196, 0, 0, 0,
	0, 138, 0, 0, 152, 104, 103, 112, 0, 0,
	0, 95, 0, 144, 134, 164, 0, 135, 143, 116,
	156, 139, 163, 197, 171, 154, 170, 84, 153, 162,
	93, 146, 0, 0, 0, 86, 160, 151, 123, 108,
	109, 85, 0, 142, 98, 102, 97, 131, 157, 158,
	96, 89, 169, 88, 90, 168, 130, 155, 161, 124,
	121, 87, 159, 122, 120, 111, 100, 105, 136, 118,
	137, 106, 127, 126, 128, 0, 0, 0, 150, 166,
	178, 0, 0, 172, 173, 174, 175, 0, 0, 0,
	129, 91, 107, 147, 119, 110, 117, 141, 177, 133,
	145, 94, 165, 148, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 132,
	0, 83, 0, 114, 176, 140, 101, 167, 99, 0,
	0, 0, 0, 113, 0, 115, 0, 0, 149, 125,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 194, 0,
	0, 193, 191, 192, 0, 0, 0, 0, 0, 92,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 188, 0, 196, 0, 0, 0,
	0, 138, 0, 0, 152, 104, 103, 112, 0, 0,
	0, 95, 0, 144, 134, 164, 0, 135, 143, 116,
	156, 139, 163, 197, 171, 154, 170, 84, 153, 162,
	93, 146, 0, 0, 0, 86, 160, 151, 123, 108,
	109, 85, 0, 142, 98, 102, 97, 131, 157, 158,
	96, 89, 169, 88, 90, 168, 130, 155, 161, 124,
	121, 87, 159, 122, 120, 111, 100, 105, 136, 118,
	137, 106, 127, 126, 128, 0, 0, 0, 150, 166,
	178, 0, 0, 172, 173, 174, 175, 0, 0, 0,
	129, 91, 107, 147, 119, 110, 117, 141, 177, 133,
	145, 94, 165, 148, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 132,
	0, 83, 0, 114, 176, 140, 101, 167, 99, 0,
	0, 0, 0, 113, 0, 115, 0, 0, 149, 125,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 81, 0,
	0, 509, 510, 511, 0, 0, 0, 0, 0, 92,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 196, 0, 0, 0,
	0, 138, 0, 0, 152, 104, 103, 112, 0, 0,
	0, 95, 0, 144, 134, 164, 0, 135, 143, 116,
	156, 139, 163, 197, 171, 154, 170, 84, 153, 162,
	93, 146, 0, 0, 0, 86, 160, 151, 123, 108,
	109, 85, 0, 142, 98, 102, 97, 131, 157, 158,
	96, 89, 169, 88, 90, 168, 130, 155, 161, 124,
	121, 87, 159, 122, 120, 111, 100, 105, 136, 118,
	137, 106, 127, 126, 128, 0, 0, 0, 150, 166,
	178, 0, 0, 172, 173, 174, 175, 0, 0, 0,
	129, 91, 107, 147, 119, 110, 117, 141, 177, 133,
	145, 94, 165, 148, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 132,
	0, 83, 0, 114, 176, 140, 101, 167, 99, 0,
	0, 0, 0, 113, 0, 115, 0, 0, 149, 125,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 255, 0,
	0, 193, 191, 192, 0, 0, 0, 0, 0, 92,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 196, 0, 0, 0,
	0, 138, 0, 0, 152, 104, 103, 112, 0, 0,
	0, 95, 0, 144, 134, 164, 0, 135, 143, 116,
	156, 139, 163, 197, 171, 154, 170, 84, 153, 162,
	93, 146, 0, 0, 0, 86, 160, 151, 123, 108,
	109, 85, 0, 142, 98, 102, 97, 131, 157, 158,
	96, 89, 169, 88, 90, 168, 130, 155, 161, 124,
	121, 87, 159, 122, 120, 111, 100, 105, 136, 118,
	137, 106, 127, 126, 128, 0, 0, 0, 150, 166,
	178, 0, 0, 172, 173, 174, 175, 0, 0, 0,
	129, 91, 107, 147, 119, 110, 117, 141, 177, 133,
	145, 94, 165, 148, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 132,
	0, 83, 0, 114, 176, 140, 101, 167, 99, 0,
	0, 0, 0, 113, 0, 115, 0, 0, 149, 125,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 194, 0,
	0, 193, 191, 192, 0, 0, 0, 0, 0, 92,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 196, 0, 0, 0,
	0, 138, 0, 0, 152, 104, 103, 112, 0, 0,
	0, 95, 0, 144, 134, 164, 0, 135, 143, 116,
	156, 139, 163, 197, 171, 154, 170, 84, 153, 162,
	93, 146, 0, 0, 0, 86, 160, 151, 123, 108,
	109, 85, 0, 142, 98, 102, 97, 131, 157, 158,
	96, 89, 169, 88, 90, 168, 130, 155, 161, 124,
	121, 87, 159, 122, 120, 111, 100, 105, 136, 118,
	137, 106, 127, 126, 128, 0, 0, 0, 150, 166,
	178, 0, 0, 172, 173, 174, 175, 0, 0, 0,
	129, 91, 107, 147, 119, 110, 117, 141, 177, 133,
	145, 94, 165, 148, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 132,
	0, 83, 0, 114, 176, 140, 101, 167, 99, 0,
	0, 0, 0, 113, 0, 115, 0, 0, 149, 125,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 81, 0,
	0, 0, 0, 0, 750, 0, 0, 751, 0, 92,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 196, 0, 0, 0,
	0, 138, 0, 0, 152, 104, 103, 112, 0, 0,
	0, 95, 0, 144, 134, 164, 0, 135, 143, 116,
	156, 139, 163, 197, 171, 154, 170, 84, 153, 162,
	93, 146, 0, 0, 0, 86, 160, 151, 123, 108,
	109, 85, 0, 142, 98, 102, 97, 131, 157, 158,
	96, 89, 169, 88, 90, 168, 130, 155, 161, 124,
	121, 87, 159, 122, 120, 111, 100, 105, 136, 118,
	137, 106, 127, 126, 128, 0, 0, 0, 150, 166,
	178, 0, 0, 172, 173, 174, 175, 0, 0, 0,
	129, 91, 107, 147, 119, 110, 117, 141, 177, 133,
	145, 94, 165, 148, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 132,
	0, 83, 0, 114, 176, 140, 101, 167, 99, 0,
	0, 0, 0, 113, 0, 115, 0, 0, 149, 125,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 81, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 92,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 196, 0, 0, 0,
	0, 138, 0, 0, 152, 104, 103, 112, 0, 0,
	0, 95, 0, 144, 134, 164, 0, 135, 143, 116,
	156, 139, 163, 197, 171, 154, 170, 84, 153, 162,
	93, 146, 0, 0, 0, 86, 160, 151, 123, 108,
	109, 85, 0, 142, 98, 102, 97, 131, 157, 158,
	96, 89, 169, 88, 90, 168, 130, 155, 161, 124,
	121, 87, 159, 122, 120, 111, 100, 105, 136, 118,
	137, 106, 127, 126, 128, 0, 0, 0, 150, 166,
	178, 0, 0, 172, 173, 174, 175, 0, 0, 0,
	129, 91, 107, 147, 119, 110, 117, 141, 177, 133,
	145, 94, 165, 148, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 83, 0, 114, 176, 140, 101, 167,
}

var yyPact = [...]int{
	1845, -1000, -200, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, 826, 848, -1000, -1000, -1000, -1000,
	-1000, -1000, 676, 8472, 66, 98, -38, 10241, 96, 1364,
	10991, -1000, -12, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-19, 10991, 474, 608, -1000, -1000, -1000, -1000, -1000, 820,
	823, 694, 809, 729, -1000, 5933, 60, 8981, 9991, 4897,
	-1000, 471, 89, 10991, -164, 11491, 53, 53, 53, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 93,
	10991, -1000, 10991, 51, 470, 51, 51, 51, 10991, -1000,
	136, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 10991, 468,
	773, 92, 3809, 3809, 3809, 3809, 5, 3, 3809, -120,
	-96, 697, -1000, -1000, -1000, -1000, 3809, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 10991, 675,
	679, 409, 781, 6713, 6713, 826, -1000, 608, -1000, -1000,
	-1000, 774, -1000, -1000, 358, 836, -1000, 7722, 134, -1000,
	6713, 1943, 648, -1000, -1000, -1000, -1000, 648, 110, 298,
	-1000, -1000, -1000, 7213, 7213, 7213, 7213, 7213, 7213, -1000,
	-1000, -1000, -1000, -1000, -1000, 648, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 6454, 7463,
	648, 648, 648, 648, 648, 648, 648, 648, 6713, 648,
	648, 648, 648, 648, 648, 648, 648, 648, 648, 648,
	648, 648, 9741, 609, 674, -1000, -1000, -1000, 806, 8222,
	9490, 10991, 631, -1000, 641, 4625, -13, -129, -1000, 76,
	-1000, -1000, -1000, 182, 9231, -1000, -1000, 772, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, 569, -1000, 2100, 460, 3809, 67, 577, 448, 247,
	444, 10991, 10991, 3809, 73, 10991, 793, 693, 10991, 442,
	441, -1000, 3537, -1000, 3809, 3809, 3809, 3809, 3809, 3809,
	3809, 3809, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 3809,
	3809, 3809, 3809, -1000, -122, -70, -1000, 10991, -1000, -1000,
	91, 91, 2100, 10991, -1000, -1000, -1000, 843, 160, 331,
	133, 645, -1000, 407, 820, 409, 729, 11241, 708, -1000,
	-1000, 10991, -1000, 6713, 6713, 378, -1000, 10491, -1000, -1000,
	-1000, -1000, -1000, 2993, 166, 7213, 376, 299, 7213, 7213,
	7213, 7213, 7213, 7213, 7213, 7213, 7213, 7213, 7213, 7213,
	7213, 7213, 7213, 417, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, 439, -1000, 608, 717, 717, 325, -1000, 143,
	-1000, 143, 143, 143, 143, 143, 5156, 409, 567, 272,
	6454, -1000, 1841, 5933, 5933, 6713, 6713, 10741, 10741, 5933,
	796, 189, 272, 10741, -1000, 409, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, 5933, 5933, 5933, 5933, 165, 10991, -1000,
	10741, 8981, 8981, 8981, 8981, 8981, -1000, 726, 724, -1000,
	713, 710, 719, 10991, -1000, 564, 8222, 171, 648, -1000,
	10991, -1000, 32, 504, 8981, 10991, -1000, -1000, 4625, 641,
	-129, 634, -1000, -127, -135, 7213, 6192, 142, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, 2721, 190, 273, -83, -1000,
	-1000, -1000, -1000, 651, -1000, 651, 651, 651, 651, -56,
	-56, -56, -56, -1000, -1000, -1000, -1000, -1000, 667, 660,
	-1000, 651, 651, 651, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, 655, 655, 655, 652, 652, 678, -1000, 10991, -183,
	435, 3809, 792, 3809, -1000, 213, -1000, 10991, -1000, -1000,
	10991, 3809, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	266, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, 558, -1000, 639, -1000, -1000, 747, 6713, 6713,
	3265, 6713, -1000, -1000, -1000, 781, -1000, 796, 821, -1000,
	765, 764, 5933, -1000, -1000, 166, 270, -1000, -1000, 347,
	-1000, -1000, -1000, -1000, 131, 648, -1000, 2080, -1000, -1000,
	-1000, -1000, 376, 7213, 7213, 7213, 65, 2080, 2054, 1213,
	1513, 143, 235, 235, 144, 144, 144, 144, 144, 795,
	795, -1000, -1000, -1000, 409, 298, -1000, -1000, 298, -1000,
	409, 5933, 636, -1000, -1000, 6713, -1000, 409, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 548,
	548, 322, 353, 637, -1000, 119, 615, 548, 5933, 300,
	-1000, 6713, 409, -1000, 548, 409, 548, 548, 575, 763,
	648, -1000, 626, -1000, 178, 674, 672, 688, 499, -1000,
	-1000, -1000, -1000, 723, -1000, 720, -1000, -1000, -1000, -1000,
	-1000, 85, 83, 79, 11491, -1000, 833, 8981, 579, -1000,
	-1000, 64, 634, -129, -138, -1000, -1000, 1563, -1000, 272,
	-1000, 424, 610, 2449, -1000, -1000, -1000, -1000, -1000, -1000,
	654, 783, 197, 186, 433, -1000, -1000, 775, -1000, 260,
	-87, -1000, -1000, 391, -56, -56, -1000, -1000, 142, 771,
	142, 142, 142, 406, 406, -1000, -1000, -1000, -1000, 390,
	-1000, -1000, -1000, 383, -1000, 687, 11491, 3809, -1000, 4353,
	-1000, -1000, -1000, -1000, -1000, -1000, 714, 256, 180, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	31, -1000, 3809, -1000, 302, 10991, 10991, 2100, 805, 10991,
	736, 272, 272, 116, -1000, -1000, 10991, -1000, -1000, -1000,
	-1000, 595, -1000, -1000, -1000, 4081, 5933, -1000, 65, 2080,
	2038, -1000, 7213, 7213, -1000, -1000, 548, 5933, 272, -1000,
	-1000, -1000, 128, 417, 128, 7213, 7213, 3265, 7213, 7213,
	-177, 621, 181, -1000, 6713, 328, -1000, -1000, -1000, -1000,
	-1000, 686, 10741, 648, -1000, 7972, -1000, 11491, 826, 10741,
	6713, 6713, -1000, -1000, 6713, 653, -1000, 6713, -1000, -1000,
	-1000, 648, 648, 648, 530, -1000, 826, 579, -1000, 7213,
	-1000, -1000, -130, -141, -1000, 7213, -1000, -1000, 2721, -1000,
	2721, 11491, -1000, 431, 412, -1000, -1000, 683, 95, -1000,
	-1000, -1000, 493, 142, 142, -1000, 204, -1000, -1000, -1000,
	546, -1000, 543, 587, 535, 10991, -1000, -1000, 581, -1000,
	177, -1000, -1000, 11491, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, 11491, 10991, -1000, -1000,
	-1000, -1000, -1000, 11491, -1000, -1000, 406, 6713, -1000, -1000,
	-1000, 91, -1000, -1000, 4353, -1000, 833, 8981, -1000, -1000,
	409, -1000, 7213, 2080, 2080, -1000, -1000, 409, 651, 651,
	-1000, 651, 652, -1000, 651, -27, 651, -29, 648, 409,
	409, 1978, 1996, -1000, 1959, 1679, 648, -173, -1000, 272,
	6713, -198, 786, 576, 550, -1000, -1000, 5674, 409, 533,
	115, 530, 820, -1000, 272, 272, 272, 11491, 272, 11491,
	11491, 11491, 8731, 11491, 820, -1000, 2080, -1000, -1000, -1000,
	2080, 2449, -1000, 516, -1000, 651, -1000, -1000, -79, 841,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -56, 406, -56, 382, -1000, 379, 3809, 4353, 2721,
	-1000, 650, -1000, -1000, -1000, -1000, 788, -1000, 272, -1000,
	831, 578, -1000, 2080, -1000, -1000, 112, -1000, -1000, -1000,
	-1000, -1000, -1000, 374, -1000, -1000, -1000, 7213, 7213, -1000,
	7213, 7213, 7213, 409, 406, 272, -1000, 5415, 782, -1000,
	648, -1000, -1000, 604, 10491, 10491, -1000, -1000, 510, -1000,
	508, 508, 508, 171, -1000, -1000, 163, 11491, -1000, 172,
	-1000, -151, 142, -1000, 142, 484, 477, -1000, -1000, -1000,
	11491, 648, 828, 822, -1000, -1000, 409, 1342, 1342, 1342,
	1342, 13, -1000, -1000, -1000, 524, 839, -1000, 648, -1000,
	608, 113, -1000, 11491, -1000, -1000, -1000, -1000, -1000, 163,
	-1000, 384, 174, 406, -1000, 334, 778, -1000, 777, -1000,
	-1000, -1000, -1000, -1000, 500, 30, -1000, 6713, 6713, -1000,
	-1000, -1000, -1000, -1000, 409, 46, -191, 10741, 550, 409,
	10491, -1000, -1000, -1000, 372, -1000, -1000, -1000, 406, -1000,
	-1000, 577, 482, -1000, 11491, 272, 524, -1000, 734, -181,
	-194, 506, -1000, -1000, -1000, -1000, -183, -1000, 30, 752,
	-1000, 732, -1000, -1000, -1000, 25, -189, 1, -192, 648,
	-195, 6963, -1000, 1342, 409, -1000, -1000,
}

var yyPgo = [...]int{
	0, 1083, 13, 34, 1082, 1078, 1075, 872, 859, 854,
	1074, 1073, 1072, 1070, 1069, 1068, 1067, 1066, 1064, 1059,
	1053, 1052, 1051, 1050, 1049, 1036, 1035, 144, 1034, 1032,
	1030, 60, 1025, 76, 1023, 1020, 33, 171, 40, 56,
	557, 1019, 19, 64, 88, 1016, 44, 1015, 1013, 77,
	1012, 57, 1011, 1009, 1290, 1008, 1007, 12, 23, 1006,
	1004, 1003, 1002, 70, 1139, 1001, 1000, 998, 997, 996,
	995, 53, 9, 11, 21, 15, 994, 58, 8, 993,
	45, 992, 990, 986, 985, 29, 984, 46, 983, 31,
	47, 981, 17, 66, 35, 16, 6, 69, 50, 980,
	30, 55, 43, 979, 978, 463, 975, 974, 972, 971,
	969, 968, 150, 404, 967, 965, 964, 962, 38, 51,
	363, 154, 75, 961, 960, 7, 959, 1253, 65, 61,
	18, 958, 24, 1318, 36, 957, 956, 955, 947, 42,
	943, 37, 942, 939, 935, 934, 933, 930, 928, 63,
	913, 912, 911, 25, 27, 910, 909, 49, 28, 908,
	907, 904, 41, 59, 901, 48, 899, 898, 896, 894,
	26, 20, 893, 10, 892, 5, 891, 890, 2, 889,
	22, 888, 3, 887, 4, 39, 884, 883, 32, 882,
	881, 52, 879, 876, 875, 874, 0, 347, 870, 857,
	86,
}

var yyR1 = [...]int{
	0, 194, 195, 195, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 2, 2, 2, 6, 3,
	4, 4, 5, 5, 7, 7, 7, 30, 30, 8,
	9, 9, 9, 198, 198, 49, 49, 93, 93, 10,
	10, 10, 10, 98, 98, 102, 102, 102, 103, 103,
	103, 103, 137, 137, 135, 135, 11, 11, 11, 11,
	11, 11, 11, 184, 184, 183, 182, 182, 181, 181,
	180, 16, 167, 168, 168, 168, 163, 140, 140, 141,
	141, 141, 141, 141, 148, 144, 144, 142, 142, 142,
	142, 142, 142, 142, 143, 143, 143, 143, 143, 145,
	145, 145, 145, 145, 146, 146, 146, 146, 146, 146,
	146, 146, 146, 146, 146, 146, 146, 146, 146, 147,
	147, 147, 147, 147, 147, 147, 147, 162, 162, 149,
	149, 157, 157, 158, 158, 158, 155, 155, 156, 156,
	159, 159, 159, 150, 150, 150, 150, 150, 150, 150,
	152, 152, 160, 160, 153, 153, 153, 154, 154, 154,
	161, 161, 161, 161, 161, 151, 151, 164, 164, 176,
	176, 175, 175, 175, 166, 166, 172, 172, 172, 172,
	172, 165, 165, 174, 174, 173, 169, 169, 169, 170,
	170, 170, 171, 171, 171, 12, 12, 12, 12, 12,
	12, 12, 12, 12, 185, 185, 185, 185, 185, 185,
	185, 185, 185, 185, 185, 179, 177, 177, 178, 178,
	13, 14, 14, 14, 14, 14, 15, 15, 17, 18,
	18, 18, 18, 18, 18, 18, 18, 18, 18, 18,
	18, 18, 18, 18, 18, 18, 18, 18, 18, 18,
	18, 18, 18, 18, 18, 110, 110, 107, 107, 108,
	108, 109, 109, 109, 111, 111, 111, 138, 138, 136,
	136, 136, 19, 19, 21, 21, 22, 23, 20, 20,
	20, 20, 20, 24, 25, 25, 25, 188, 188, 188,
	188, 188, 188, 26, 26, 189, 189, 199, 27, 28,
	28, 29, 29, 29, 33, 33, 33, 31, 31, 32,
	32, 38, 38, 37, 37, 39, 39, 39, 39, 123,
	123, 123, 125, 125, 125, 125, 122, 41, 41, 42,
	42, 43, 43, 44, 44, 44, 56, 56, 92, 92,
	94, 94, 45, 45, 45, 45, 46, 46, 47, 47,
	48, 48, 131, 131, 130, 130, 130, 129, 50, 50,
	50, 52, 51, 51, 51, 51, 53, 53, 55, 55,
	54, 54, 57, 57, 57, 57, 58, 58, 40, 40,
	40, 40, 40, 40, 40, 106, 106, 60, 60, 59,
	59, 59, 59, 59, 59, 59, 59, 59, 59, 70,
	70, 70, 70, 70, 70, 61, 61, 61, 61, 61,
	61, 61, 36, 36, 71, 71, 71, 77, 72, 72,
	64, 64, 64, 64, 64, 64, 64, 64, 64, 64,
	64, 64, 64, 64, 64, 64, 64, 64, 64, 64,
	64, 64, 64, 64, 64, 64, 64, 64, 64, 64,
	64, 64, 193, 192, 68, 68, 68, 66, 66, 66,
	66, 66, 66, 66, 66, 66, 66, 66, 66, 66,
	66, 66, 67, 67, 67, 67, 67, 67, 67, 67,
	200, 200, 69, 69, 69, 69, 34, 34, 34, 34,
	34, 134, 134, 139, 139, 139, 139, 139, 139, 139,
	139, 139, 139, 139, 139, 139, 139, 81, 81, 35,
	35, 79, 79, 80, 82, 82, 78, 78, 78, 63,
	63, 63, 63, 63, 63, 63, 63, 63, 63, 63,
	63, 63, 186, 186, 65, 65, 65, 83, 83, 84,
	84, 85, 85, 86, 86, 87, 88, 88, 88, 89,
	89, 89, 89, 90, 90, 90, 62, 62, 62, 62,
	62, 62, 91, 91, 91, 91, 95, 95, 73, 73,
	75, 75, 74, 76, 187, 187, 187, 96, 96, 100,
	97, 97, 97, 101, 101, 101, 101, 99, 99, 99,
	126, 126, 126, 104, 104, 112, 112, 113, 113, 105,
	105, 114, 114, 114, 114, 114, 114, 114, 114, 114,
	114, 115, 115, 115, 116, 116, 117, 117, 117, 124,
	124, 120, 120, 121, 121, 127, 127, 127, 127, 127,
	128, 128, 190, 190, 190, 190, 190, 190, 190, 190,
	190, 190, 190, 190, 190, 190, 190, 190, 190, 190,
	190, 190, 118, 118, 118, 118, 118, 118, 118, 118,
	118, 118, 118, 118, 118, 118, 118, 118, 118, 118,
	118, 118, 118, 118, 118, 118, 118, 118, 118, 118,
	118, 118, 118, 118, 118, 118, 118, 118, 118, 118,
	118, 118, 118, 118, 118, 118, 118, 118, 118, 118,
	118, 118, 118, 118, 118, 118, 118, 118, 118, 118,
	118, 118, 118, 118, 118, 118, 118, 118, 118, 118,
	118, 118, 118, 118, 118, 118, 118, 118, 118, 118,
	118, 118, 118, 118, 118, 118, 118, 118, 118, 118,
	118, 118, 118, 118, 119, 119, 119, 119, 119, 119,
	119, 119, 119, 119, 119, 119, 119, 119, 119, 119,
	119, 119, 119, 119, 119, 119, 119, 119, 119, 119,
	119, 119, 119, 119, 119, 119, 119, 119, 119, 119,
	119, 119, 119, 119, 119, 119, 119, 119, 119, 119,
	119, 119, 119, 119, 119, 119, 119, 119, 119, 119,
	119, 119, 119, 119, 119, 119, 119, 119, 119, 119,
	119, 119, 119, 119, 119, 119, 119, 119, 119, 119,
	119, 119, 119, 119, 119, 119, 119, 119, 119, 119,
	119, 119, 119, 119, 119, 119, 119, 119, 119, 119,
	119, 119, 191, 191, 191, 196, 197, 132, 133, 133,
	133,
}

var yyR2 = [...]int{
	0, 2, 0, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 4, 6, 7, 5, 10,
	1, 3, 1, 3, 8, 8, 6, 1, 1, 8,
	8, 7, 6, 1, 1, 1, 3, 0, 4, 3,
	4, 5, 4, 1, 3, 3, 2, 2, 2, 2,
	2, 1, 1, 1, 1, 1, 2, 8, 4, 6,
	5, 5, 5, 0, 2, 1, 0, 2, 1, 3,
	3, 4, 4, 1, 3, 3, 8, 1, 3, 3,
	1, 1, 1, 1, 1, 2, 1, 1, 1, 1,
	1, 1, 1, 1, 2, 2, 2, 2, 2, 1,
	2, 2, 2, 1, 4, 4, 2, 2, 3, 3,
	3, 3, 1, 1, 1, 1, 1, 6, 6, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 3, 0,
	3, 0, 5, 0, 3, 5, 0, 1, 0, 1,
	0, 1, 2, 0, 2, 2, 2, 2, 2, 2,
	0, 3, 0, 1, 0, 3, 3, 0, 2, 2,
	0, 2, 1, 2, 1, 0, 2, 5, 4, 1,
	2, 2, 3, 2, 0, 1, 2, 3, 3, 2,
	2, 1, 1, 1, 3, 2, 0, 1, 3, 1,
	2, 3, 1, 1, 1, 6, 7, 7, 12, 7,
	7, 7, 4, 5, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 7, 1, 3, 8, 8,
	5, 4, 6, 5, 4, 4, 3, 2, 3, 4,
	4, 4, 4, 4, 4, 4, 4, 3, 3, 3,
	3, 4, 4, 3, 4, 6, 4, 4, 2, 4,
	2, 2, 2, 2, 3, 1, 1, 0, 1, 0,
	1, 0, 2, 2, 0, 2, 2, 1, 1, 0,
	1, 1, 2, 1, 1, 2, 1, 1, 2, 2,
	2, 2, 2, 3, 4, 4, 7, 1, 1, 1,
	1, 1, 1, 2, 4, 1, 3, 0, 2, 0,
	2, 1, 2, 2, 0, 1, 1, 0, 1, 0,
	1, 0, 1, 1, 3, 1, 2, 3, 5, 0,
	1, 2, 1, 1, 1, 1, 1, 0, 2, 1,
	3, 1, 1, 1, 3, 3, 3, 7, 1, 3,
	1, 3, 4, 4, 4, 3, 2, 4, 0, 1,
	0, 2, 0, 1, 0, 1, 2, 1, 1, 2,
	2, 1, 2, 3, 2, 3, 2, 2, 2, 1,
	1, 3, 0, 5, 5, 5, 0, 2, 1, 3,
	3, 2, 3, 1, 2, 0, 3, 1, 1, 3,
	3, 4, 4, 5, 3, 4, 5, 6, 2, 1,
	2, 1, 2, 1, 2, 1, 1, 1, 1, 1,
	1, 1, 0, 2, 1, 1, 1, 3, 1, 3,
	1, 1, 1, 1, 1, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	2, 2, 2, 2, 2, 2, 1, 1, 1, 1,
	1, 1, 2, 3, 4, 5, 6, 4, 4, 6,
	6, 6, 6, 8, 8, 6, 8, 8, 9, 7,
	5, 4, 2, 2, 2, 2, 2, 2, 2, 2,
	0, 2, 4, 4, 4, 4, 0, 3, 4, 7,
	3, 1, 1, 2, 3, 3, 1, 2, 2, 1,
	2, 1, 2, 2, 1, 2, 4, 0, 1, 0,
	2, 1, 2, 4, 0, 2, 1, 3, 5, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	2, 1, 1, 2, 1, 2, 2, 0, 3, 0,
	2, 0, 3, 1, 3, 2, 0, 1, 1, 0,
	2, 4, 4, 0, 2, 4, 2, 1, 3, 5,
	4, 6, 1, 3, 3, 5, 0, 5, 1, 3,
	1, 2, 3, 1, 0, 2, 2, 1, 3, 3,
	1, 3, 5, 3, 3, 3, 3, 1, 2, 1,
	1, 1, 1, 1, 1, 0, 2, 0, 3, 0,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 0, 1, 1, 1, 1, 0, 1, 1, 0,
	2, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 0, 0, 1,
	1,
}

var yyChk = [...]int{
	-1000, -194, -1, -2, -6, -7, -8, -9, -10, -11,
	-12, -13, -14, -15, -17, -18, -19, -21, -22, -23,
	-20, -24, -25, -26, -3, -4, 6, 7, -30, 9,
	10, 30, -16, 136, 137, 139, 138, 164, 140, 157,
	49, 176, 177, 179, 180, 25, 158, 159, 162, 163,
	181, 182, 183, -196, 8, 262, 53, -195, 278, -85,
	15, -29, 5, -27, -199, -27, -27, -27, -27, -27,
	-167, 53, -117, 145, 95, 172, 254, 142, 143, 149,
	-120, 57, -119, 270, 176, 190, 184, 210, 202, 200,
	203, 240, 68, 179, 250, 160, 199, 195, 193, 27,
	215, 275, 194, 155, 154, 216, 220, 241, 188, 189,
	244, 214, 156, 32, 272, 34, 168, 245, 218, 243,
	213, 209, 212, 187, 208, 38, 222, 221, 223, 239,
	205, 196, 18, 248, 163, 166, 217, 219, 150, 170,
	274, 246, 192, 167, 162, 249, 180, 242, 252, 37,
	227, 186, 153, 177, 174, 206, 169, 197, 198, 211,
	185, 207, 178, 171, 164, 251, 228, 276, 204, 201,
	175, 173, 232, 233, 234, 235, 273, 247, 229, -105,
	145, 147, 143, 143, 144, 145, 254, 142, 143, -54,
	-127, 61, 62, 60, 57, -119, 145, 172, 143, 131,
	203, 136, 230, 144, 32, 170, -136, -138, 143, 178,
	-107, 173, 232, 233, 234, 235, 57, 242, 241, 243,
	236, -127, 178, -132, -132, -132, -132, -132, 182, -127,
	57, -2, -89, 17, 16, -5, -3, -196, 6, 20,
	21, -33, 39, 40, -28, -39, 122, -40, -127, -59,
	97, -64, 29, 61, 60, 57, -119, 23, -78, -63,
	-60, -76, -77, 131, 132, 120, 121, 128, 98, -192,
	-193, -68, -66, -67, -69, -120, 59, 69, 63, 64,
	65, 66, 72, 58, 70, 73, 74, -74, -196, 56,
	43, 44, 263, 264, 265, 266, 269, 267, 100, 33,
	253, 261, 260, 259, 257, 258, 255, 256, 148, 254,
	126, 262, -105, -42, -43, -44, -45, -56, -77, -196,
	-54, 11, -49, -54, -97, -137, -135, 178, -101, -120,
	243, 242, 241, -121, -99, -118, 240, 203, 239, 141,
	96, 22, 24, 225, 99, 131, 16, 100, 130, 263,
	136, 47, 255, 256, 253, 265, 266, 254, 230, 29,
	10, 25, 158, 21, 124, 138, 103, 104, 161, 23,
	159, 74, 19, 50, 11, 13, 14, 148, 147, 115,
	144, 45, 8, 56, 26, 112, 41, 28, 43, 113,
	17, 257, 258, 31, 269, 165, 126, 48, 35, 97,
	72, 51, 95, 15, 46, 114, 139, 262, 44, 142,
	6, 268, 30, 157, 42, 143, 231, 102, 146, 73,
	5, 149, 9, 49, 52, 259, 260, 261, 33, 101,
	12, -168, -163, 57, 144, -54, 262, -120, -113, 148,
	-113, -113, 143, -54, -54, -112, 148, 57, -112, -112,
	-112, -54, 133, -54, 57, 30, 254, 57, 170, 143,
	171, 145, -133, -196, -121, -120, -133, -133, -133, 174,
	175, 174, 175, -133, 244, -108, 237, 51, -133, -127,
	11, 22, -196, 52, -197, 55, -90, 19, 31, -40,
	-127, -86, -87, -40, -85, -2, -27, 35, -31, 21,
	67, 11, -123, 96, 95, 112, -122, 22, -125, 60,
	61, 62, -120, 133, -40, -61, 115, 97, 113, 114,
	99, 117, 116, 127, 120, 121, 122, 123, 124, 125,
	126, 118, 119, 130, 105, 106, 107, 108, 109, 110,
	111, -106, -196, -77, -196, 134, 135, -186, 71, -64,
	29, -64, -64, -64, -64, -64, -196, -2, -72, -40,
	-196, 60, -64, -196, -196, -196, -196, -196, -196, -196,
	-196, -81, -40, -196, -200, -196, -200, -200, -200, -200,
	-200, -200, -200, -196, -196, -196, -196, -55, 26, -54,
	30, 54, -50, -52, -51, -53, 41, 45, 47, 42,
	43, 44, 48, -131, 22, -42, -196, -130, 166, -129,
	22, -127, -54, -49, -198, 54, 11, 52, 54, -97,
	178, -98, -102, 244, 246, 146, 105, -126, -120, -191,
	29, 60, 61, 62, 30, 55, 54, -141, -144, -146,
	-145, -147, -148, -142, -143, 200, 201, 131, 204, 206,
	207, 208, 209, 210, 211, 212, 213, 214, 215, 30,
	160, 197, 198, 199, 94, 216, 217, 218, 219, 220,
	221, 222, 223, 202, 184, 185, 186, 187, 188, 189,
	190, 192, 193, 194, 195, 196, 57, -133, 145, -184,
	52, 57, 97, 57, -54, -54, -133, 146, -54, 23,
	51, -54, 57, 57, -128, -127, -118, -133, -133, -133,
	-133, -133, -133, -133, -133, -133, -133, -133, -133, 245,
	-110, 231, 238, -54, -188, -3, -7, -9, -8, 57,
	-191, -188, -140, -141, -189, -127, 9, 115, 54, 18,
	133, 54, -88, 24, 25, -89, -197, -33, -65, -120,
	63, 66, -32, 42, -54, -40, -40, -70, 72, 97,
	73, 74, -122, 122, -128, -121, -118, -64, -71, -74,
	-77, 71, 115, 113, 114, 99, -64, -64, -64, -64,
	-64, -64, -64, -64, -64, -64, -64, -64, -64, -64,
	-64, -134, 57, -191, 57, -63, 60, 61, -63, 71,
	-38, 21, -37, -39, -197, 54, -197, -2, -190, 75,
	76, 77, 78, 79, 80, 81, 82, 94, 83, 84,
	85, 86, 87, 88, 89, 90, 91, 92, 93, -37,
	-37, -40, -40, -78, -120, -127, -78, -37, -31, -79,
	-80, 101, -78, -197, -37, -38, -37, -37, -93, 29,
	166, -54, -96, -100, -78, -43, -44, -44, -43, -44,
	41, 41, 41, 46, 41, 46, 41, -51, -127, -197,
	-57, 49, 147, 50, -196, -129, -93, 52, -42, -54,
	-101, -120, -98, 54, 245, 247, 248, -64, 51, -40,
	-154, 130, -169, -170, -171, -121, -191, 63, -163, -164,
	-172, 150, 153, 149, -165, 144, 28, -159, 72, 97,
	-155, 228, -149, 53, -149, -149, -149, -149, -153, 203,
	-153, -153, -153, 53, 53, -149, -149, -149, -157, 53,
	-157, -157, -158, 53, -158, -124, 52, -54, -182, 273,
	-183, 57, -133, 23, -133, -114, 141, 138, 139, -179,
	137, 225, 203, 68, 29, 15, 263, 166, 276, 57,
	167, -54, -54, -133, -109, 11, 115, 54, -197, 54,
	37, -40, -40, -128, -87, -90, -104, 19, 11, 33,
	33, -37, 72, 73, 74, 133, -196, -71, -64, -64,
	-64, -36, 161, 96, -197, -197, -37, 54, -40, -197,
	-197, -197, 54, 52, 22, 54, 11, 133, 54, 11,
	-197, -37, -82, -80, 103, -40, -197, -197, -197, -197,
	-197, -62, 30, 33, -2, -196, 33, -196, -58, 54,
	12, 105, -47, -46, 51, 52, -48, 51, -46, 41,
	41, 144, 144, 144, -94, -120, -58, -42, -58, 146,
	-102, -103, 249, 246, 252, 54, 57, -191, 54, -171,
	105, 53, 28, -165, -165, 57, 57, -150, 29, 72,
	-156, 229, 63, -153, -153, -154, 30, -154, -154, -154,
	-162, -191, -162, 63, 63, 51, -120, -133, -181, -180,
	-121, -132, -185, 172, 151, 152, 155, 154, 57, 144,
	28, 150, 153, 166, 149, -185, 172, -115, -116, 146,
	22, 144, 28, 166, -133, -111, 113, 12, -127, -127,
	-141, 22, -127, 38, 133, -54, -41, 11, 122, -121,
	-38, -36, 96, -64, -64, -197, -39, -139, 131, 200,
	160, 199, 195, 214, 205, 227, 197, 228, 201, -134,
	-139, -64, -64, -121, -64, -64, 270, -85, 104, -40,
	102, -95, 51, -96, -73, -75, -74, -196, -2, -91,
	-125, -94, -85, -100, -40, -40, -40, 53, -40, -196,
	-196, -196, -197, 54, -85, -58, -64, 246, 250, 251,
	-64, -170, -171, -174, -173, -120, 57, 57, -152, 51,
	-191, 63, 64, 72, 253, 69, 55, -154, -154, 57,
	131, 55, 54, 55, 54, 55, 54, -54, 54, 105,
	-132, -120, -132, -120, -54, -132, -120, -191, -40, -188,
	-58, -42, -197, -64, -197, -149, -149, -149, -158, -149,
	189, -149, 189, -196, -197, -197, -197, 54, 19, -197,
	54, 19, -196, -35, 268, -40, -187, 277, 27, -95,
	54, -197, -197, -197, 54, 133, -197, -89, -92, -120,
	-92, -92, -92, -130, -120, -89, 55, 54, -149, -160,
	225, 9, -153, -191, -153, 63, 63, -133, -180, -171,
	53, 26, -83, 13, -153, 57, 63, -64, -64, -64,
	-64, -64, -197, -191, 122, -72, 28, -75, 33, -2,
	-196, -125, -125, 54, 55, -197, -197, -197, -57, -176,
	-175, 52, 156, 68, -173, -161, 150, 28, 149, 253,
	-154, -154, 55, 55, -92, -196, -84, 14, 16, -197,
	-197, -197, -197, -197, -34, 115, 273, 9, -73, -2,
	133, -120, -175, 57, -166, 105, -191, -151, 68, 28,
	28, 55, -177, -178, 166, -40, -72, -197, 271, 48,
	274, -96, -197, -125, 63, -191, -184, -197, 54, -120,
	38, 272, 275, -182, -178, 33, 38, 168, 273, 169,
	274, -196, 275, -64, 165, -197, -197,
}

var yyDef = [...]int{
	0, -2, 2, -2, 5, 6, 7, 8, 9, 10,
	11, 12, 13, 14, 15, 16, 17, 18, 19, 20,
	21, 22, 23, 24, 551, 0, 307, 307, 307, 307,
	307, 307, 0, 626, 609, 0, 0, 0, 0, -2,
	283, 284, 0, 286, 287, 857, 857, 857, 857, 857,
	0, 0, 0, 0, 37, 38, 855, 1, 3, 559,
	0, 0, 311, 314, 309, 0, 609, 0, 0, 0,
	66, 0, 0, 842, 0, 843, 607, 607, 607, 627,
	628, 631, 632, 754, 755, 756, 757, 758, 759, 760,
	761, 762, 763, 764, 765, 766, 767, 768, 769, 770,
	771, 772, 773, 774, 775, 776, 777, 778, 779, 780,
	781, 782, 783, 784, 785, 786, 787, 788, 789, 790,
	791, 792, 793, 794, 795, 796, 797, 798, 799, 800,
	801, 802, 803, 804, 805, 806, 807, 808, 809, 810,
	811, 812, 813, 814, 815, 816, 817, 818, 819, 820,
	821, 822, 823, 824, 825, 826, 827, 828, 829, 830,
	831, 832, 833, 834, 835, 836, 837, 838, 839, 840,
	841, 844, 845, 846, 847, 848, 849, 850, 851, 0,
	0, 610, 0, 605, 0, 605, 605, 605, 0, 237,
	380, 635, 636, 637, 638, 639, 842, 843, 0, 0,
	0, 0, 858, 858, 858, 858, 0, 0, 858, 0,
	269, 258, 260, 261, 262, 263, 858, 280, 281, 278,
	268, 282, 285, 288, 289, 290, 291, 292, 0, 0,
	303, 30, 563, 0, 0, 551, 32, 0, 307, 312,
	313, 317, 315, 316, 308, 0, 325, 329, 0, 388,
	0, 393, -2, -2, -2, -2, -2, 0, 430, 431,
	432, 433, 434, 0, 0, 0, 0, 0, 0, 456,
	457, 458, 459, 460, 461, 526, 531, 532, 533, 534,
	535, 536, 537, 538, 539, 397, 398, 583, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 517, 0,
	490, 490, 490, 490, 490, 490, 490, 490, 0, 0,
	0, 0, 0, 0, 339, 341, 342, 343, 362, 0,
	364, 0, 0, 45, 49, 0, 62, 833, 590, 633,
	-2, -2, -2, 0, 0, 634, -2, 761, -2, 662,
	663, 664, 665, 666, 667, 668, 669, 670, 671, 672,
	673, 674, 675, 676, 677, 678, 679, 680, 681, 682,
	683, 684, 685, 686, 687, 688, 689, 690, 691, 692,
	693, 694, 695, 696, 697, 698, 699, 700, 701, 702,
	703, 704, 705, 706, 707, 708, 709, 710, 711, 712,
	713, 714, 715, 716, 717, 718, 719, 720, 721, 722,
	723, 724, 725, 726, 727, 728, 729, 730, 731, 732,
	733, 734, 735, 736, 737, 738, 739, 740, 741, 742,
	743, 744, 745, 746, 747, 748, 749, 750, 751, 752,
	753, 0, 83, 0, 0, 858, 0, 73, 0, 0,
	0, 0, 0, 858, 0, 0, 0, 0, 0, 0,
	0, 236, 0, 238, 858, 858, 858, 858, 858, 858,
	858, 858, 247, 859, 860, 633, 248, 249, 250, 858,
	858, 858, 858, 253, 0, 0, 270, 0, 264, 293,
	0, 0, 0, 0, 31, 856, 25, 0, 0, 560,
	0, 552, 553, 556, 559, 30, 314, 0, 319, 318,
	310, 0, 326, 0, 0, 0, 330, 0, 336, 332,
	333, 334, 335, 0, 391, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 415, 416, 417, 418, 419, 420,
	421, 394, 0, 408, 0, 0, 0, 540, 542, 450,
	541, 451, 452, 453, 454, 455, 321, 30, 0, 428,
	0, -2, 0, 0, 0, 0, 0, 0, 0, 0,
	317, 0, 518, 0, 482, 0, 483, 484, 485, 486,
	487, 488, 489, 0, 321, 0, 0, 47, 0, 379,
	0, 0, 0, 0, 0, 0, 368, 0, 0, 371,
	0, 0, 0, 0, 363, 0, 0, 382, 806, 365,
	0, 367, -2, 0, 0, 0, 43, 44, 0, 50,
	0, 52, 53, 0, 0, 0, 0, 167, 600, 601,
	602, 852, 853, 854, 598, 196, 0, 150, 146, 90,
	91, 92, 93, 139, 96, 139, 139, 139, 139, 164,
	164, 164, 164, 122, 123, 124, 125, 126, 0, 0,
	109, 139, 139, 139, 113, 129, 130, 131, 132, 133,
	134, 135, 136, 94, 97, 98, 99, 100, 101, 102,
	103, 141, 141, 141, 143, 143, 629, 68, 0, 76,
	0, 858, 0, 858, 81, 0, 212, 0, 231, 606,
	0, 858, 234, 235, 381, 640, 641, 239, 240, 241,
	242, 243, 244, 245, 246, 251, 256, 252, 257, 254,
	271, 265, 266, 259, 294, 297, 298, 299, 300, 301,
	302, 295, 0, 87, 304, 305, 564, 0, 0, 0,
	0, 0, 555, 557, 558, 563, 33, 317, 0, 544,
	0, 0, 0, 320, 28, 389, 390, 392, 409, 0,
	411, 413, 331, 327, 0, 527, -2, 399, 400, 424,
	425, 426, 0, 0, 0, 0, 422, 404, 0, 435,
	436, 437, 438, 439, 440, 441, 442, 443, 444, 445,
	446, 449, 501, 502, 0, 447, 529, 530, 448, 543,
	0, 0, 322, 323, 427, 0, 582, 30, 463, 642,
	643, 644, 645, 646, 647, 648, 649, 650, 651, 652,
	653, 654, 655, 656, 657, 658, 659, 660, 661, 0,
	0, 0, 0, 0, 526, 0, 0, 0, 0, 524,
	521, 0, 0, 491, 0, 0, 0, 0, 0, 0,
	0, 378, 386, 587, 0, 340, 358, 360, 0, 355,
	369, 370, 372, 0, 374, 0, 376, 377, 344, 345,
	346, 0, 0, 0, 0, 366, 386, 0, 386, 46,
	591, 633, 51, 0, 0, 56, 57, 596, 593, 594,
	595, 0, 82, 197, 199, 202, 203, 204, 84, 85,
	0, 0, 0, 0, 0, 191, 192, 153, 151, 0,
	148, 147, 95, 0, 164, 164, 116, 117, 167, 0,
	167, 167, 167, 0, 0, 110, 111, 112, 104, 0,
	105, 106, 107, 0, 108, 0, 0, 858, 70, 0,
	74, 75, 71, 608, 72, 857, 0, 0, 621, 213,
	611, 612, 613, 614, 615, 616, 617, 618, 619, 620,
	0, 230, 858, 233, 274, 0, 0, 0, 0, 0,
	0, 561, 562, 0, 554, 26, 0, 603, 604, 545,
	546, 337, 410, 412, 414, 0, 321, 401, 422, 405,
	0, 402, 0, 0, 396, 464, 0, 0, 429, -2,
	467, 468, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 551, 0, 522, 0, 0, 481, 492, 493, 494,
	495, 576, 0, 0, -2, 0, 36, 0, 551, 0,
	0, 0, 352, 359, 0, 0, 353, 0, 354, 373,
	375, 0, 0, 0, 0, 350, 551, 386, 42, 0,
	54, 55, 0, 0, 61, 0, 168, 169, 0, 200,
	0, 0, 186, 0, 0, 189, 190, 160, 0, 152,
	89, 149, 0, 167, 167, 118, 0, 119, 120, 121,
	0, 137, 0, 0, 0, 0, 630, 69, 77, 78,
	0, 205, 857, 0, 214, 215, 216, 217, 218, 219,
	220, 221, 222, 223, 224, 857, 0, 0, 857, 622,
	623, 624, 625, 0, 232, 255, 0, 0, 272, 273,
	88, 0, 306, 565, 0, 27, 386, 0, 328, 528,
	0, 403, 0, 423, 406, 465, 324, 0, 139, 139,
	506, 139, 143, 509, 139, 511, 139, 514, 0, 0,
	0, 0, 0, 527, 0, 0, 0, 519, 480, 525,
	0, 584, 0, 576, 566, 578, 580, 0, 30, 0,
	572, 0, 559, 588, 387, 589, 356, 0, 361, 0,
	0, 0, 364, 0, 559, 41, 596, 58, 59, 60,
	592, 198, 201, 0, 193, 139, 187, 188, 162, 0,
	154, 155, 156, 157, 158, 159, 140, 114, 115, 165,
	166, 164, 0, 164, 0, 144, 0, 858, 0, 0,
	206, 0, 207, 209, 210, 211, 0, 275, 276, 296,
	547, 338, 466, 407, 469, 503, 164, 507, 508, 510,
	512, 513, 515, 0, 471, 470, 472, 0, 0, 475,
	0, 0, 0, 0, 0, 523, 34, 0, 0, 35,
	0, 581, -2, 0, 0, 0, 48, 39, 0, 348,
	0, 0, 0, 382, 351, 40, 178, 0, 195, 170,
	163, 0, 167, 138, 167, 0, 0, 67, 79, 80,
	0, 0, 549, 0, 504, 505, 0, 0, 0, 0,
	0, 496, 479, 520, 585, 586, 0, 579, 0, -2,
	0, 574, 573, 0, 357, 383, 384, 385, 347, 177,
	179, 0, 184, 0, 194, 175, 0, 172, 174, 161,
	127, 128, 142, 145, 0, 0, 29, 0, 0, 516,
	473, 474, 476, 477, 0, 0, 0, 0, 569, 30,
	0, 349, 180, 181, 0, 185, 183, 86, 0, 171,
	173, 73, 0, 226, 0, 550, 548, 478, 0, 0,
	0, 577, -2, 575, 182, 176, 76, 225, 0, 0,
	497, 0, 500, 208, 227, 0, 498, 0, 0, 0,
	0, 0, 499, 0, 0, 228, 229,
}

var yyTok1 = [...]int{
	1, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 98, 3, 3, 3, 125, 117, 3,
	53, 55, 122, 120, 54, 121, 133, 123, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 278,
	106, 105, 107, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 127, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 116, 3, 128,
}

var yyTok2 = [...]int{
	2, 3, 4, 5, 6, 7, 8, 9, 10, 11,
	12, 13, 14, 15, 16, 17, 18, 19, 20, 21,
	22, 23, 24, 25, 26, 27, 28, 29, 30, 31,
	32, 33, 34, 35, 36, 37, 38, 39, 40, 41,
	42, 43, 44, 45, 46, 47, 48, 49, 50, 51,
	52, 56, 57, 58, 59, 60, 61, 62, 63, 64,
	65, 66, 67, 68, 69, 70, 71, 72, 73, 74,
	75, 76, 77, 78, 79, 80, 81, 82, 83, 84,
	85, 86, 87, 88, 89, 90, 91, 92, 93, 94,
	95, 96, 97, 99, 100, 101, 102, 103, 104, 108,
	109, 110, 111, 112, 113, 114, 115, 118, 119, 124,
	126, 129, 130, 131, 132, 134, 135, 136, 137, 138,
	139, 140, 141, 142, 143, 144, 145, 146, 147, 148,
	149, 150, 151, 152, 153, 154, 155, 156, 157, 158,
	159, 160, 161, 162, 163, 164, 165, 166, 167, 168,
	169, 170, 171, 172, 173, 174, 175, 176, 177, 178,
	179, 180, 181, 182, 183, 184, 185, 186, 187, 188,
	189, 190, 191, 192, 193, 194, 195, 196, 197, 198,
	199, 200, 201, 202, 203, 204, 205, 206, 207, 208,
	209, 210, 211, 212, 213, 214, 215, 216, 217, 218,
	219, 220, 221, 222, 223, 224, 225, 226, 227, 228,
	229, 230, 231, 232, 233, 234, 235, 236, 237, 238,
	239, 240, 241, 242, 243, 244, 245, 246, 247, 248,
	249, 250, 251, 252, 253, 254, 255, 256, 257, 258,
	259, 260, 261, 262, 263, 264, 265, 266, 267, 268,
	269, 270, 271, 272, 273, 274,
}

var yyTok3 = [...]int{
	57600, 275, 57601, 276, 57602, 277, 0,
}

var yyErrorMessages = [...]struct {
	state int
	token int
	msg   string
}{}

//line yaccpar:1

/*	parser for yacc output	*/

var (
	yyDebug        = 0
	yyErrorVerbose = false
)

type yyLexer interface {
	Lex(lval *yySymType) int
	Error(s string)
}

type yyParser interface {
	Parse(yyLexer) int
	Lookahead() int
}

type yyParserImpl struct {
	lval  yySymType
	stack [yyInitialStackSize]yySymType
	char  int
}

func (p *yyParserImpl) Lookahead() int {
	return p.char
}

func yyNewParser() yyParser {
	return &yyParserImpl{}
}

const yyFlag = -1000

func yyTokname(c int) string {
	if c >= 1 && c-1 < len(yyToknames) {
		if yyToknames[c-1] != "" {
			return yyToknames[c-1]
		}
	}
	return __yyfmt__.Sprintf("tok-%v", c)
}

func yyStatname(s int) string {
	if s >= 0 && s < len(yyStatenames) {
		if yyStatenames[s] != "" {
			return yyStatenames[s]
		}
	}
	return __yyfmt__.Sprintf("state-%v", s)
}

func yyErrorMessage(state, lookAhead int) string {
	const TOKSTART = 4

	if !yyErrorVerbose {
		return "syntax error"
	}

	for _, e := range yyErrorMessages {
		if e.state == state && e.token == lookAhead {
			return "syntax error: " + e.msg
		}
	}

	res := "syntax error: unexpected " + yyTokname(lookAhead)

	// To match Bison, suggest at most four expected tokens.
	expected := make([]int, 0, 4)

	// Look for shiftable tokens.
	base := yyPact[state]
	for tok := TOKSTART; tok-1 < len(yyToknames); tok++ {
		if n := base + tok; n >= 0 && n < yyLast && yyChk[yyAct[n]] == tok {
			if len(expected) == cap(expected) {
				return res
			}
			expected = append(expected, tok)
		}
	}

	if yyDef[state] == -2 {
		i := 0
		for yyExca[i] != -1 || yyExca[i+1] != state {
			i += 2
		}

		// Look for tokens that we accept or reduce.
		for i += 2; yyExca[i] >= 0; i += 2 {
			tok := yyExca[i]
			if tok < TOKSTART || yyExca[i+1] == 0 {
				continue
			}
			if len(expected) == cap(expected) {
				return res
			}
			expected = append(expected, tok)
		}

		// If the default action is to accept or reduce, give up.
		if yyExca[i+1] != 0 {
			return res
		}
	}

	for i, tok := range expected {
		if i == 0 {
			res += ", expecting "
		} else {
			res += " or "
		}
		res += yyTokname(tok)
	}
	return res
}

func yylex1(lex yyLexer, lval *yySymType) (char, token int) {
	token = 0
	char = lex.Lex(lval)
	if char <= 0 {
		token = yyTok1[0]
		goto out
	}
	if char < len(yyTok1) {
		token = yyTok1[char]
		goto out
	}
	if char >= yyPrivate {
		if char < yyPrivate+len(yyTok2) {
			token = yyTok2[char-yyPrivate]
			goto out
		}
	}
	for i := 0; i < len(yyTok3); i += 2 {
		token = yyTok3[i+0]
		if token == char {
			token = yyTok3[i+1]
			goto out
		}
	}

out:
	if token == 0 {
		token = yyTok2[1] /* unknown char */
	}
	if yyDebug >= 3 {
		__yyfmt__.Printf("lex %s(%d)\n", yyTokname(token), uint(char))
	}
	return char, token
}

func yyParse(yylex yyLexer) int {
	return yyNewParser().Parse(yylex)
}

func (yyrcvr *yyParserImpl) Parse(yylex yyLexer) int {
	var yyn int
	var yyVAL yySymType
	var yyDollar []yySymType
	_ = yyDollar // silence set and not used
	yyS := yyrcvr.stack[:]

	Nerrs := 0   /* number of errors */
	Errflag := 0 /* error recovery flag */
	yystate := 0
	yyrcvr.char = -1
	yytoken := -1 // yyrcvr.char translated into internal numbering
	defer func() {
		// Make sure we report no lookahead when not parsing.
		yystate = -1
		yyrcvr.char = -1
		yytoken = -1
	}()
	yyp := -1
	goto yystack

ret0:
	return 0

ret1:
	return 1

yystack:
	/* put a state and value onto the stack */
	if yyDebug >= 4 {
		__yyfmt__.Printf("char %v in %v\n", yyTokname(yytoken), yyStatname(yystate))
	}

	yyp++
	if yyp >= len(yyS) {
		nyys := make([]yySymType, len(yyS)*2)
		copy(nyys, yyS)
		yyS = nyys
	}
	yyS[yyp] = yyVAL
	yyS[yyp].yys = yystate

yynewstate:
	yyn = yyPact[yystate]
	if yyn <= yyFlag {
		goto yydefault /* simple state */
	}
	if yyrcvr.char < 0 {
		yyrcvr.char, yytoken = yylex1(yylex, &yyrcvr.lval)
	}
	yyn += yytoken
	if yyn < 0 || yyn >= yyLast {
		goto yydefault
	}
	yyn = yyAct[yyn]
	if yyChk[yyn] == yytoken { /* valid shift */
		yyrcvr.char = -1
		yytoken = -1
		yyVAL = yyrcvr.lval
		yystate = yyn
		if Errflag > 0 {
			Errflag--
		}
		goto yystack
	}

yydefault:
	/* default state action */
	yyn = yyDef[yystate]
	if yyn == -2 {
		if yyrcvr.char < 0 {
			yyrcvr.char, yytoken = yylex1(yylex, &yyrcvr.lval)
		}

		/* look through exception table */
		xi := 0
		for {
			if yyExca[xi+0] == -1 && yyExca[xi+1] == yystate {
				break
			}
			xi += 2
		}
		for xi += 2; ; xi += 2 {
			yyn = yyExca[xi+0]
			if yyn < 0 || yyn == yytoken {
				break
			}
		}
		yyn = yyExca[xi+1]
		if yyn < 0 {
			goto ret0
		}
	}
	if yyn == 0 {
		/* error ... attempt to resume parsing */
		switch Errflag {
		case 0: /* brand new error */
			yylex.Error(yyErrorMessage(yystate, yytoken))
			Nerrs++
			if yyDebug >= 1 {
				__yyfmt__.Printf("%s", yyStatname(yystate))
				__yyfmt__.Printf(" saw %s\n", yyTokname(yytoken))
			}
			fallthrough

		case 1, 2: /* incompletely recovered error ... try again */
			Errflag = 3

			/* find a state where "error" is a legal shift action */
			for yyp >= 0 {
				yyn = yyPact[yyS[yyp].yys] + yyErrCode
				if yyn >= 0 && yyn < yyLast {
					yystate = yyAct[yyn] /* simulate a shift of "error" */
					if yyChk[yystate] == yyErrCode {
						goto yystack
					}
				}

				/* the current p has no shift on "error", pop stack */
				if yyDebug >= 2 {
					__yyfmt__.Printf("error recovery pops state %d\n", yyS[yyp].yys)
				}
				yyp--
			}
			/* there is no state on the stack with an error shift ... abort */
			goto ret1

		case 3: /* no shift yet; clobber input char */
			if yyDebug >= 2 {
				__yyfmt__.Printf("error recovery discards %s\n", yyTokname(yytoken))
			}
			if yytoken == yyEofCode {
				goto ret1
			}
			yyrcvr.char = -1
			yytoken = -1
			goto yynewstate /* try again in the same state */
		}
	}

	/* reduction by production yyn */
	if yyDebug >= 2 {
		__yyfmt__.Printf("reduce %v in:\n\t%v\n", yyn, yyStatname(yystate))
	}

	yynt := yyn
	yypt := yyp
	_ = yypt // guard against "declared and not used"

	yyp -= yyR2[yyn]
	// yyp is now the index of $0. Perform the default action. Iff the
	// reduced production is ε, $1 is possibly out of range.
	if yyp+1 >= len(yyS) {
		nyys := make([]yySymType, len(yyS)*2)
		copy(nyys, yyS)
		yyS = nyys
	}
	yyVAL = yyS[yyp+1]

	/* consult goto table to find next state */
	yyn = yyR1[yyn]
	yyg := yyPgo[yyn]
	yyj := yyg + yyS[yyp].yys + 1

	if yyj >= yyLast {
		yystate = yyAct[yyg]
	} else {
		yystate = yyAct[yyj]
		if yyChk[yystate] != -yyn {
			yystate = yyAct[yyg]
		}
	}
	// dummy call; replaced with literal code
	switch yynt {

	case 1:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:326
		{
			setParseTree(yylex, yyDollar[1].statement)
		}
	case 2:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:331
		{
		}
	case 3:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:332
		{
		}
	case 4:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:336
		{
			yyVAL.statement = yyDollar[1].selStmt
		}
	case 25:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:362
		{
			sel := yyDollar[1].selStmt.(*Select)
			sel.OrderBy = yyDollar[2].orderBy
			sel.Limit = yyDollar[3].limit
			sel.Lock = yyDollar[4].str
			yyVAL.selStmt = sel
		}
	case 26:
		yyDollar = yyS[yypt-6 : yypt+1]
//line sql.y:370
		{
			yyVAL.selStmt = &Union{Type: yyDollar[2].str, Left: yyDollar[1].selStmt, Right: yyDollar[3].selStmt, OrderBy: yyDollar[4].orderBy, Limit: yyDollar[5].limit, Lock: yyDollar[6].str}
		}
	case 27:
		yyDollar = yyS[yypt-7 : yypt+1]
//line sql.y:374
		{
			yyVAL.selStmt = &Select{Comments: Comments(yyDollar[2].bytes2), Cache: yyDollar[3].str, SelectExprs: SelectExprs{Nextval{Expr: yyDollar[5].expr}}, From: TableExprs{&AliasedTableExpr{Expr: yyDollar[7].tableName}}}
		}
	case 28:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:380
		{
			yyVAL.statement = &Stream{Comments: Comments(yyDollar[2].bytes2), SelectExpr: yyDollar[3].selectExpr, Table: yyDollar[5].tableName}
		}
	case 29:
		yyDollar = yyS[yypt-10 : yypt+1]
//line sql.y:387
		{
			yyVAL.selStmt = &Select{Comments: Comments(yyDollar[2].bytes2), Cache: yyDollar[3].str, Distinct: yyDollar[4].str, Hints: yyDollar[5].str, SelectExprs: yyDollar[6].selectExprs, From: yyDollar[7].tableExprs, Where: NewWhere(WhereStr, yyDollar[8].expr), GroupBy: GroupBy(yyDollar[9].exprs), Having: NewWhere(HavingStr, yyDollar[10].expr)}
		}
	case 30:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:393
		{
			yyVAL.selStmt = yyDollar[1].selStmt
		}
	case 31:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:397
		{
			yyVAL.selStmt = &ParenSelect{Select: yyDollar[2].selStmt}
		}
	case 32:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:403
		{
			yyVAL.selStmt = yyDollar[1].selStmt
		}
	case 33:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:407
		{
			yyVAL.selStmt = &ParenSelect{Select: yyDollar[2].selStmt}
		}
	case 34:
		yyDollar = yyS[yypt-8 : yypt+1]
//line sql.y:414
		{
			// insert_data returns a *Insert pre-filled with Columns & Values
			ins := yyDollar[6].ins
			ins.Action = yyDollar[1].str
			ins.Comments = yyDollar[2].bytes2
			ins.Ignore = yyDollar[3].str
			ins.Table = yyDollar[4].tableName
			ins.Partitions = yyDollar[5].partitions
			ins.OnDup = OnDup(yyDollar[7].updateExprs)
			ins.Returning = yyDollar[8].returning
			yyVAL.statement = ins
		}
	case 35:
		yyDollar = yyS[yypt-8 : yypt+1]
//line sql.y:427
		{
			cols := make(Columns, 0, len(yyDollar[7].updateExprs))
			vals := make(ValTuple, 0, len(yyDollar[8].updateExprs))
			for _, updateList := range yyDollar[7].updateExprs {
				cols = append(cols, updateList.Name.Name)
				vals = append(vals, updateList.Expr)
			}
			yyVAL.statement = &Insert{Action: yyDollar[1].str, Comments: Comments(yyDollar[2].bytes2), Ignore: yyDollar[3].str, Table: yyDollar[4].tableName, Partitions: yyDollar[5].partitions, Columns: cols, Rows: Values{vals}, OnDup: OnDup(yyDollar[8].updateExprs)}
		}
	case 36:
		yyDollar = yyS[yypt-6 : yypt+1]
//line sql.y:437
		{
			yyVAL.statement = &Insert{Action: yyDollar[1].str, Comments: Comments(yyDollar[2].bytes2), Ignore: yyDollar[3].str, Table: yyDollar[4].tableName, Default: true}
		}
	case 37:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:443
		{
			yyVAL.str = InsertStr
		}
	case 38:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:447
		{
			yyVAL.str = ReplaceStr
		}
	case 39:
		yyDollar = yyS[yypt-8 : yypt+1]
//line sql.y:453
		{
			yyVAL.statement = &Update{Comments: Comments(yyDollar[2].bytes2), TableExprs: yyDollar[3].tableExprs, Exprs: yyDollar[5].updateExprs, Where: NewWhere(WhereStr, yyDollar[6].expr), OrderBy: yyDollar[7].orderBy, Limit: yyDollar[8].limit}
		}
	case 40:
		yyDollar = yyS[yypt-8 : yypt+1]
//line sql.y:459
		{
			yyVAL.statement = &Delete{Comments: Comments(yyDollar[2].bytes2), TableExprs: TableExprs{&AliasedTableExpr{Expr: yyDollar[4].tableName}}, Partitions: yyDollar[5].partitions, Where: NewWhere(WhereStr, yyDollar[6].expr), OrderBy: yyDollar[7].orderBy, Limit: yyDollar[8].limit}
		}
	case 41:
		yyDollar = yyS[yypt-7 : yypt+1]
//line sql.y:463
		{
			yyVAL.statement = &Delete{Comments: Comments(yyDollar[2].bytes2), Targets: yyDollar[4].tableNames, TableExprs: yyDollar[6].tableExprs, Where: NewWhere(WhereStr, yyDollar[7].expr)}
		}
	case 42:
		yyDollar = yyS[yypt-6 : yypt+1]
//line sql.y:467
		{
			yyVAL.statement = &Delete{Comments: Comments(yyDollar[2].bytes2), Targets: yyDollar[3].tableNames, TableExprs: yyDollar[5].tableExprs, Where: NewWhere(WhereStr, yyDollar[6].expr)}
		}
	case 43:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:472
		{
		}
	case 44:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:473
		{
		}
	case 45:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:477
		{
			yyVAL.tableNames = TableNames{yyDollar[1].tableName}
		}
	case 46:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:481
		{
			yyVAL.tableNames = append(yyVAL.tableNames, yyDollar[3].tableName)
		}
	case 47:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:486
		{
			yyVAL.partitions = nil
		}
	case 48:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:490
		{
			yyVAL.partitions = yyDollar[3].partitions
		}
	case 49:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:496
		{
			yyVAL.statement = &Set{Comments: Comments(yyDollar[2].bytes2), Exprs: yyDollar[3].setExprs}
		}
	case 50:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:500
		{
			yyVAL.statement = &Set{Comments: Comments(yyDollar[2].bytes2), Scope: yyDollar[3].str, Exprs: yyDollar[4].setExprs}
		}
	case 51:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:504
		{
			yyVAL.statement = &Set{Comments: Comments(yyDollar[2].bytes2), Scope: yyDollar[3].str, Exprs: yyDollar[5].setExprs}
		}
	case 52:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:508
		{
			yyVAL.statement = &Set{Comments: Comments(yyDollar[2].bytes2), Exprs: yyDollar[4].setExprs}
		}
	case 53:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:514
		{
			yyVAL.setExprs = SetExprs{yyDollar[1].setExpr}
		}
	case 54:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:518
		{
			yyVAL.setExprs = append(yyVAL.setExprs, yyDollar[3].setExpr)
		}
	case 55:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:524
		{
			yyVAL.setExpr = yyDollar[3].setExpr
		}
	case 56:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:528
		{
			yyVAL.setExpr = &SetExpr{Name: NewColIdent("tx_read_only"), Expr: NewIntVal([]byte("0"))}
		}
	case 57:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:532
		{
			yyVAL.setExpr = &SetExpr{Name: NewColIdent("tx_read_only"), Expr: NewIntVal([]byte("1"))}
		}
	case 58:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:538
		{
			yyVAL.setExpr = &SetExpr{Name: NewColIdent("tx_isolation"), Expr: NewStrVal([]byte("repeatable read"))}
		}
	case 59:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:542
		{
			yyVAL.setExpr = &SetExpr{Name: NewColIdent("tx_isolation"), Expr: NewStrVal([]byte("read committed"))}
		}
	case 60:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:546
		{
			yyVAL.setExpr = &SetExpr{Name: NewColIdent("tx_isolation"), Expr: NewStrVal([]byte("read uncommitted"))}
		}
	case 61:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:550
		{
			yyVAL.setExpr = &SetExpr{Name: NewColIdent("tx_isolation"), Expr: NewStrVal([]byte("serializable"))}
		}
	case 63:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:557
		{
			yyVAL.str = LocalStr
		}
	case 64:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:564
		{
			yyVAL.str = SessionStr
		}
	case 65:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:568
		{
			yyVAL.str = GlobalStr
		}
	case 66:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:574
		{
			yyDollar[1].ddl.TableSpec = yyDollar[2].TableSpec
			yyVAL.statement = yyDollar[1].ddl
		}
	case 67:
		yyDollar = yyS[yypt-8 : yypt+1]
//line sql.y:579
		{
			// Change this to an alter statement
			yyVAL.statement = &DDL{Action: AlterStr, Table: yyDollar[7].tableName, NewName: yyDollar[7].tableName}
		}
	case 68:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:584
		{
			yyVAL.statement = &DDL{Action: CreateStr, NewName: yyDollar[3].tableName.ToViewName()}
		}
	case 69:
		yyDollar = yyS[yypt-6 : yypt+1]
//line sql.y:588
		{
			yyVAL.statement = &DDL{Action: CreateStr, NewName: yyDollar[5].tableName.ToViewName()}
		}
	case 70:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:592
		{
			yyVAL.statement = &DDL{Action: CreateVindexStr, VindexSpec: &VindexSpec{
				Name:   yyDollar[3].colIdent,
				Type:   yyDollar[4].colIdent,
				Params: yyDollar[5].vindexParams,
			}}
		}
	case 71:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:600
		{
			yyVAL.statement = &DBDDL{Action: CreateStr, DBName: string(yyDollar[4].bytes)}
		}
	case 72:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:604
		{
			yyVAL.statement = &DBDDL{Action: CreateStr, DBName: string(yyDollar[4].bytes)}
		}
	case 73:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:609
		{
			yyVAL.colIdent = NewColIdent("")
		}
	case 74:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:613
		{
			yyVAL.colIdent = yyDollar[2].colIdent
		}
	case 75:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:619
		{
			yyVAL.colIdent = NewColIdent(string(yyDollar[1].bytes))
		}
	case 76:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:624
		{
			var v []VindexParam
			yyVAL.vindexParams = v
		}
	case 77:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:629
		{
			yyVAL.vindexParams = yyDollar[2].vindexParams
		}
	case 78:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:635
		{
			yyVAL.vindexParams = make([]VindexParam, 0, 4)
			yyVAL.vindexParams = append(yyVAL.vindexParams, yyDollar[1].vindexParam)
		}
	case 79:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:640
		{
			yyVAL.vindexParams = append(yyVAL.vindexParams, yyDollar[3].vindexParam)
		}
	case 80:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:646
		{
			yyVAL.vindexParam = VindexParam{Key: yyDollar[1].colIdent, Val: yyDollar[3].str}
		}
	case 81:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:652
		{
			yyVAL.ddl = &DDL{Action: CreateStr, NewName: yyDollar[4].tableName}
			setDDL(yylex, yyVAL.ddl)
		}
	case 82:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:659
		{
			yyVAL.TableSpec = yyDollar[2].TableSpec
			yyVAL.TableSpec.Options = yyDollar[4].str
		}
	case 83:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:666
		{
			yyVAL.TableSpec = &TableSpec{}
			yyVAL.TableSpec.AddColumn(yyDollar[1].columnDefinition)
		}
	case 84:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:671
		{
			yyVAL.TableSpec.AddColumn(yyDollar[3].columnDefinition)
		}
	case 85:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:675
		{
			yyVAL.TableSpec.AddIndex(yyDollar[3].indexDefinition)
		}
	case 86:
		yyDollar = yyS[yypt-8 : yypt+1]
//line sql.y:681
		{
			yyDollar[2].columnType.NotNull = yyDollar[3].boolVal
			yyDollar[2].columnType.Default = yyDollar[4].optVal
			yyDollar[2].columnType.OnUpdate = yyDollar[5].optVal
			yyDollar[2].columnType.Autoincrement = yyDollar[6].boolVal
			yyDollar[2].columnType.KeyOpt = yyDollar[7].colKeyOpt
			yyDollar[2].columnType.Comment = yyDollar[8].optVal
			yyVAL.columnDefinition = &ColumnDefinition{Name: NewColIdent(string(yyDollar[1].bytes)), Type: yyDollar[2].columnType}
		}
	case 87:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:693
		{
			yyVAL.columnTypes = ColumnTypes{yyDollar[1].columnType}
		}
	case 88:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:697
		{
			yyVAL.columnTypes = append(yyDollar[1].columnTypes, yyDollar[3].columnType)
		}
	case 89:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:703
		{
			yyVAL.columnType = yyDollar[1].columnType
			yyVAL.columnType.Unsigned = yyDollar[2].boolVal
			yyVAL.columnType.Zerofill = yyDollar[3].boolVal
		}
	case 94:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:715
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 95:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:722
		{
			yyVAL.columnType = yyDollar[1].columnType
			yyVAL.columnType.Length = yyDollar[2].optVal
		}
	case 96:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:727
		{
			yyVAL.columnType = yyDollar[1].columnType
		}
	case 97:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:733
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 98:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:737
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 99:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:741
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 100:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:745
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 101:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:749
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 102:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:753
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 103:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:757
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 104:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:763
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
			yyVAL.columnType.Length = yyDollar[2].LengthScaleOption.Length
			yyVAL.columnType.Scale = yyDollar[2].LengthScaleOption.Scale
		}
	case 105:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:769
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
			yyVAL.columnType.Length = yyDollar[2].LengthScaleOption.Length
			yyVAL.columnType.Scale = yyDollar[2].LengthScaleOption.Scale
		}
	case 106:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:775
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
			yyVAL.columnType.Length = yyDollar[2].LengthScaleOption.Length
			yyVAL.columnType.Scale = yyDollar[2].LengthScaleOption.Scale
		}
	case 107:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:781
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
			yyVAL.columnType.Length = yyDollar[2].LengthScaleOption.Length
			yyVAL.columnType.Scale = yyDollar[2].LengthScaleOption.Scale
		}
	case 108:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:787
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
			yyVAL.columnType.Length = yyDollar[2].LengthScaleOption.Length
			yyVAL.columnType.Scale = yyDollar[2].LengthScaleOption.Scale
		}
	case 109:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:795
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 110:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:799
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal}
		}
	case 111:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:803
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal}
		}
	case 112:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:807
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal}
		}
	case 113:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:811
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 114:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:817
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal, Charset: yyDollar[3].str, Collate: yyDollar[4].str}
		}
	case 115:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:821
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal, Charset: yyDollar[3].str, Collate: yyDollar[4].str}
		}
	case 116:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:825
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal}
		}
	case 117:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:829
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal}
		}
	case 118:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:833
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Charset: yyDollar[2].str, Collate: yyDollar[3].str}
		}
	case 119:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:837
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Charset: yyDollar[2].str, Collate: yyDollar[3].str}
		}
	case 120:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:841
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Charset: yyDollar[2].str, Collate: yyDollar[3].str}
		}
	case 121:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:845
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Charset: yyDollar[2].str, Collate: yyDollar[3].str}
		}
	case 122:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:849
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 123:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:853
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 124:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:857
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 125:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:861
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 126:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:865
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 127:
		yyDollar = yyS[yypt-6 : yypt+1]
//line sql.y:869
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), EnumValues: yyDollar[3].strs, Charset: yyDollar[5].str, Collate: yyDollar[6].str}
		}
	case 128:
		yyDollar = yyS[yypt-6 : yypt+1]
//line sql.y:874
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), EnumValues: yyDollar[3].strs, Charset: yyDollar[5].str, Collate: yyDollar[6].str}
		}
	case 129:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:880
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 130:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:884
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 131:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:888
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 132:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:892
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 133:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:896
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 134:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:900
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 135:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:904
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 136:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:908
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 137:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:914
		{
			yyVAL.strs = make([]string, 0, 4)
			yyVAL.strs = append(yyVAL.strs, "'"+string(yyDollar[1].bytes)+"'")
		}
	case 138:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:919
		{
			yyVAL.strs = append(yyDollar[1].strs, "'"+string(yyDollar[3].bytes)+"'")
		}
	case 139:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:924
		{
			yyVAL.optVal = nil
		}
	case 140:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:928
		{
			yyVAL.optVal = NewIntVal(yyDollar[2].bytes)
		}
	case 141:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:933
		{
			yyVAL.LengthScaleOption = LengthScaleOption{}
		}
	case 142:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:937
		{
			yyVAL.LengthScaleOption = LengthScaleOption{
				Length: NewIntVal(yyDollar[2].bytes),
				Scale:  NewIntVal(yyDollar[4].bytes),
			}
		}
	case 143:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:945
		{
			yyVAL.LengthScaleOption = LengthScaleOption{}
		}
	case 144:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:949
		{
			yyVAL.LengthScaleOption = LengthScaleOption{
				Length: NewIntVal(yyDollar[2].bytes),
			}
		}
	case 145:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:955
		{
			yyVAL.LengthScaleOption = LengthScaleOption{
				Length: NewIntVal(yyDollar[2].bytes),
				Scale:  NewIntVal(yyDollar[4].bytes),
			}
		}
	case 146:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:963
		{
			yyVAL.boolVal = BoolVal(false)
		}
	case 147:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:967
		{
			yyVAL.boolVal = BoolVal(true)
		}
	case 148:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:972
		{
			yyVAL.boolVal = BoolVal(false)
		}
	case 149:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:976
		{
			yyVAL.boolVal = BoolVal(true)
		}
	case 150:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:982
		{
			yyVAL.boolVal = BoolVal(false)
		}
	case 151:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:986
		{
			yyVAL.boolVal = BoolVal(false)
		}
	case 152:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:990
		{
			yyVAL.boolVal = BoolVal(true)
		}
	case 153:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:995
		{
			yyVAL.optVal = nil
		}
	case 154:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:999
		{
			yyVAL.optVal = NewStrVal(yyDollar[2].bytes)
		}
	case 155:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1003
		{
			yyVAL.optVal = NewIntVal(yyDollar[2].bytes)
		}
	case 156:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1007
		{
			yyVAL.optVal = NewFloatVal(yyDollar[2].bytes)
		}
	case 157:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1011
		{
			yyVAL.optVal = NewValArg(yyDollar[2].bytes)
		}
	case 158:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1015
		{
			yyVAL.optVal = NewValArg(yyDollar[2].bytes)
		}
	case 159:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1019
		{
			yyVAL.optVal = NewBitVal(yyDollar[2].bytes)
		}
	case 160:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1024
		{
			yyVAL.optVal = nil
		}
	case 161:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1028
		{
			yyVAL.optVal = NewValArg(yyDollar[3].bytes)
		}
	case 162:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1033
		{
			yyVAL.boolVal = BoolVal(false)
		}
	case 163:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1037
		{
			yyVAL.boolVal = BoolVal(true)
		}
	case 164:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1042
		{
			yyVAL.str = ""
		}
	case 165:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1046
		{
			yyVAL.str = string(yyDollar[3].bytes)
		}
	case 166:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1050
		{
			yyVAL.str = string(yyDollar[3].bytes)
		}
	case 167:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1055
		{
			yyVAL.str = ""
		}
	case 168:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1059
		{
			yyVAL.str = string(yyDollar[2].bytes)
		}
	case 169:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1063
		{
			yyVAL.str = string(yyDollar[2].bytes)
		}
	case 170:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1068
		{
			yyVAL.colKeyOpt = colKeyNone
		}
	case 171:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1072
		{
			yyVAL.colKeyOpt = colKeyPrimary
		}
	case 172:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1076
		{
			yyVAL.colKeyOpt = colKey
		}
	case 173:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1080
		{
			yyVAL.colKeyOpt = colKeyUniqueKey
		}
	case 174:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1084
		{
			yyVAL.colKeyOpt = colKeyUnique
		}
	case 175:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1089
		{
			yyVAL.optVal = nil
		}
	case 176:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1093
		{
			yyVAL.optVal = NewStrVal(yyDollar[2].bytes)
		}
	case 177:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:1099
		{
			yyVAL.indexDefinition = &IndexDefinition{Info: yyDollar[1].indexInfo, Columns: yyDollar[3].indexColumns, Options: yyDollar[5].indexOptions}
		}
	case 178:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:1103
		{
			yyVAL.indexDefinition = &IndexDefinition{Info: yyDollar[1].indexInfo, Columns: yyDollar[3].indexColumns}
		}
	case 179:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1109
		{
			yyVAL.indexOptions = []*IndexOption{yyDollar[1].indexOption}
		}
	case 180:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1113
		{
			yyVAL.indexOptions = append(yyVAL.indexOptions, yyDollar[2].indexOption)
		}
	case 181:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1119
		{
			yyVAL.indexOption = &IndexOption{Name: string(yyDollar[1].bytes), Using: string(yyDollar[2].bytes)}
		}
	case 182:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1123
		{
			// should not be string
			yyVAL.indexOption = &IndexOption{Name: string(yyDollar[1].bytes), Value: NewIntVal(yyDollar[3].bytes)}
		}
	case 183:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1128
		{
			yyVAL.indexOption = &IndexOption{Name: string(yyDollar[1].bytes), Value: NewStrVal(yyDollar[2].bytes)}
		}
	case 184:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1134
		{
			yyVAL.str = ""
		}
	case 185:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1138
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 186:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1144
		{
			yyVAL.indexInfo = &IndexInfo{Type: string(yyDollar[1].bytes) + " " + string(yyDollar[2].bytes), Name: NewColIdent("PRIMARY"), Primary: true, Unique: true}
		}
	case 187:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1148
		{
			yyVAL.indexInfo = &IndexInfo{Type: string(yyDollar[1].bytes) + " " + string(yyDollar[2].str), Name: NewColIdent(string(yyDollar[3].bytes)), Spatial: true, Unique: false}
		}
	case 188:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1152
		{
			yyVAL.indexInfo = &IndexInfo{Type: string(yyDollar[1].bytes) + " " + string(yyDollar[2].str), Name: NewColIdent(string(yyDollar[3].bytes)), Unique: true}
		}
	case 189:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1156
		{
			yyVAL.indexInfo = &IndexInfo{Type: string(yyDollar[1].bytes), Name: NewColIdent(string(yyDollar[2].bytes)), Unique: true}
		}
	case 190:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1160
		{
			yyVAL.indexInfo = &IndexInfo{Type: string(yyDollar[1].str), Name: NewColIdent(string(yyDollar[2].bytes)), Unique: false}
		}
	case 191:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1166
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 192:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1170
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 193:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1176
		{
			yyVAL.indexColumns = []*IndexColumn{yyDollar[1].indexColumn}
		}
	case 194:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1180
		{
			yyVAL.indexColumns = append(yyVAL.indexColumns, yyDollar[3].indexColumn)
		}
	case 195:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1186
		{
			yyVAL.indexColumn = &IndexColumn{Column: yyDollar[1].colIdent, Length: yyDollar[2].optVal}
		}
	case 196:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1191
		{
			yyVAL.str = ""
		}
	case 197:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1195
		{
			yyVAL.str = " " + string(yyDollar[1].str)
		}
	case 198:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1199
		{
			yyVAL.str = string(yyDollar[1].str) + ", " + string(yyDollar[3].str)
		}
	case 199:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1207
		{
			yyVAL.str = yyDollar[1].str
		}
	case 200:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1211
		{
			yyVAL.str = yyDollar[1].str + " " + yyDollar[2].str
		}
	case 201:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1215
		{
			yyVAL.str = yyDollar[1].str + "=" + yyDollar[3].str
		}
	case 202:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1221
		{
			yyVAL.str = yyDollar[1].colIdent.String()

		}
	case 203:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1226
		{
			yyVAL.str = defaultDialect.QuoteHandler().WrapStringLiteral(string(yyDollar[1].bytes))
		}
	case 204:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1230
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 205:
		yyDollar = yyS[yypt-6 : yypt+1]
//line sql.y:1236
		{
			yyVAL.statement = &DDL{Action: AlterStr, Table: yyDollar[4].tableName, NewName: yyDollar[4].tableName}
		}
	case 206:
		yyDollar = yyS[yypt-7 : yypt+1]
//line sql.y:1240
		{
			yyVAL.statement = &DDL{Action: AlterStr, Table: yyDollar[4].tableName, NewName: yyDollar[4].tableName}
		}
	case 207:
		yyDollar = yyS[yypt-7 : yypt+1]
//line sql.y:1244
		{
			yyVAL.statement = &DDL{Action: AlterStr, Table: yyDollar[4].tableName, NewName: yyDollar[4].tableName}
		}
	case 208:
		yyDollar = yyS[yypt-12 : yypt+1]
//line sql.y:1248
		{
			yyVAL.statement = &DDL{
				Action: AddColVindexStr,
				Table:  yyDollar[4].tableName,
				VindexSpec: &VindexSpec{
					Name:   yyDollar[7].colIdent,
					Type:   yyDollar[11].colIdent,
					Params: yyDollar[12].vindexParams,
				},
				VindexCols: yyDollar[9].columns,
			}
		}
	case 209:
		yyDollar = yyS[yypt-7 : yypt+1]
//line sql.y:1261
		{
			yyVAL.statement = &DDL{
				Action: DropColVindexStr,
				Table:  yyDollar[4].tableName,
				VindexSpec: &VindexSpec{
					Name: yyDollar[7].colIdent,
				},
			}
		}
	case 210:
		yyDollar = yyS[yypt-7 : yypt+1]
//line sql.y:1271
		{
			// Change this to a rename statement
			yyVAL.statement = &DDL{Action: RenameStr, Table: yyDollar[4].tableName, NewName: yyDollar[7].tableName}
		}
	case 211:
		yyDollar = yyS[yypt-7 : yypt+1]
//line sql.y:1276
		{
			// Rename an index can just be an alter
			yyVAL.statement = &DDL{Action: AlterStr, Table: yyDollar[4].tableName, NewName: yyDollar[4].tableName}
		}
	case 212:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:1281
		{
			yyVAL.statement = &DDL{Action: AlterStr, Table: yyDollar[3].tableName.ToViewName(), NewName: yyDollar[3].tableName.ToViewName()}
		}
	case 213:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:1285
		{
			yyVAL.statement = &DDL{Action: AlterStr, Table: yyDollar[4].tableName, PartitionSpec: yyDollar[5].partSpec}
		}
	case 225:
		yyDollar = yyS[yypt-7 : yypt+1]
//line sql.y:1304
		{
			yyVAL.partSpec = &PartitionSpec{Action: ReorganizeStr, Name: yyDollar[3].colIdent, Definitions: yyDollar[6].partDefs}
		}
	case 226:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1310
		{
			yyVAL.partDefs = []*PartitionDefinition{yyDollar[1].partDef}
		}
	case 227:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1314
		{
			yyVAL.partDefs = append(yyDollar[1].partDefs, yyDollar[3].partDef)
		}
	case 228:
		yyDollar = yyS[yypt-8 : yypt+1]
//line sql.y:1320
		{
			yyVAL.partDef = &PartitionDefinition{Name: yyDollar[2].colIdent, Limit: yyDollar[7].expr}
		}
	case 229:
		yyDollar = yyS[yypt-8 : yypt+1]
//line sql.y:1324
		{
			yyVAL.partDef = &PartitionDefinition{Name: yyDollar[2].colIdent, Maxvalue: true}
		}
	case 230:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:1330
		{
			yyVAL.statement = &DDL{Action: RenameStr, Table: yyDollar[3].tableName, NewName: yyDollar[5].tableName}
		}
	case 231:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:1336
		{
			var exists bool
			if yyDollar[3].byt != 0 {
				exists = true
			}
			yyVAL.statement = &DDL{Action: DropStr, Table: yyDollar[4].tableName, IfExists: exists}
		}
	case 232:
		yyDollar = yyS[yypt-6 : yypt+1]
//line sql.y:1344
		{
			// Change this to an alter statement
			yyVAL.statement = &DDL{Action: AlterStr, Table: yyDollar[5].tableName, NewName: yyDollar[5].tableName}
		}
	case 233:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:1349
		{
			var exists bool
			if yyDollar[3].byt != 0 {
				exists = true
			}
			yyVAL.statement = &DDL{Action: DropStr, Table: yyDollar[4].tableName.ToViewName(), IfExists: exists}
		}
	case 234:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:1357
		{
			yyVAL.statement = &DBDDL{Action: DropStr, DBName: string(yyDollar[4].bytes)}
		}
	case 235:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:1361
		{
			yyVAL.statement = &DBDDL{Action: DropStr, DBName: string(yyDollar[4].bytes)}
		}
	case 236:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1367
		{
			yyVAL.statement = &DDL{Action: TruncateStr, Table: yyDollar[3].tableName}
		}
	case 237:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1371
		{
			yyVAL.statement = &DDL{Action: TruncateStr, Table: yyDollar[2].tableName}
		}
	case 238:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1376
		{
			yyVAL.statement = &DDL{Action: AlterStr, Table: yyDollar[3].tableName, NewName: yyDollar[3].tableName}
		}
	case 239:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:1382
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes) + " " + string(yyDollar[3].bytes)}
		}
	case 240:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:1386
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes) + " " + string(yyDollar[3].bytes)}
		}
	case 241:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:1390
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes) + " " + string(yyDollar[3].bytes)}
		}
	case 242:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:1395
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes) + " " + string(yyDollar[3].bytes)}
		}
	case 243:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:1399
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes) + " " + string(yyDollar[3].bytes)}
		}
	case 244:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:1403
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes) + " " + string(yyDollar[3].bytes)}
		}
	case 245:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:1407
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes) + " " + string(yyDollar[3].bytes)}
		}
	case 246:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:1411
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes) + " " + string(yyDollar[3].bytes)}
		}
	case 247:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1415
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes)}
		}
	case 248:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1419
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes)}
		}
	case 249:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1423
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes)}
		}
	case 250:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1427
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes)}
		}
	case 251:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:1431
		{
			yyVAL.statement = &Show{Scope: yyDollar[2].str, Type: string(yyDollar[3].bytes)}
		}
	case 252:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:1435
		{
			yyVAL.statement = &Show{Scope: yyDollar[2].str, Type: string(yyDollar[3].bytes)}
		}
	case 253:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1439
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes)}
		}
	case 254:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:1443
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes)}
		}
	case 255:
		yyDollar = yyS[yypt-6 : yypt+1]
//line sql.y:1447
		{
			// this is ugly, but I couldn't find a better way for now
			if yyDollar[4].str == "processlist" {
				yyVAL.statement = &Show{Type: yyDollar[4].str}
			} else {
				showTablesOpt := &ShowTablesOpt{Extended: yyDollar[2].str, Full: yyDollar[3].str, DbName: yyDollar[5].str, Filter: yyDollar[6].showFilter}
				yyVAL.statement = &Show{Type: yyDollar[4].str, ShowTablesOpt: showTablesOpt}
			}
		}
	case 256:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:1457
		{
			yyVAL.statement = &Show{Scope: yyDollar[2].str, Type: string(yyDollar[3].bytes)}
		}
	case 257:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:1461
		{
			yyVAL.statement = &Show{Scope: yyDollar[2].str, Type: string(yyDollar[3].bytes)}
		}
	case 258:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1465
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes)}
		}
	case 259:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:1469
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes), OnTable: yyDollar[4].tableName}
		}
	case 260:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1473
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes)}
		}
	case 261:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1477
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes)}
		}
	case 262:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1481
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes)}
		}
	case 263:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1485
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes)}
		}
	case 264:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1495
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes)}
		}
	case 265:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1501
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 266:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1505
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 267:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1511
		{
			yyVAL.str = ""
		}
	case 268:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1515
		{
			yyVAL.str = "extended "
		}
	case 269:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1521
		{
			yyVAL.str = ""
		}
	case 270:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1525
		{
			yyVAL.str = "full "
		}
	case 271:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1531
		{
			yyVAL.str = ""
		}
	case 272:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1535
		{
			yyVAL.str = yyDollar[2].tableIdent.v
		}
	case 273:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1539
		{
			yyVAL.str = yyDollar[2].tableIdent.v
		}
	case 274:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1545
		{
			yyVAL.showFilter = nil
		}
	case 275:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1549
		{
			yyVAL.showFilter = &ShowFilter{Like: string(yyDollar[2].bytes)}
		}
	case 276:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1553
		{
			yyVAL.showFilter = &ShowFilter{Filter: yyDollar[2].expr}
		}
	case 278:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1560
		{
			yyVAL.str = LocalStr
		}
	case 279:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1566
		{
			yyVAL.str = ""
		}
	case 280:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1570
		{
			yyVAL.str = SessionStr
		}
	case 281:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1574
		{
			yyVAL.str = GlobalStr
		}
	case 282:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1580
		{
			yyVAL.statement = &Use{DBName: yyDollar[2].tableIdent}
		}
	case 283:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1584
		{
			yyVAL.statement = &Use{DBName: TableIdent{v: ""}}
		}
	case 284:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1590
		{
			yyVAL.statement = &Begin{}
		}
	case 285:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1594
		{
			yyVAL.statement = &Begin{}
		}
	case 286:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1600
		{
			yyVAL.statement = &Commit{}
		}
	case 287:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1606
		{
			yyVAL.statement = &Rollback{}
		}
	case 288:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1612
		{
			yyVAL.statement = &OtherRead{}
		}
	case 289:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1616
		{
			yyVAL.statement = &OtherRead{}
		}
	case 290:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1620
		{
			yyVAL.statement = &OtherRead{}
		}
	case 291:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1624
		{
			yyVAL.statement = &OtherAdmin{}
		}
	case 292:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1628
		{
			yyVAL.statement = &OtherAdmin{}
		}
	case 293:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1634
		{
			yyVAL.statement = &DeallocatePrepare{PreparedStatementName: yyDollar[3].tableIdent}
		}
	case 294:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:1640
		{
			yyVAL.statement = &Prepare{PreparedStatementName: yyDollar[2].tableIdent, PreparedStatementQuery: yyDollar[4].preparedQuery}
		}
	case 295:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:1644
		{
			yyVAL.statement = &Prepare{PreparedStatementName: yyDollar[2].tableIdent, PreparedStatementQuery: yyDollar[4].preparedQuery}
		}
	case 296:
		yyDollar = yyS[yypt-7 : yypt+1]
//line sql.y:1648
		{
			yyVAL.statement = &Prepare{PreparedStatementName: yyDollar[2].tableIdent, ColumnTypes: yyDollar[4].columnTypes, PreparedStatementQuery: yyDollar[7].preparedQuery}
		}
	case 297:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1654
		{
			yyVAL.preparedQuery = yyDollar[1].selStmt.(*Select)
		}
	case 298:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1658
		{
			yyVAL.preparedQuery = yyDollar[1].statement.(*Insert)
		}
	case 299:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1662
		{
			yyVAL.preparedQuery = yyDollar[1].statement.(*Delete)
		}
	case 300:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1666
		{
			yyVAL.preparedQuery = yyDollar[1].statement.(*Update)
		}
	case 301:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1670
		{
			yyVAL.preparedQuery = NewTableIdent(string(yyDollar[1].bytes))
		}
	case 302:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1674
		{
			statement, err := NewPreparedQueryFromString(string(yyDollar[1].bytes))
			if statement == nil {
				yylex.Error("unsupported type of prepared query")
				return 1
			}
			if err != nil {
				yylex.Error("syntax error in prepared query")
				return 1
			}
			yyVAL.preparedQuery = statement
		}
	case 303:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1689
		{
			yyVAL.statement = &Execute{PreparedStatementName: NewTableIdent(string(yyDollar[2].bytes))}
		}
	case 304:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:1693
		{
			yyVAL.statement = &Execute{PreparedStatementName: NewTableIdent(string(yyDollar[2].bytes)), Using: yyDollar[4].usingInExecuteList}
		}
	case 305:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1699
		{
			yyVAL.usingInExecuteList = UsingInExecuteList{yyDollar[1].tableIdent}
		}
	case 306:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1703
		{
			yyVAL.usingInExecuteList = append(yyDollar[1].usingInExecuteList, yyDollar[3].tableIdent)
		}
	case 307:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1708
		{
			setAllowComments(yylex, true)
		}
	case 308:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1712
		{
			yyVAL.bytes2 = yyDollar[2].bytes2
			setAllowComments(yylex, false)
		}
	case 309:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1718
		{
			yyVAL.bytes2 = nil
		}
	case 310:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1722
		{
			yyVAL.bytes2 = append(yyDollar[1].bytes2, yyDollar[2].bytes)
		}
	case 311:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1728
		{
			yyVAL.str = UnionStr
		}
	case 312:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1732
		{
			yyVAL.str = UnionAllStr
		}
	case 313:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1736
		{
			yyVAL.str = UnionDistinctStr
		}
	case 314:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1741
		{
			yyVAL.str = ""
		}
	case 315:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1745
		{
			yyVAL.str = SQLNoCacheStr
		}
	case 316:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1749
		{
			yyVAL.str = SQLCacheStr
		}
	case 317:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1754
		{
			yyVAL.str = ""
		}
	case 318:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1758
		{
			yyVAL.str = DistinctStr
		}
	case 319:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1763
		{
			yyVAL.str = ""
		}
	case 320:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1767
		{
			yyVAL.str = StraightJoinHint
		}
	case 321:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1772
		{
			yyVAL.selectExprs = nil
		}
	case 322:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1776
		{
			yyVAL.selectExprs = yyDollar[1].selectExprs
		}
	case 323:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1782
		{
			yyVAL.selectExprs = SelectExprs{yyDollar[1].selectExpr}
		}
	case 324:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1786
		{
			yyVAL.selectExprs = append(yyVAL.selectExprs, yyDollar[3].selectExpr)
		}
	case 325:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1792
		{
			yyVAL.selectExpr = &StarExpr{}
		}
	case 326:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1796
		{
			yyVAL.selectExpr = &AliasedExpr{Expr: yyDollar[1].expr, As: yyDollar[2].colIdent}
		}
	case 327:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1800
		{
			yyVAL.selectExpr = &StarExpr{TableName: TableName{Name: yyDollar[1].tableIdent}}
		}
	case 328:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:1804
		{
			yyVAL.selectExpr = &StarExpr{TableName: TableName{Qualifier: yyDollar[1].tableIdent, Name: yyDollar[3].tableIdent}}
		}
	case 329:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1809
		{
			yyVAL.colIdent = ColIdent{}
		}
	case 330:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1813
		{
			yyVAL.colIdent = yyDollar[1].colIdent
		}
	case 331:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1817
		{
			yyVAL.colIdent = yyDollar[2].colIdent
		}
	case 332:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1823
		{
			yyVAL.colIdent = NewColIdentWithQuotes(string(yyDollar[1].bytes), '\'')
		}
	case 333:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1827
		{
			yyVAL.colIdent = NewColIdentWithQuotes(string(yyDollar[1].bytes), '"')
		}
	case 334:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1831
		{
			yyVAL.colIdent = NewColIdentWithQuotes(string(yyDollar[1].bytes), '`')
		}
	case 337:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1843
		{
			yyVAL.tableExprs = TableExprs{&AliasedTableExpr{Expr: TableName{Name: NewTableIdent("dual")}}}
		}
	case 338:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1847
		{
			yyVAL.tableExprs = yyDollar[2].tableExprs
		}
	case 339:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1853
		{
			yyVAL.tableExprs = TableExprs{yyDollar[1].tableExpr}
		}
	case 340:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1857
		{
			yyVAL.tableExprs = append(yyVAL.tableExprs, yyDollar[3].tableExpr)
		}
	case 343:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1867
		{
			yyVAL.tableExpr = yyDollar[1].aliasedTableName
		}
	case 344:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1871
		{
			yyVAL.tableExpr = &AliasedTableExpr{Expr: yyDollar[1].subquery, As: yyDollar[3].tableIdent}
		}
	case 345:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1875
		{
			yyVAL.tableExpr = &ParenTableExpr{Exprs: yyDollar[2].tableExprs}
		}
	case 346:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1881
		{
			yyVAL.aliasedTableName = &AliasedTableExpr{Expr: yyDollar[1].tableName, As: yyDollar[2].tableIdent, Hints: yyDollar[3].indexHints}
		}
	case 347:
		yyDollar = yyS[yypt-7 : yypt+1]
//line sql.y:1885
		{
			yyVAL.aliasedTableName = &AliasedTableExpr{Expr: yyDollar[1].tableName, Partitions: yyDollar[4].partitions, As: yyDollar[6].tableIdent, Hints: yyDollar[7].indexHints}
		}
	case 348:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1891
		{
			yyVAL.columns = Columns{yyDollar[1].colIdent}
		}
	case 349:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1895
		{
			yyVAL.columns = append(yyVAL.columns, yyDollar[3].colIdent)
		}
	case 350:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1901
		{
			yyVAL.partitions = Partitions{yyDollar[1].colIdent}
		}
	case 351:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1905
		{
			yyVAL.partitions = append(yyVAL.partitions, yyDollar[3].colIdent)
		}
	case 352:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:1918
		{
			yyVAL.tableExpr = &JoinTableExpr{LeftExpr: yyDollar[1].tableExpr, Join: yyDollar[2].str, RightExpr: yyDollar[3].tableExpr, Condition: yyDollar[4].joinCondition}
		}
	case 353:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:1922
		{
			yyVAL.tableExpr = &JoinTableExpr{LeftExpr: yyDollar[1].tableExpr, Join: yyDollar[2].str, RightExpr: yyDollar[3].tableExpr, Condition: yyDollar[4].joinCondition}
		}
	case 354:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:1926
		{
			yyVAL.tableExpr = &JoinTableExpr{LeftExpr: yyDollar[1].tableExpr, Join: yyDollar[2].str, RightExpr: yyDollar[3].tableExpr, Condition: yyDollar[4].joinCondition}
		}
	case 355:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1930
		{
			yyVAL.tableExpr = &JoinTableExpr{LeftExpr: yyDollar[1].tableExpr, Join: yyDollar[2].str, RightExpr: yyDollar[3].tableExpr}
		}
	case 356:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1936
		{
			yyVAL.joinCondition = JoinCondition{On: yyDollar[2].expr}
		}
	case 357:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:1938
		{
			yyVAL.joinCondition = JoinCondition{Using: yyDollar[3].columns}
		}
	case 358:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1942
		{
			yyVAL.joinCondition = JoinCondition{}
		}
	case 359:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1944
		{
			yyVAL.joinCondition = yyDollar[1].joinCondition
		}
	case 360:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1948
		{
			yyVAL.joinCondition = JoinCondition{}
		}
	case 361:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1950
		{
			yyVAL.joinCondition = JoinCondition{On: yyDollar[2].expr}
		}
	case 362:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1953
		{
			yyVAL.empty = struct{}{}
		}
	case 363:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1955
		{
			yyVAL.empty = struct{}{}
		}
	case 364:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1958
		{
			yyVAL.tableIdent = NewTableIdent("")
		}
	case 365:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1962
		{
			yyVAL.tableIdent = yyDollar[1].tableIdent
		}
	case 366:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1966
		{
			yyVAL.tableIdent = yyDollar[2].tableIdent
		}
	case 368:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1976
		{
			yyVAL.str = JoinStr
		}
	case 369:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1980
		{
			yyVAL.str = JoinStr
		}
	case 370:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1984
		{
			yyVAL.str = JoinStr
		}
	case 371:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1990
		{
			yyVAL.str = StraightJoinStr
		}
	case 372:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1996
		{
			yyVAL.str = LeftJoinStr
		}
	case 373:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2000
		{
			yyVAL.str = LeftJoinStr
		}
	case 374:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2004
		{
			yyVAL.str = RightJoinStr
		}
	case 375:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2008
		{
			yyVAL.str = RightJoinStr
		}
	case 376:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2014
		{
			yyVAL.str = NaturalJoinStr
		}
	case 377:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2018
		{
			if yyDollar[2].str == LeftJoinStr {
				yyVAL.str = NaturalLeftJoinStr
			} else {
				yyVAL.str = NaturalRightJoinStr
			}
		}
	case 378:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2028
		{
			yyVAL.tableName = yyDollar[2].tableName
		}
	case 379:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2032
		{
			yyVAL.tableName = yyDollar[1].tableName
		}
	case 380:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2038
		{
			yyVAL.tableName = TableName{Name: yyDollar[1].tableIdent}
		}
	case 381:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2042
		{
			yyVAL.tableName = TableName{Qualifier: yyDollar[1].tableIdent, Name: yyDollar[3].tableIdent}
		}
	case 382:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:2047
		{
			yyVAL.indexHints = nil
		}
	case 383:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:2051
		{
			yyVAL.indexHints = &IndexHints{Type: UseStr, Indexes: yyDollar[4].columns}
		}
	case 384:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:2055
		{
			yyVAL.indexHints = &IndexHints{Type: IgnoreStr, Indexes: yyDollar[4].columns}
		}
	case 385:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:2059
		{
			yyVAL.indexHints = &IndexHints{Type: ForceStr, Indexes: yyDollar[4].columns}
		}
	case 386:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:2064
		{
			yyVAL.expr = nil
		}
	case 387:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2068
		{
			yyVAL.expr = yyDollar[2].expr
		}
	case 388:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2074
		{
			yyVAL.expr = yyDollar[1].expr
		}
	case 389:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2078
		{
			yyVAL.expr = &AndExpr{Left: yyDollar[1].expr, Right: yyDollar[3].expr}
		}
	case 390:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2082
		{
			yyVAL.expr = &OrExpr{Left: yyDollar[1].expr, Right: yyDollar[3].expr}
		}
	case 391:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2086
		{
			yyVAL.expr = &NotExpr{Expr: yyDollar[2].expr}
		}
	case 392:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2090
		{
			yyVAL.expr = &IsExpr{Operator: yyDollar[3].str, Expr: yyDollar[1].expr}
		}
	case 393:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2094
		{
			yyVAL.expr = yyDollar[1].expr
		}
	case 394:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2098
		{
			yyVAL.expr = &Default{ColName: yyDollar[2].str}
		}
	case 395:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:2104
		{
			yyVAL.str = ""
		}
	case 396:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2108
		{
			yyVAL.str = string(yyDollar[2].bytes)
		}
	case 397:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2114
		{
			yyVAL.boolVal = BoolVal(true)
		}
	case 398:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2118
		{
			yyVAL.boolVal = BoolVal(false)
		}
	case 399:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2124
		{
			yyVAL.expr = &ComparisonExpr{Left: yyDollar[1].expr, Operator: yyDollar[2].str, Right: yyDollar[3].expr}
		}
	case 400:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2128
		{
			yyVAL.expr = &ComparisonExpr{Left: yyDollar[1].expr, Operator: InStr, Right: yyDollar[3].colTuple}
		}
	case 401:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:2132
		{
			yyVAL.expr = &ComparisonExpr{Left: yyDollar[1].expr, Operator: NotInStr, Right: yyDollar[4].colTuple}
		}
	case 402:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:2136
		{
			yyVAL.expr = &ComparisonExpr{Left: yyDollar[1].expr, Operator: LikeStr, Right: yyDollar[3].expr, Escape: yyDollar[4].expr}
		}
	case 403:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:2140
		{
			yyVAL.expr = &ComparisonExpr{Left: yyDollar[1].expr, Operator: NotLikeStr, Right: yyDollar[4].expr, Escape: yyDollar[5].expr}
		}
	case 404:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2144
		{
			yyVAL.expr = &ComparisonExpr{Left: yyDollar[1].expr, Operator: RegexpStr, Right: yyDollar[3].expr}
		}
	case 405:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:2148
		{
			yyVAL.expr = &ComparisonExpr{Left: yyDollar[1].expr, Operator: NotRegexpStr, Right: yyDollar[4].expr}
		}
	case 406:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:2152
		{
			yyVAL.expr = &RangeCond{Left: yyDollar[1].expr, Operator: BetweenStr, From: yyDollar[3].expr, To: yyDollar[5].expr}
		}
	case 407:
		yyDollar = yyS[yypt-6 : yypt+1]
//line sql.y:2156
		{
			yyVAL.expr = &RangeCond{Left: yyDollar[1].expr, Operator: NotBetweenStr, From: yyDollar[4].expr, To: yyDollar[6].expr}
		}
	case 408:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2160
		{
			yyVAL.expr = &ExistsExpr{Subquery: yyDollar[2].subquery}
		}
	case 409:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2166
		{
			yyVAL.str = IsNullStr
		}
	case 410:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2170
		{
			yyVAL.str = IsNotNullStr
		}
	case 411:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2174
		{
			yyVAL.str = IsTrueStr
		}
	case 412:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2178
		{
			yyVAL.str = IsNotTrueStr
		}
	case 413:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2182
		{
			yyVAL.str = IsFalseStr
		}
	case 414:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2186
		{
			yyVAL.str = IsNotFalseStr
		}
	case 415:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2192
		{
			yyVAL.str = EqualStr
		}
	case 416:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2196
		{
			yyVAL.str = LessThanStr
		}
	case 417:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2200
		{
			yyVAL.str = GreaterThanStr
		}
	case 418:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2204
		{
			yyVAL.str = LessEqualStr
		}
	case 419:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2208
		{
			yyVAL.str = GreaterEqualStr
		}
	case 420:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2212
		{
			yyVAL.str = NotEqualStr
		}
	case 421:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2216
		{
			yyVAL.str = NullSafeEqualStr
		}
	case 422:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:2221
		{
			yyVAL.expr = nil
		}
	case 423:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2225
		{
			yyVAL.expr = yyDollar[2].expr
		}
	case 424:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2231
		{
			yyVAL.colTuple = yyDollar[1].valTuple
		}
	case 425:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2235
		{
			yyVAL.colTuple = yyDollar[1].subquery
		}
	case 426:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2239
		{
			yyVAL.colTuple = ListArg(yyDollar[1].bytes)
		}
	case 427:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2245
		{
			yyVAL.subquery = &Subquery{yyDollar[2].selStmt}
		}
	case 428:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2251
		{
			yyVAL.exprs = Exprs{yyDollar[1].expr}
		}
	case 429:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2255
		{
			yyVAL.exprs = append(yyDollar[1].exprs, yyDollar[3].expr)
		}
	case 430:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2262
		{
			yyVAL.expr = yyDollar[1].colName
		}
	case 431:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2266
		{
			yyVAL.expr = yyDollar[1].expr
		}
	case 432:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2270
		{
			yyVAL.expr = yyDollar[1].boolVal
		}
	case 433:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2274
		{
			yyVAL.expr = yyDollar[1].expr
		}
	case 434:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2278
		{
			yyVAL.expr = yyDollar[1].subquery
		}
	case 435:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2282
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: BitAndStr, Right: yyDollar[3].expr}
		}
	case 436:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2286
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: BitOrStr, Right: yyDollar[3].expr}
		}
	case 437:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2290
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: BitXorStr, Right: yyDollar[3].expr}
		}
	case 438:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2294
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: PlusStr, Right: yyDollar[3].expr}
		}
	case 439:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2298
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: MinusStr, Right: yyDollar[3].expr}
		}
	case 440:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2302
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: MultStr, Right: yyDollar[3].expr}
		}
	case 441:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2306
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: DivStr, Right: yyDollar[3].expr}
		}
	case 442:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2310
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: IntDivStr, Right: yyDollar[3].expr}
		}
	case 443:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2314
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: ModStr, Right: yyDollar[3].expr}
		}
	case 444:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2318
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: ModStr, Right: yyDollar[3].expr}
		}
	case 445:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2322
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: ShiftLeftStr, Right: yyDollar[3].expr}
		}
	case 446:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2326
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: ShiftRightStr, Right: yyDollar[3].expr}
		}
	case 447:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2330
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].colName, Operator: JSONExtractOp, Right: yyDollar[3].expr}
		}
	case 448:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2334
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].colName, Operator: JSONUnquoteExtractOp, Right: yyDollar[3].expr}
		}
	case 449:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2338
		{
			yyVAL.expr = &CollateExpr{Expr: yyDollar[1].expr, Charset: yyDollar[3].str}
		}
	case 450:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2342
		{
			yyVAL.expr = &UnaryExpr{Operator: BinaryStr, Expr: yyDollar[2].expr}
		}
	case 451:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2346
		{
			yyVAL.expr = &UnaryExpr{Operator: UBinaryStr, Expr: yyDollar[2].expr}
		}
	case 452:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2350
		{
			if num, ok := yyDollar[2].expr.(*SQLVal); ok && num.Type == IntVal {
				yyVAL.expr = num
			} else {
				yyVAL.expr = &UnaryExpr{Operator: UPlusStr, Expr: yyDollar[2].expr}
			}
		}
	case 453:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2358
		{
			if num, ok := yyDollar[2].expr.(*SQLVal); ok && num.Type == IntVal {
				// Handle double negative
				if num.Val[0] == '-' {
					num.Val = num.Val[1:]
					yyVAL.expr = num
				} else {
					yyVAL.expr = NewIntVal(append([]byte("-"), num.Val...))
				}
			} else {
				yyVAL.expr = &UnaryExpr{Operator: UMinusStr, Expr: yyDollar[2].expr}
			}
		}
	case 454:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2372
		{
			yyVAL.expr = &UnaryExpr{Operator: TildaStr, Expr: yyDollar[2].expr}
		}
	case 455:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2376
		{
			yyVAL.expr = &UnaryExpr{Operator: BangStr, Expr: yyDollar[2].expr}
		}
	case 456:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2380
		{
			yyVAL.expr = yyDollar[1].intervalExpr
		}
	case 457:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2384
		{
			yyVAL.expr = yyDollar[1].intervalExpr
		}
	case 462:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2394
		{
			if yylex.(*Tokenizer).IsMySQL() {
				yylex.Error("MySQL don't support PostgreSQL syntax of interval expression")
				return 1
			}
			// Postgresql type of interval where interval value is string with values+units
			yyVAL.intervalExpr = &IntervalExpr{Expr: NewStrVal(yyDollar[2].bytes)}
		}
	case 463:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2405
		{
			if yylex.(*Tokenizer).IsPostgreSQL() {
				yylex.Error("PostgreSQL don't support Mysql syntax of interval expression")
				return 1
			}
			// This rule prevents the usage of INTERVAL
			// as a function. If support is needed for that,
			// we'll need to revisit this. The solution
			// will be non-trivial because of grammar conflicts.
			yyVAL.intervalExpr = &IntervalExpr{Expr: yyDollar[2].expr, Unit: string(yyDollar[3].bytes)}
		}
	case 464:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:2423
		{
			yyVAL.expr = &FuncExpr{Name: yyDollar[1].colIdent, Exprs: yyDollar[3].selectExprs}
		}
	case 465:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:2427
		{
			yyVAL.expr = &FuncExpr{Name: yyDollar[1].colIdent, Distinct: true, Exprs: yyDollar[4].selectExprs}
		}
	case 466:
		yyDollar = yyS[yypt-6 : yypt+1]
//line sql.y:2431
		{
			yyVAL.expr = &FuncExpr{Qualifier: yyDollar[1].tableIdent, Name: yyDollar[3].colIdent, Exprs: yyDollar[5].selectExprs}
		}
	case 467:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:2441
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("left"), Exprs: yyDollar[3].selectExprs}
		}
	case 468:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:2445
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("right"), Exprs: yyDollar[3].selectExprs}
		}
	case 469:
		yyDollar = yyS[yypt-6 : yypt+1]
//line sql.y:2449
		{
			yyVAL.expr = &ConvertExpr{Expr: yyDollar[3].expr, Type: yyDollar[5].convertType}
		}
	case 470:
		yyDollar = yyS[yypt-6 : yypt+1]
//line sql.y:2453
		{
			yyVAL.expr = &ConvertExpr{Expr: yyDollar[3].expr, Type: yyDollar[5].convertType}
		}
	case 471:
		yyDollar = yyS[yypt-6 : yypt+1]
//line sql.y:2457
		{
			yyVAL.expr = &ConvertUsingExpr{Expr: yyDollar[3].expr, Type: yyDollar[5].str}
		}
	case 472:
		yyDollar = yyS[yypt-6 : yypt+1]
//line sql.y:2461
		{
			yyVAL.expr = &SubstrExpr{Name: yyDollar[3].colName, From: yyDollar[5].expr, To: nil}
		}
	case 473:
		yyDollar = yyS[yypt-8 : yypt+1]
//line sql.y:2465
		{
			yyVAL.expr = &SubstrExpr{Name: yyDollar[3].colName, From: yyDollar[5].expr, To: yyDollar[7].expr}
		}
	case 474:
		yyDollar = yyS[yypt-8 : yypt+1]
//line sql.y:2469
		{
			yyVAL.expr = &SubstrExpr{Name: yyDollar[3].colName, From: yyDollar[5].expr, To: yyDollar[7].expr}
		}
	case 475:
		yyDollar = yyS[yypt-6 : yypt+1]
//line sql.y:2473
		{
			yyVAL.expr = &SubstrExpr{Name: yyDollar[3].colName, From: yyDollar[5].expr, To: nil}
		}
	case 476:
		yyDollar = yyS[yypt-8 : yypt+1]
//line sql.y:2477
		{
			yyVAL.expr = &SubstrExpr{Name: yyDollar[3].colName, From: yyDollar[5].expr, To: yyDollar[7].expr}
		}
	case 477:
		yyDollar = yyS[yypt-8 : yypt+1]
//line sql.y:2481
		{
			yyVAL.expr = &SubstrExpr{Name: yyDollar[3].colName, From: yyDollar[5].expr, To: yyDollar[7].expr}
		}
	case 478:
		yyDollar = yyS[yypt-9 : yypt+1]
//line sql.y:2485
		{
			yyVAL.expr = &MatchExpr{Columns: yyDollar[3].selectExprs, Expr: yyDollar[7].expr, Option: yyDollar[8].str}
		}
	case 479:
		yyDollar = yyS[yypt-7 : yypt+1]
//line sql.y:2489
		{
			yyVAL.expr = &GroupConcatExpr{Distinct: yyDollar[3].str, Exprs: yyDollar[4].selectExprs, OrderBy: yyDollar[5].orderBy, Separator: yyDollar[6].str}
		}
	case 480:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:2493
		{
			yyVAL.expr = &CaseExpr{Expr: yyDollar[2].expr, Whens: yyDollar[3].whens, Else: yyDollar[4].expr}
		}
	case 481:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:2497
		{
			yyVAL.expr = &ValuesFuncExpr{Name: yyDollar[3].colName}
		}
	case 482:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2509
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("current_timestamp")}
		}
	case 483:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2513
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("utc_timestamp")}
		}
	case 484:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2517
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("utc_time")}
		}
	case 485:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2521
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("utc_date")}
		}
	case 486:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2526
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("localtime")}
		}
	case 487:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2531
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("localtimestamp")}
		}
	case 488:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2536
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("current_date")}
		}
	case 489:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2541
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("current_time")}
		}
	case 492:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:2555
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("if"), Exprs: yyDollar[3].selectExprs}
		}
	case 493:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:2559
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("database"), Exprs: yyDollar[3].selectExprs}
		}
	case 494:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:2563
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("mod"), Exprs: yyDollar[3].selectExprs}
		}
	case 495:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:2567
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("replace"), Exprs: yyDollar[3].selectExprs}
		}
	case 496:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:2573
		{
			yyVAL.str = ""
		}
	case 497:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2577
		{
			yyVAL.str = BooleanModeStr
		}
	case 498:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:2581
		{
			yyVAL.str = NaturalLanguageModeStr
		}
	case 499:
		yyDollar = yyS[yypt-7 : yypt+1]
//line sql.y:2585
		{
			yyVAL.str = NaturalLanguageModeWithQueryExpansionStr
		}
	case 500:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2589
		{
			yyVAL.str = QueryExpansionStr
		}
	case 501:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2595
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 502:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2599
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 503:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2605
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal}
		}
	case 504:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2609
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal, Charset: yyDollar[3].str, Operator: CharacterSetStr}
		}
	case 505:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2613
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal, Charset: string(yyDollar[3].bytes)}
		}
	case 506:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2617
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
		}
	case 507:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2621
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal}
		}
	case 508:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2625
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
			yyVAL.convertType.Length = yyDollar[2].LengthScaleOption.Length
			yyVAL.convertType.Scale = yyDollar[2].LengthScaleOption.Scale
		}
	case 509:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2631
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
		}
	case 510:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2635
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal}
		}
	case 511:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2639
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
		}
	case 512:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2643
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
		}
	case 513:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2647
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal}
		}
	case 514:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2651
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
		}
	case 515:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2655
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
		}
	case 516:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:2659
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
		}
	case 517:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:2664
		{
			yyVAL.expr = nil
		}
	case 518:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2668
		{
			yyVAL.expr = yyDollar[1].expr
		}
	case 519:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:2673
		{
			yyVAL.str = string("")
		}
	case 520:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2677
		{
			yyVAL.str = " separator '" + string(yyDollar[2].bytes) + "'"
		}
	case 521:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2683
		{
			yyVAL.whens = []*When{yyDollar[1].when}
		}
	case 522:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2687
		{
			yyVAL.whens = append(yyDollar[1].whens, yyDollar[2].when)
		}
	case 523:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:2693
		{
			yyVAL.when = &When{Cond: yyDollar[2].expr, Val: yyDollar[4].expr}
		}
	case 524:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:2698
		{
			yyVAL.expr = nil
		}
	case 525:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2702
		{
			yyVAL.expr = yyDollar[2].expr
		}
	case 526:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2708
		{
			yyVAL.colName = &ColName{Name: yyDollar[1].colIdent}
		}
	case 527:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2712
		{
			yyVAL.colName = &ColName{Qualifier: TableName{Name: yyDollar[1].tableIdent}, Name: yyDollar[3].colIdent}
		}
	case 528:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:2716
		{
			yyVAL.colName = &ColName{Qualifier: TableName{Qualifier: yyDollar[1].tableIdent, Name: yyDollar[3].tableIdent}, Name: yyDollar[5].colIdent}
		}
	case 529:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2722
		{
			yyVAL.expr = NewStrVal(yyDollar[1].bytes)
		}
	case 530:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2726
		{
			val, err := NewMySQLDoubleQuotedStrVal(yyDollar[1].bytes)
			if err != nil {
				yylex.Error("dialect don't allow to use double quotes for string literals. " + err.Error())
				return 1
			}
			yyVAL.expr = val
		}
	case 531:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2735
		{
			yyVAL.expr = NewHexVal(yyDollar[1].bytes)
		}
	case 532:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2739
		{
			yyVAL.expr = NewBitVal(yyDollar[1].bytes)
		}
	case 533:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2743
		{
			yyVAL.expr = NewIntVal(yyDollar[1].bytes)
		}
	case 534:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2747
		{
			yyVAL.expr = NewFloatVal(yyDollar[1].bytes)
		}
	case 535:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2751
		{
			yyVAL.expr = NewHexNum(yyDollar[1].bytes)
		}
	case 536:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2755
		{
			yyVAL.expr = NewValArg(yyDollar[1].bytes)
		}
	case 537:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2759
		{
			yyVAL.expr = &NullVal{}
		}
	case 538:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2763
		{
			yyVAL.expr = NewPgEscapeString(yyDollar[1].bytes)
		}
	case 539:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2767
		{
			result, err := NewDollarExpr(string(yyDollar[1].bytes))
			if err != nil {
				yylex.Error("syntax error")
				return 1
			}
			yyVAL.expr = result
		}
	case 540:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2776
		{
			yyVAL.expr = NewCastVal(yyDollar[1].expr, yyDollar[2].bytes)
		}
	case 541:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2780
		{
			yyVAL.expr = &Default{}
		}
	case 542:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2786
		{
			yyVAL.bytes = yyDollar[1].bytes
		}
	case 543:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2791
		{
			yyVAL.bytes = append(yyDollar[1].bytes, yyDollar[2].bytes...)
		}
	case 544:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2799
		{
			// TODO(sougou): Deprecate this construct.
			if yyDollar[1].colIdent.Lowered() != "value" {
				yylex.Error("expecting value after next")
				return 1
			}
			yyVAL.expr = NewIntVal([]byte("1"))
		}
	case 545:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2808
		{
			yyVAL.expr = NewIntVal(yyDollar[1].bytes)
		}
	case 546:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2812
		{
			yyVAL.expr = NewValArg(yyDollar[1].bytes)
		}
	case 547:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:2817
		{
			yyVAL.exprs = nil
		}
	case 548:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2821
		{
			yyVAL.exprs = yyDollar[3].exprs
		}
	case 549:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:2826
		{
			yyVAL.expr = nil
		}
	case 550:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2830
		{
			yyVAL.expr = yyDollar[2].expr
		}
	case 551:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:2835
		{
			yyVAL.orderBy = nil
		}
	case 552:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2839
		{
			yyVAL.orderBy = yyDollar[3].orderBy
		}
	case 553:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2845
		{
			yyVAL.orderBy = OrderBy{yyDollar[1].order}
		}
	case 554:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2849
		{
			yyVAL.orderBy = append(yyDollar[1].orderBy, yyDollar[3].order)
		}
	case 555:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2855
		{
			yyVAL.order = &Order{Expr: yyDollar[1].expr, Direction: yyDollar[2].str}
		}
	case 556:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:2860
		{
			yyVAL.str = AscScr
		}
	case 557:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2864
		{
			yyVAL.str = AscScr
		}
	case 558:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2868
		{
			yyVAL.str = DescScr
		}
	case 559:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:2873
		{
			yyVAL.limit = nil
		}
	case 560:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2877
		{
			yyVAL.limit = &Limit{Rowcount: yyDollar[2].expr}
		}
	case 561:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:2881
		{
			yyVAL.limit = &Limit{Offset: yyDollar[2].expr, Rowcount: yyDollar[4].expr}
		}
	case 562:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:2885
		{
			yyVAL.limit = &Limit{Offset: yyDollar[4].expr, Rowcount: yyDollar[2].expr}
		}
	case 563:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:2890
		{
			yyVAL.str = ""
		}
	case 564:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2894
		{
			yyVAL.str = ForUpdateStr
		}
	case 565:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:2898
		{
			yyVAL.str = ShareModeStr
		}
	case 566:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2911
		{
			yyVAL.ins = &Insert{Rows: yyDollar[2].values}
		}
	case 567:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2915
		{
			yyVAL.ins = &Insert{Rows: yyDollar[1].selStmt}
		}
	case 568:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2919
		{
			// Drop the redundant parenthesis.
			yyVAL.ins = &Insert{Rows: yyDollar[2].selStmt}
		}
	case 569:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:2924
		{
			yyVAL.ins = &Insert{Columns: yyDollar[2].columns, Rows: yyDollar[5].values}
		}
	case 570:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:2928
		{
			yyVAL.ins = &Insert{Columns: yyDollar[2].columns, Rows: yyDollar[4].selStmt}
		}
	case 571:
		yyDollar = yyS[yypt-6 : yypt+1]
//line sql.y:2932
		{
			// Drop the redundant parenthesis.
			yyVAL.ins = &Insert{Columns: yyDollar[2].columns, Rows: yyDollar[5].selStmt}
		}
	case 572:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2939
		{
			yyVAL.columns = Columns{yyDollar[1].colIdent}
		}
	case 573:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2943
		{
			yyVAL.columns = Columns{yyDollar[3].colIdent}
		}
	case 574:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2947
		{
			yyVAL.columns = append(yyVAL.columns, yyDollar[3].colIdent)
		}
	case 575:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:2951
		{
			yyVAL.columns = append(yyVAL.columns, yyDollar[5].colIdent)
		}
	case 576:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:2956
		{
			yyVAL.updateExprs = nil
		}
	case 577:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:2960
		{
			yyVAL.updateExprs = yyDollar[5].updateExprs
		}
	case 578:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2966
		{
			yyVAL.values = Values{yyDollar[1].valTuple}
		}
	case 579:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2970
		{
			yyVAL.values = append(yyDollar[1].values, yyDollar[3].valTuple)
		}
	case 580:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2976
		{
			yyVAL.valTuple = yyDollar[1].valTuple
		}
	case 581:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2980
		{
			yyVAL.valTuple = ValTuple{}
		}
	case 582:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2986
		{
			yyVAL.valTuple = ValTuple(yyDollar[2].exprs)
		}
	case 583:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2992
		{
			if len(yyDollar[1].valTuple) == 1 {
				yyVAL.expr = &ParenExpr{yyDollar[1].valTuple[0]}
			} else {
				yyVAL.expr = yyDollar[1].valTuple
			}
		}
	case 584:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:3001
		{
			yyVAL.returning = nil
		}
	case 585:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:3006
		{
			yyVAL.returning = Returning{&StarExpr{}}
		}
	case 586:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:3011
		{
			yyVAL.returning = Returning(yyDollar[2].exprs)
		}
	case 587:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3018
		{
			yyVAL.updateExprs = UpdateExprs{yyDollar[1].updateExpr}
		}
	case 588:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:3022
		{
			yyVAL.updateExprs = append(yyDollar[1].updateExprs, yyDollar[3].updateExpr)
		}
	case 589:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:3028
		{
			yyVAL.updateExpr = &UpdateExpr{Name: yyDollar[1].colName, Expr: yyDollar[3].expr}
		}
	case 590:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3034
		{
			yyVAL.setExprs = SetExprs{yyDollar[1].setExpr}
		}
	case 591:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:3038
		{
			yyVAL.setExprs = append(yyDollar[1].setExprs, yyDollar[3].setExpr)
		}
	case 592:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:3042
		{
			yyVAL.setExprs = SetExprs{&SetExpr{Name: yyDollar[1].colIdent, Expr: yyDollar[3].expr}, &SetExpr{Name: yyDollar[1].colIdent, Expr: yyDollar[5].expr}}
		}
	case 593:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:3048
		{
			yyVAL.setExpr = &SetExpr{Name: yyDollar[1].colIdent, Expr: NewStrVal([]byte("on"))}
		}
	case 594:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:3052
		{
			yyVAL.setExpr = &SetExpr{Name: yyDollar[1].colIdent, Expr: yyDollar[3].expr}
		}
	case 595:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:3056
		{
			yyVAL.setExpr = &SetExpr{Name: NewColIdent(string(yyDollar[1].bytes)), Expr: yyDollar[2].expr}
		}
	case 596:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:3060
		{
			yyVAL.setExpr = &SetExpr{Name: yyDollar[1].colIdent, Expr: yyDollar[3].expr}
		}
	case 598:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:3067
		{
			yyVAL.bytes = []byte("charset")
		}
	case 600:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3074
		{
			yyVAL.expr = NewStrVal([]byte(yyDollar[1].colIdent.String()))
		}
	case 601:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3078
		{
			yyVAL.expr = NewStrVal(yyDollar[1].bytes)
		}
	case 602:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3082
		{
			yyVAL.expr = &Default{}
		}
	case 605:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:3091
		{
			yyVAL.byt = 0
		}
	case 606:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:3093
		{
			yyVAL.byt = 1
		}
	case 607:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:3096
		{
			yyVAL.empty = struct{}{}
		}
	case 608:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:3098
		{
			yyVAL.empty = struct{}{}
		}
	case 609:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:3101
		{
			yyVAL.str = ""
		}
	case 610:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3103
		{
			yyVAL.str = IgnoreStr
		}
	case 611:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3107
		{
			yyVAL.empty = struct{}{}
		}
	case 612:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3109
		{
			yyVAL.empty = struct{}{}
		}
	case 613:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3111
		{
			yyVAL.empty = struct{}{}
		}
	case 614:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3113
		{
			yyVAL.empty = struct{}{}
		}
	case 615:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3115
		{
			yyVAL.empty = struct{}{}
		}
	case 616:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3117
		{
			yyVAL.empty = struct{}{}
		}
	case 617:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3119
		{
			yyVAL.empty = struct{}{}
		}
	case 618:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3121
		{
			yyVAL.empty = struct{}{}
		}
	case 619:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3123
		{
			yyVAL.empty = struct{}{}
		}
	case 620:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3125
		{
			yyVAL.empty = struct{}{}
		}
	case 621:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:3128
		{
			yyVAL.empty = struct{}{}
		}
	case 622:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3130
		{
			yyVAL.empty = struct{}{}
		}
	case 623:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3132
		{
			yyVAL.empty = struct{}{}
		}
	case 624:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3136
		{
			yyVAL.empty = struct{}{}
		}
	case 625:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3138
		{
			yyVAL.empty = struct{}{}
		}
	case 626:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:3141
		{
			yyVAL.empty = struct{}{}
		}
	case 627:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3143
		{
			yyVAL.empty = struct{}{}
		}
	case 628:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3145
		{
			yyVAL.empty = struct{}{}
		}
	case 629:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:3148
		{
			yyVAL.colIdent = ColIdent{}
		}
	case 630:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:3150
		{
			yyVAL.colIdent = yyDollar[2].colIdent
		}
	case 631:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3154
		{
			yyVAL.colIdent = NewColIdent(string(yyDollar[1].bytes))
		}
	case 632:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3158
		{
			yyVAL.colIdent = NewColIdent(string(yyDollar[1].bytes))
		}
	case 634:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3165
		{
			yyVAL.colIdent = NewColIdent(string(yyDollar[1].bytes))
		}
	case 635:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3171
		{
			if yylex.(*Tokenizer).IsMySQL() && !yylex.(*Tokenizer).dialect.(*mysql.MySQLDialect).IsModeANSIOn() {
				yylex.Error("MySQL dialect configured ANSI_mode=off and doesn't allow double quoted table identifiers")
				return 1
			}
			yyVAL.tableIdent = NewTableIdentWithQuotes(string(yyDollar[1].bytes), '"')
		}
	case 636:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3179
		{
			if yylex.(*Tokenizer).IsPostgreSQL() {
				yylex.Error("PostgreSQL dialect doesn't allow to use backtick quotes for table identifiers")
				return 1
			}
			yyVAL.tableIdent = NewTableIdentWithQuotes(string(yyDollar[1].bytes), '`')
		}
	case 637:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3187
		{
			yyVAL.tableIdent = NewTableIdentWithQuotes(string(yyDollar[1].bytes), '\'')
		}
	case 638:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3192
		{
			yyVAL.tableIdent = NewTableIdent(string(yyDollar[1].bytes))
		}
	case 639:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3196
		{
			yyVAL.tableIdent = NewTableIdent(string(yyDollar[1].bytes))
		}
	case 641:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3203
		{
			yyVAL.tableIdent = NewTableIdent(string(yyDollar[1].bytes))
		}
	case 855:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3448
		{
			if incNesting(yylex) {
				yylex.Error("max nesting level reached")
				return 1
			}
		}
	case 856:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3457
		{
			decNesting(yylex)
		}
	case 857:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:3462
		{
			forceEOF(yylex)
		}
	case 858:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:3467
		{
			forceEOF(yylex)
		}
	case 859:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3471
		{
			forceEOF(yylex)
		}
	case 860:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3475
		{
			forceEOF(yylex)
		}
	}
	goto yystack /* stack new state and value */
}
