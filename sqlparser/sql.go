// Code generated by goyacc -o sql.go sql.y. DO NOT EDIT.

//line sql.y:18
package sqlparser

import __yyfmt__ "fmt"

//line sql.y:18

import "github.com/cossacklabs/acra/sqlparser/dialect/mysql"

func setParseTree(yylex interface{}, stmt Statement) {
	yylex.(*Tokenizer).ParseTree = stmt
}

func setAllowComments(yylex interface{}, allow bool) {
	yylex.(*Tokenizer).AllowComments = allow
}

func setDDL(yylex interface{}, ddl *DDL) {
	yylex.(*Tokenizer).partialDDL = ddl
}

func incNesting(yylex interface{}) bool {
	yylex.(*Tokenizer).nesting++
	if yylex.(*Tokenizer).nesting == 200 {
		return true
	}
	return false
}

func decNesting(yylex interface{}) {
	yylex.(*Tokenizer).nesting--
}

// forceEOF forces the lexer to end prematurely. Not all SQL statements
// are supported by the Parser, thus calling forceEOF will make the lexer
// return EOF early.
func forceEOF(yylex interface{}) {
	yylex.(*Tokenizer).ForceEOF = true
}

//line sql.y:55
type yySymType struct {
	yys                int
	empty              struct{}
	statement          Statement
	selStmt            SelectStatement
	ddl                *DDL
	ins                *Insert
	byt                byte
	bytes              []byte
	bytes2             [][]byte
	str                string
	strs               []string
	selectExprs        SelectExprs
	selectExpr         SelectExpr
	columns            Columns
	partitions         Partitions
	colName            *ColName
	tableExprs         TableExprs
	tableExpr          TableExpr
	joinCondition      JoinCondition
	tableName          TableName
	tableNames         TableNames
	indexHints         *IndexHints
	returning          Returning
	expr               Expr
	exprs              Exprs
	boolVal            BoolVal
	colTuple           ColTuple
	values             Values
	valTuple           ValTuple
	subquery           *Subquery
	whens              []*When
	when               *When
	orderBy            OrderBy
	order              *Order
	limit              *Limit
	updateExprs        UpdateExprs
	setExprs           SetExprs
	updateExpr         *UpdateExpr
	setExpr            *SetExpr
	colIdent           ColIdent
	tableIdent         TableIdent
	usingInExecuteList UsingInExecuteList
	convertType        *ConvertType
	aliasedTableName   *AliasedTableExpr
	TableSpec          *TableSpec
	columnType         ColumnType
	columnTypes        []ColumnType
	colKeyOpt          ColumnKeyOption
	optVal             *SQLVal
	LengthScaleOption  LengthScaleOption
	columnDefinition   *ColumnDefinition
	indexDefinition    *IndexDefinition
	indexInfo          *IndexInfo
	indexOption        *IndexOption
	indexOptions       []*IndexOption
	indexColumn        *IndexColumn
	indexColumns       []*IndexColumn
	partDefs           []*PartitionDefinition
	partDef            *PartitionDefinition
	partSpec           *PartitionSpec
	vindexParam        VindexParam
	vindexParams       []VindexParam
	showFilter         *ShowFilter
	preparedQuery      PreparedQuery
	intervalExpr       *IntervalExpr
}

const LEX_ERROR = 57346
const UNION = 57347
const SELECT = 57348
const STREAM = 57349
const INSERT = 57350
const UPDATE = 57351
const DELETE = 57352
const FROM = 57353
const WHERE = 57354
const GROUP = 57355
const HAVING = 57356
const ORDER = 57357
const BY = 57358
const LIMIT = 57359
const OFFSET = 57360
const FOR = 57361
const ALL = 57362
const DISTINCT = 57363
const AS = 57364
const EXISTS = 57365
const ASC = 57366
const DESC = 57367
const INTO = 57368
const DUPLICATE = 57369
const KEY = 57370
const DEFAULT = 57371
const SET = 57372
const LOCK = 57373
const KEYS = 57374
const NULLS = 57375
const FIRST = 57376
const LAST = 57377
const VALUES = 57378
const LAST_INSERT_ID = 57379
const NEXT = 57380
const VALUE = 57381
const SHARE = 57382
const MODE = 57383
const SQL_NO_CACHE = 57384
const SQL_CACHE = 57385
const JOIN = 57386
const STRAIGHT_JOIN = 57387
const LEFT = 57388
const RIGHT = 57389
const INNER = 57390
const OUTER = 57391
const CROSS = 57392
const NATURAL = 57393
const USE = 57394
const FORCE = 57395
const ON = 57396
const USING = 57397
const INTERVAL = 57398
const ID = 57399
const PG_ESCAPE_STRING = 57400
const HEX = 57401
const SINGLE_QUOTE_STRING = 57402
const DOUBLE_QUOTE_STRING = 57403
const BACK_QUOTE_STRING = 57404
const INTEGRAL = 57405
const FLOAT = 57406
const HEXNUM = 57407
const VALUE_ARG = 57408
const COMMENT = 57409
const COMMENT_KEYWORD = 57410
const BIT_LITERAL = 57411
const DOLLAR_SIGN = 57412
const LIST_ARG = 57413
const NULL = 57414
const TRUE = 57415
const FALSE = 57416
const MICROSECOND = 57417
const SECOND = 57418
const MINUTE = 57419
const HOUR = 57420
const DAY = 57421
const WEEK = 57422
const MONTH = 57423
const QUARTER = 57424
const SECOND_MICROSECOND = 57425
const MINUTE_MICROSECOND = 57426
const MINUTE_SECOND = 57427
const HOUR_MICROSECOND = 57428
const HOUR_SECOND = 57429
const HOUR_MINUTE = 57430
const DAY_MICROSECOND = 57431
const DAY_SECOND = 57432
const DAY_MINUTE = 57433
const DAY_HOUR = 57434
const YEAR_MONTH = 57435
const YEAR = 57436
const OR = 57437
const AND = 57438
const NOT = 57439
const BETWEEN = 57440
const CASE = 57441
const WHEN = 57442
const THEN = 57443
const ELSE = 57444
const END = 57445
const LE = 57446
const GE = 57447
const NE = 57448
const NULL_SAFE_EQUAL = 57449
const IS = 57450
const LIKE = 57451
const REGEXP = 57452
const IN = 57453
const SHIFT_LEFT = 57454
const SHIFT_RIGHT = 57455
const DIV = 57456
const MOD = 57457
const UNARY = 57458
const COLLATE = 57459
const BINARY = 57460
const UNDERSCORE_BINARY = 57461
const JSON_EXTRACT_OP = 57462
const JSON_UNQUOTE_EXTRACT_OP = 57463
const CREATE = 57464
const ALTER = 57465
const DROP = 57466
const RENAME = 57467
const ANALYZE = 57468
const ADD = 57469
const SCHEMA = 57470
const TABLE = 57471
const INDEX = 57472
const VIEW = 57473
const TO = 57474
const IGNORE = 57475
const IF = 57476
const UNIQUE = 57477
const PRIMARY = 57478
const COLUMN = 57479
const CONSTRAINT = 57480
const SPATIAL = 57481
const FULLTEXT = 57482
const FOREIGN = 57483
const KEY_BLOCK_SIZE = 57484
const SHOW = 57485
const DESCRIBE = 57486
const EXPLAIN = 57487
const DATE = 57488
const ESCAPE = 57489
const REPAIR = 57490
const OPTIMIZE = 57491
const TRUNCATE = 57492
const MAXVALUE = 57493
const PARTITION = 57494
const REORGANIZE = 57495
const LESS = 57496
const THAN = 57497
const PROCEDURE = 57498
const TRIGGER = 57499
const VINDEX = 57500
const VINDEXES = 57501
const STATUS = 57502
const VARIABLES = 57503
const BEGIN = 57504
const START = 57505
const TRANSACTION = 57506
const COMMIT = 57507
const ROLLBACK = 57508
const DEALLOCATE = 57509
const PREPARE = 57510
const EXECUTE = 57511
const BIT = 57512
const TINYINT = 57513
const SMALLINT = 57514
const MEDIUMINT = 57515
const INT = 57516
const INTEGER = 57517
const BIGINT = 57518
const INTNUM = 57519
const REAL = 57520
const DOUBLE = 57521
const FLOAT_TYPE = 57522
const DECIMAL = 57523
const NUMERIC = 57524
const TIME = 57525
const TIMESTAMP = 57526
const DATETIME = 57527
const CHAR = 57528
const VARCHAR = 57529
const BOOL = 57530
const CHARACTER = 57531
const VARBINARY = 57532
const NCHAR = 57533
const TEXT = 57534
const TINYTEXT = 57535
const MEDIUMTEXT = 57536
const LONGTEXT = 57537
const BLOB = 57538
const TINYBLOB = 57539
const MEDIUMBLOB = 57540
const LONGBLOB = 57541
const JSON = 57542
const ENUM = 57543
const GEOMETRY = 57544
const POINT = 57545
const LINESTRING = 57546
const POLYGON = 57547
const GEOMETRYCOLLECTION = 57548
const MULTIPOINT = 57549
const MULTILINESTRING = 57550
const MULTIPOLYGON = 57551
const NULLX = 57552
const AUTO_INCREMENT = 57553
const APPROXNUM = 57554
const SIGNED = 57555
const UNSIGNED = 57556
const ZEROFILL = 57557
const DATABASES = 57558
const TABLES = 57559
const VITESS_KEYSPACES = 57560
const VITESS_SHARDS = 57561
const VITESS_TABLETS = 57562
const VSCHEMA_TABLES = 57563
const EXTENDED = 57564
const FULL = 57565
const PROCESSLIST = 57566
const NAMES = 57567
const CHARSET = 57568
const GLOBAL = 57569
const SESSION = 57570
const LOCAL = 57571
const ISOLATION = 57572
const LEVEL = 57573
const READ = 57574
const WRITE = 57575
const ONLY = 57576
const REPEATABLE = 57577
const COMMITTED = 57578
const UNCOMMITTED = 57579
const SERIALIZABLE = 57580
const CURRENT_TIMESTAMP = 57581
const DATABASE = 57582
const CURRENT_DATE = 57583
const CURRENT_TIME = 57584
const LOCALTIME = 57585
const LOCALTIMESTAMP = 57586
const UTC_DATE = 57587
const UTC_TIME = 57588
const UTC_TIMESTAMP = 57589
const REPLACE = 57590
const CONVERT = 57591
const CAST = 57592
const SUBSTR = 57593
const SUBSTRING = 57594
const GROUP_CONCAT = 57595
const SEPARATOR = 57596
const MATCH = 57597
const AGAINST = 57598
const BOOLEAN = 57599
const LANGUAGE = 57600
const WITH = 57601
const QUERY = 57602
const EXPANSION = 57603
const UNUSED = 57604
const RETURNING = 57605

var yyToknames = [...]string{
	"$end",
	"error",
	"$unk",
	"LEX_ERROR",
	"UNION",
	"SELECT",
	"STREAM",
	"INSERT",
	"UPDATE",
	"DELETE",
	"FROM",
	"WHERE",
	"GROUP",
	"HAVING",
	"ORDER",
	"BY",
	"LIMIT",
	"OFFSET",
	"FOR",
	"ALL",
	"DISTINCT",
	"AS",
	"EXISTS",
	"ASC",
	"DESC",
	"INTO",
	"DUPLICATE",
	"KEY",
	"DEFAULT",
	"SET",
	"LOCK",
	"KEYS",
	"NULLS",
	"FIRST",
	"LAST",
	"VALUES",
	"LAST_INSERT_ID",
	"NEXT",
	"VALUE",
	"SHARE",
	"MODE",
	"SQL_NO_CACHE",
	"SQL_CACHE",
	"JOIN",
	"STRAIGHT_JOIN",
	"LEFT",
	"RIGHT",
	"INNER",
	"OUTER",
	"CROSS",
	"NATURAL",
	"USE",
	"FORCE",
	"ON",
	"USING",
	"'('",
	"','",
	"')'",
	"INTERVAL",
	"ID",
	"PG_ESCAPE_STRING",
	"HEX",
	"SINGLE_QUOTE_STRING",
	"DOUBLE_QUOTE_STRING",
	"BACK_QUOTE_STRING",
	"INTEGRAL",
	"FLOAT",
	"HEXNUM",
	"VALUE_ARG",
	"COMMENT",
	"COMMENT_KEYWORD",
	"BIT_LITERAL",
	"DOLLAR_SIGN",
	"LIST_ARG",
	"NULL",
	"TRUE",
	"FALSE",
	"MICROSECOND",
	"SECOND",
	"MINUTE",
	"HOUR",
	"DAY",
	"WEEK",
	"MONTH",
	"QUARTER",
	"SECOND_MICROSECOND",
	"MINUTE_MICROSECOND",
	"MINUTE_SECOND",
	"HOUR_MICROSECOND",
	"HOUR_SECOND",
	"HOUR_MINUTE",
	"DAY_MICROSECOND",
	"DAY_SECOND",
	"DAY_MINUTE",
	"DAY_HOUR",
	"YEAR_MONTH",
	"YEAR",
	"OR",
	"AND",
	"NOT",
	"'!'",
	"BETWEEN",
	"CASE",
	"WHEN",
	"THEN",
	"ELSE",
	"END",
	"'='",
	"'<'",
	"'>'",
	"LE",
	"GE",
	"NE",
	"NULL_SAFE_EQUAL",
	"IS",
	"LIKE",
	"REGEXP",
	"IN",
	"'|'",
	"'&'",
	"SHIFT_LEFT",
	"SHIFT_RIGHT",
	"'+'",
	"'-'",
	"'*'",
	"'/'",
	"DIV",
	"'%'",
	"MOD",
	"'^'",
	"'~'",
	"UNARY",
	"COLLATE",
	"BINARY",
	"UNDERSCORE_BINARY",
	"'.'",
	"JSON_EXTRACT_OP",
	"JSON_UNQUOTE_EXTRACT_OP",
	"CREATE",
	"ALTER",
	"DROP",
	"RENAME",
	"ANALYZE",
	"ADD",
	"SCHEMA",
	"TABLE",
	"INDEX",
	"VIEW",
	"TO",
	"IGNORE",
	"IF",
	"UNIQUE",
	"PRIMARY",
	"COLUMN",
	"CONSTRAINT",
	"SPATIAL",
	"FULLTEXT",
	"FOREIGN",
	"KEY_BLOCK_SIZE",
	"SHOW",
	"DESCRIBE",
	"EXPLAIN",
	"DATE",
	"ESCAPE",
	"REPAIR",
	"OPTIMIZE",
	"TRUNCATE",
	"MAXVALUE",
	"PARTITION",
	"REORGANIZE",
	"LESS",
	"THAN",
	"PROCEDURE",
	"TRIGGER",
	"VINDEX",
	"VINDEXES",
	"STATUS",
	"VARIABLES",
	"BEGIN",
	"START",
	"TRANSACTION",
	"COMMIT",
	"ROLLBACK",
	"DEALLOCATE",
	"PREPARE",
	"EXECUTE",
	"BIT",
	"TINYINT",
	"SMALLINT",
	"MEDIUMINT",
	"INT",
	"INTEGER",
	"BIGINT",
	"INTNUM",
	"REAL",
	"DOUBLE",
	"FLOAT_TYPE",
	"DECIMAL",
	"NUMERIC",
	"TIME",
	"TIMESTAMP",
	"DATETIME",
	"CHAR",
	"VARCHAR",
	"BOOL",
	"CHARACTER",
	"VARBINARY",
	"NCHAR",
	"TEXT",
	"TINYTEXT",
	"MEDIUMTEXT",
	"LONGTEXT",
	"BLOB",
	"TINYBLOB",
	"MEDIUMBLOB",
	"LONGBLOB",
	"JSON",
	"ENUM",
	"GEOMETRY",
	"POINT",
	"LINESTRING",
	"POLYGON",
	"GEOMETRYCOLLECTION",
	"MULTIPOINT",
	"MULTILINESTRING",
	"MULTIPOLYGON",
	"NULLX",
	"AUTO_INCREMENT",
	"APPROXNUM",
	"SIGNED",
	"UNSIGNED",
	"ZEROFILL",
	"DATABASES",
	"TABLES",
	"VITESS_KEYSPACES",
	"VITESS_SHARDS",
	"VITESS_TABLETS",
	"VSCHEMA_TABLES",
	"EXTENDED",
	"FULL",
	"PROCESSLIST",
	"NAMES",
	"CHARSET",
	"GLOBAL",
	"SESSION",
	"LOCAL",
	"ISOLATION",
	"LEVEL",
	"READ",
	"WRITE",
	"ONLY",
	"REPEATABLE",
	"COMMITTED",
	"UNCOMMITTED",
	"SERIALIZABLE",
	"CURRENT_TIMESTAMP",
	"DATABASE",
	"CURRENT_DATE",
	"CURRENT_TIME",
	"LOCALTIME",
	"LOCALTIMESTAMP",
	"UTC_DATE",
	"UTC_TIME",
	"UTC_TIMESTAMP",
	"REPLACE",
	"CONVERT",
	"CAST",
	"SUBSTR",
	"SUBSTRING",
	"GROUP_CONCAT",
	"SEPARATOR",
	"MATCH",
	"AGAINST",
	"BOOLEAN",
	"LANGUAGE",
	"WITH",
	"QUERY",
	"EXPANSION",
	"UNUSED",
	"RETURNING",
	"';'",
}

var yyStatenames = [...]string{}

const yyEofCode = 1
const yyErrCode = 2
const yyInitialStackSize = 16

//line yacctab:1
var yyExca = [...]int{
	-1, 1,
	1, -1,
	-2, 0,
	-1, 3,
	5, 30,
	-2, 4,
	-1, 39,
	177, 281,
	178, 281,
	-2, 269,
	-1, 252,
	74, 543,
	100, 543,
	102, 543,
	108, 543,
	109, 543,
	110, 543,
	111, 543,
	112, 543,
	113, 543,
	114, 543,
	116, 543,
	117, 543,
	118, 543,
	119, 543,
	120, 543,
	121, 543,
	122, 543,
	123, 543,
	124, 543,
	125, 543,
	126, 543,
	127, 543,
	128, 543,
	129, 543,
	130, 543,
	133, 543,
	-2, 397,
	-1, 253,
	136, 641,
	-2, 532,
	-1, 254,
	136, 643,
	-2, 531,
	-1, 255,
	136, 644,
	-2, 637,
	-1, 256,
	136, 645,
	-2, 638,
	-1, 331,
	108, 796,
	-2, 65,
	-1, 332,
	108, 824,
	-2, 66,
	-1, 333,
	108, 784,
	-2, 67,
	-1, 337,
	108, 768,
	149, 768,
	-2, 603,
	-1, 339,
	108, 806,
	149, 806,
	-2, 605,
	-1, 562,
	74, 531,
	136, 643,
	-2, 464,
	-1, 613,
	55, 45,
	57, 45,
	-2, 47,
	-1, 769,
	136, 647,
	-2, 640,
	-1, 1004,
	5, 31,
	-2, 429,
	-1, 1029,
	5, 30,
	-2, 573,
	-1, 1267,
	5, 31,
	-2, 574,
	-1, 1314,
	5, 30,
	-2, 576,
	-1, 1377,
	5, 31,
	-2, 577,
}

const yyPrivate = 57344

const yyLast = 11853

var yyAct = [...]int{
	288, 53, 1368, 941, 692, 1325, 258, 855, 559, 1171,
	1199, 608, 1168, 509, 606, 1273, 873, 935, 921, 1172,
	1092, 558, 3, 1033, 897, 287, 856, 893, 896, 1144,
	223, 794, 336, 59, 24, 1049, 996, 640, 232, 1095,
	806, 1083, 1038, 625, 727, 803, 843, 487, 493, 907,
	899, 256, 805, 771, 53, 931, 433, 329, 624, 314,
	595, 851, 237, 499, 610, 976, 241, 259, 319, 507,
	325, 324, 322, 958, 58, 231, 1262, 224, 225, 226,
	227, 1397, 313, 1387, 1395, 82, 1375, 957, 1393, 195,
	315, 942, 195, 1386, 1374, 1163, 236, 238, 575, 54,
	29, 30, 1259, 195, 437, 1334, 245, 187, 183, 184,
	185, 1057, 1194, 1195, 1056, 1193, 262, 1058, 962, 195,
	195, 82, 458, 888, 889, 195, 626, 82, 627, 956,
	1350, 523, 522, 532, 533, 525, 526, 527, 528, 529,
	530, 531, 524, 887, 722, 534, 475, 477, 1074, 914,
	1285, 732, 922, 1247, 634, 635, 636, 634, 635, 636,
	1206, 1207, 1245, 724, 228, 446, 1210, 1300, 623, 1208,
	725, 222, 472, 473, 470, 471, 1394, 1392, 320, 1369,
	1116, 1326, 852, 853, 318, 874, 876, 447, 440, 180,
	1332, 181, 63, 691, 181, 700, 628, 1328, 953, 950,
	951, 1048, 949, 464, 464, 464, 464, 909, 460, 464,
	462, 909, 1047, 1046, 204, 435, 189, 464, 443, 186,
	65, 66, 67, 68, 69, 198, 182, 960, 963, 909,
	483, 1355, 195, 1270, 195, 459, 461, 1127, 53, 434,
	195, 1012, 216, 1113, 1214, 546, 547, 323, 990, 1115,
	195, 743, 436, 543, 82, 82, 82, 82, 545, 496,
	82, 1068, 968, 514, 955, 453, 740, 894, 82, 495,
	527, 528, 529, 530, 531, 524, 557, 534, 534, 524,
	195, 1120, 534, 875, 506, 1327, 954, 1165, 1351, 561,
	844, 564, 565, 566, 567, 568, 569, 570, 571, 82,
	574, 576, 576, 576, 576, 576, 576, 576, 576, 584,
	585, 586, 587, 922, 1333, 1331, 199, 1373, 1215, 457,
	607, 201, 853, 1360, 959, 1224, 908, 1036, 208, 203,
	908, 906, 904, 746, 747, 905, 629, 961, 504, 525,
	526, 527, 528, 529, 530, 531, 524, 485, 908, 534,
	1209, 449, 450, 451, 506, 205, 55, 695, 211, 444,
	844, 445, 1019, 209, 195, 275, 778, 452, 1114, 969,
	1112, 195, 195, 195, 544, 1009, 439, 454, 82, 1072,
	776, 777, 775, 1363, 549, 1119, 632, 82, 200, 1008,
	802, 1007, 56, 501, 614, 505, 504, 622, 621, 80,
	577, 578, 579, 580, 581, 582, 583, 505, 504, 742,
	774, 1379, 506, 911, 915, 202, 1301, 212, 213, 214,
	215, 220, 505, 504, 506, 179, 218, 217, 219, 1167,
	1291, 497, 505, 504, 1290, 330, 318, 464, 912, 506,
	1087, 438, 761, 763, 764, 464, 1086, 1075, 741, 506,
	1358, 505, 504, 1202, 441, 442, 464, 464, 464, 464,
	464, 464, 464, 464, 987, 988, 989, 762, 506, 1201,
	1069, 464, 464, 464, 464, 532, 533, 525, 526, 527,
	528, 529, 530, 531, 524, 944, 709, 534, 82, 505,
	504, 590, 312, 797, 195, 195, 82, 706, 195, 795,
	613, 195, 634, 635, 636, 195, 506, 82, 82, 82,
	82, 82, 82, 82, 82, 705, 728, 728, 696, 707,
	694, 736, 82, 82, 82, 82, 689, 734, 455, 448,
	195, 434, 733, 733, 748, 1059, 195, 230, 634, 635,
	636, 1383, 486, 772, 1318, 1366, 53, 769, 1318, 486,
	82, 634, 635, 636, 195, 1318, 1319, 1282, 1281, 486,
	82, 1338, 561, 1337, 750, 1190, 486, 1211, 466, 466,
	466, 466, 1269, 486, 466, 836, 839, 26, 765, 1035,
	767, 845, 466, 810, 60, 796, 1221, 1220, 1217, 1218,
	1217, 1216, 617, 319, 319, 319, 319, 319, 857, 1002,
	486, 1027, 970, 486, 592, 486, 1169, 1028, 607, 1034,
	877, 808, 486, 513, 798, 801, 319, 832, 833, 639,
	638, 697, 698, 840, 592, 701, 1002, 56, 704, 810,
	881, 848, 1134, 1014, 773, 841, 618, 847, 616, 849,
	850, 195, 591, 1035, 195, 195, 195, 195, 195, 880,
	26, 616, 858, 1034, 808, 861, 195, 726, 1011, 195,
	1265, 592, 1103, 195, 870, 1223, 1219, 195, 195, 592,
	1145, 82, 923, 924, 925, 879, 878, 883, 1002, 1013,
	1313, 757, 885, 551, 859, 860, 1061, 862, 1034, 886,
	82, 56, 330, 1002, 1101, 464, 901, 464, 972, 1147,
	56, 631, 620, 619, 1010, 464, 937, 26, 744, 318,
	318, 318, 318, 318, 481, 283, 276, 799, 800, 1295,
	278, 279, 280, 281, 318, 482, 277, 284, 238, 282,
	916, 936, 318, 1184, 1149, 1064, 1153, 932, 1148, 1146,
	1155, 933, 934, 195, 1151, 927, 82, 926, 82, 1039,
	1040, 693, 195, 1150, 463, 195, 82, 56, 71, 56,
	939, 484, 1204, 1169, 1088, 1042, 1152, 1154, 854, 991,
	703, 465, 1103, 478, 867, 865, 769, 756, 56, 868,
	866, 1102, 869, 1045, 601, 602, 1107, 1104, 1097, 1098,
	1105, 1100, 1099, 977, 1044, 882, 980, 864, 863, 242,
	243, 772, 466, 1106, 1101, 1391, 1385, 1126, 986, 1109,
	466, 597, 600, 601, 602, 598, 973, 599, 603, 1390,
	1031, 466, 466, 466, 466, 466, 466, 466, 466, 992,
	500, 1130, 1131, 1128, 1129, 979, 466, 466, 466, 466,
	985, 334, 984, 978, 749, 1079, 488, 498, 637, 456,
	1263, 1071, 1030, 1365, 1032, 1296, 1364, 1001, 489, 1311,
	1065, 946, 702, 1124, 752, 597, 600, 601, 602, 598,
	940, 599, 603, 1029, 513, 1039, 1040, 247, 605, 964,
	466, 319, 965, 239, 240, 500, 233, 1343, 234, 1018,
	60, 1102, 773, 1342, 1016, 1052, 1107, 1104, 1097, 1098,
	1105, 1100, 1099, 1051, 1043, 1053, 807, 809, 983, 1298,
	1035, 502, 1352, 1106, 1286, 739, 982, 62, 64, 1096,
	615, 1062, 730, 7, 846, 731, 6, 729, 5, 82,
	1054, 57, 195, 1, 837, 837, 1076, 1077, 270, 269,
	837, 464, 811, 737, 1261, 1060, 548, 943, 82, 1078,
	1091, 1080, 1081, 1082, 872, 1066, 1067, 837, 467, 468,
	469, 952, 1367, 474, 1324, 1198, 464, 903, 895, 1085,
	432, 479, 70, 1359, 902, 1330, 1284, 1084, 1084, 1094,
	910, 1073, 913, 1203, 1362, 466, 1070, 645, 644, 642,
	1108, 82, 82, 643, 82, 641, 647, 318, 646, 735,
	207, 326, 206, 327, 466, 604, 630, 938, 1123, 503,
	72, 1111, 1110, 251, 948, 1118, 723, 82, 967, 476,
	195, 195, 210, 542, 195, 981, 1055, 335, 1176, 1174,
	1138, 53, 745, 195, 857, 1170, 492, 1137, 1341, 1157,
	1156, 857, 82, 1143, 1177, 769, 1297, 1186, 1187, 1188,
	1164, 1017, 1175, 572, 1173, 842, 261, 760, 274, 796,
	466, 1180, 466, 917, 918, 919, 920, 1179, 1178, 271,
	466, 273, 272, 751, 1026, 516, 1192, 260, 249, 928,
	929, 930, 82, 971, 82, 1191, 317, 588, 1197, 596,
	1196, 594, 593, 1041, 1037, 316, 1133, 1258, 334, 1349,
	755, 28, 61, 244, 1212, 1213, 23, 22, 21, 466,
	19, 490, 494, 82, 18, 82, 82, 17, 20, 16,
	15, 14, 1205, 32, 13, 12, 1225, 11, 515, 10,
	9, 8, 4, 235, 25, 319, 2, 0, 0, 1227,
	195, 0, 1230, 0, 0, 999, 0, 0, 82, 1236,
	0, 1000, 0, 0, 0, 0, 1248, 1235, 1004, 728,
	1132, 82, 195, 0, 1257, 0, 560, 1243, 82, 1234,
	1232, 0, 0, 0, 0, 733, 573, 0, 0, 82,
	1005, 1006, 0, 1264, 0, 0, 195, 0, 1015, 0,
	0, 690, 0, 1021, 0, 1022, 1023, 1024, 1025, 699,
	0, 1278, 1275, 1276, 1277, 0, 0, 0, 0, 0,
	710, 711, 712, 713, 714, 715, 716, 717, 1272, 0,
	0, 1062, 0, 464, 0, 718, 719, 720, 721, 0,
	1280, 0, 0, 0, 0, 1287, 82, 1289, 82, 82,
	82, 195, 82, 1050, 1293, 0, 0, 0, 82, 1294,
	0, 318, 0, 0, 0, 0, 0, 0, 0, 0,
	1299, 0, 466, 0, 0, 0, 1174, 1222, 1288, 1315,
	0, 1310, 0, 0, 82, 82, 82, 550, 552, 553,
	554, 555, 556, 1316, 1317, 1312, 768, 0, 0, 1229,
	1314, 1173, 0, 1329, 0, 1323, 0, 1340, 0, 0,
	0, 0, 0, 563, 0, 1089, 466, 0, 466, 0,
	1308, 1339, 0, 0, 1174, 1335, 53, 1336, 0, 0,
	0, 82, 82, 1353, 0, 0, 0, 0, 0, 0,
	1357, 466, 0, 0, 82, 0, 0, 1354, 0, 1173,
	0, 0, 0, 0, 0, 0, 0, 82, 0, 1142,
	0, 0, 1371, 0, 0, 0, 466, 0, 0, 857,
	1376, 0, 0, 0, 0, 0, 0, 0, 491, 1378,
	82, 1381, 0, 0, 0, 0, 0, 0, 466, 1361,
	0, 0, 758, 759, 0, 1388, 1389, 0, 0, 0,
	0, 334, 0, 837, 0, 1396, 513, 1189, 1050, 0,
	837, 0, 0, 0, 0, 0, 190, 82, 0, 221,
	898, 0, 0, 0, 1380, 0, 0, 0, 0, 0,
	229, 82, 0, 0, 0, 0, 0, 466, 0, 466,
	1200, 0, 0, 0, 248, 0, 190, 190, 0, 560,
	0, 0, 190, 0, 834, 835, 0, 0, 0, 945,
	0, 947, 0, 0, 0, 0, 0, 0, 0, 966,
	0, 0, 1226, 523, 522, 532, 533, 525, 526, 527,
	528, 529, 530, 531, 524, 1228, 0, 534, 0, 0,
	0, 0, 1231, 0, 0, 1237, 0, 0, 0, 0,
	0, 0, 1239, 466, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1249, 1250, 1251, 892, 997, 1254,
	1255, 486, 0, 0, 0, 768, 0, 0, 0, 0,
	0, 0, 1266, 1267, 1268, 0, 1271, 0, 0, 0,
	770, 0, 0, 779, 780, 781, 782, 783, 784, 785,
	786, 787, 788, 789, 790, 791, 792, 793, 0, 190,
	1274, 190, 1274, 1274, 1274, 0, 1279, 190, 0, 0,
	1240, 1241, 466, 1242, 0, 0, 1244, 190, 1246, 0,
	0, 0, 523, 522, 532, 533, 525, 526, 527, 528,
	529, 530, 531, 524, 0, 0, 534, 0, 466, 466,
	466, 0, 0, 0, 0, 0, 0, 480, 0, 0,
	0, 0, 0, 0, 0, 0, 1307, 1252, 486, 0,
	0, 0, 0, 0, 0, 1283, 0, 0, 0, 974,
	975, 0, 494, 1320, 1321, 1322, 0, 0, 0, 0,
	0, 0, 0, 0, 884, 513, 513, 0, 0, 0,
	0, 0, 890, 0, 0, 0, 0, 0, 1200, 1344,
	1345, 1346, 1347, 1348, 0, 0, 0, 0, 0, 0,
	0, 1274, 0, 0, 0, 0, 0, 0, 898, 523,
	522, 532, 533, 525, 526, 527, 528, 529, 530, 531,
	524, 190, 0, 534, 1356, 0, 1003, 0, 190, 612,
	190, 0, 0, 1256, 0, 1090, 0, 1372, 0, 0,
	0, 0, 1377, 486, 0, 0, 0, 0, 26, 27,
	54, 29, 30, 0, 1093, 1382, 0, 0, 837, 0,
	1117, 513, 1020, 0, 0, 0, 0, 45, 0, 0,
	0, 0, 31, 0, 0, 1384, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1400, 1401, 0, 0,
	0, 0, 0, 0, 40, 0, 0, 0, 56, 0,
	0, 0, 1136, 0, 523, 522, 532, 533, 525, 526,
	527, 528, 529, 530, 531, 524, 0, 0, 534, 0,
	0, 0, 0, 0, 1160, 0, 0, 0, 0, 0,
	993, 994, 995, 523, 522, 532, 533, 525, 526, 527,
	528, 529, 530, 531, 524, 0, 0, 534, 0, 0,
	0, 190, 190, 0, 0, 190, 0, 0, 190, 0,
	0, 0, 708, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 898, 0, 898, 0, 0, 0, 0,
	0, 33, 34, 36, 35, 38, 0, 190, 0, 0,
	0, 0, 0, 738, 0, 0, 0, 0, 0, 0,
	0, 0, 39, 46, 47, 0, 0, 48, 49, 37,
	0, 190, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 41, 42, 708, 43, 44, 50, 51, 52, 0,
	0, 0, 0, 0, 0, 0, 0, 1166, 0, 1136,
	0, 523, 522, 532, 533, 525, 526, 527, 528, 529,
	530, 531, 524, 1181, 1182, 534, 0, 1183, 0, 0,
	1185, 0, 0, 0, 0, 0, 248, 0, 0, 1253,
	0, 0, 0, 248, 248, 0, 0, 838, 838, 248,
	0, 0, 0, 838, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 248, 248, 248, 248, 0, 190, 0,
	838, 190, 190, 190, 190, 190, 0, 55, 898, 0,
	0, 0, 0, 871, 0, 0, 190, 1292, 0, 1139,
	612, 0, 0, 0, 190, 190, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1093, 898, 662, 1233, 523,
	522, 532, 533, 525, 526, 527, 528, 529, 530, 531,
	524, 1140, 1141, 534, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1158, 1159, 0, 1161, 1162, 523,
	522, 532, 533, 525, 526, 527, 528, 529, 530, 531,
	524, 0, 0, 534, 0, 1260, 0, 0, 0, 0,
	0, 0, 560, 0, 0, 0, 0, 0, 0, 0,
	190, 0, 0, 0, 667, 518, 0, 521, 0, 190,
	0, 0, 190, 535, 536, 537, 538, 539, 540, 541,
	0, 519, 520, 517, 523, 522, 532, 533, 525, 526,
	527, 528, 529, 530, 531, 524, 0, 0, 534, 0,
	0, 650, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 708, 522, 532, 533, 525, 526, 527, 528,
	529, 530, 531, 524, 248, 0, 534, 0, 0, 0,
	663, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	560, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1238, 677, 678, 679, 680, 681, 682,
	683, 0, 684, 685, 686, 687, 688, 664, 665, 666,
	648, 649, 676, 248, 651, 998, 652, 653, 654, 655,
	656, 657, 658, 659, 660, 661, 668, 669, 670, 671,
	672, 673, 674, 675, 0, 523, 522, 532, 533, 525,
	526, 527, 528, 529, 530, 531, 524, 0, 0, 534,
	248, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1370, 560, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 190,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1302, 1303, 0, 1304,
	1305, 1306, 812, 813, 814, 815, 816, 817, 818, 819,
	821, 822, 823, 824, 825, 826, 827, 828, 829, 830,
	831, 820, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 523, 522, 532, 533, 525, 526, 527,
	528, 529, 530, 531, 524, 0, 0, 534, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1121, 1122, 0,
	0, 1125, 0, 0, 0, 0, 0, 0, 0, 0,
	190, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	248, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 248, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 708, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 838, 0, 0, 0,
	0, 0, 0, 838, 0, 0, 0, 0, 0, 0,
	1398, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 421, 411, 0, 383, 423, 361, 375,
	431, 376, 377, 404, 347, 391, 132, 373, 0, 364,
	342, 370, 343, 362, 385, 99, 388, 360, 413, 394,
	113, 0, 0, 0, 429, 115, 399, 190, 149, 125,
	0, 0, 387, 415, 389, 409, 382, 405, 352, 398,
	424, 374, 402, 425, 0, 0, 0, 384, 81, 190,
	0, 634, 635, 636, 900, 0, 0, 0, 0, 92,
	0, 0, 0, 401, 420, 372, 0, 0, 0, 0,
	0, 0, 0, 190, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 403, 341, 400, 0,
	345, 348, 430, 418, 367, 368, 1063, 0, 0, 0,
	0, 0, 0, 386, 390, 406, 380, 0, 0, 0,
	0, 0, 0, 0, 0, 365, 0, 397, 0, 0,
	0, 349, 346, 0, 0, 0, 0, 351, 612, 366,
	407, 0, 340, 410, 416, 381, 196, 419, 379, 378,
	422, 138, 0, 0, 152, 104, 103, 112, 414, 363,
	371, 95, 369, 144, 134, 164, 396, 135, 143, 116,
	156, 139, 163, 197, 171, 154, 170, 84, 153, 162,
	93, 146, 0, 0, 0, 86, 160, 151, 123, 108,
	109, 85, 0, 142, 98, 102, 97, 131, 157, 158,
	96, 89, 169, 88, 90, 168, 130, 155, 161, 124,
	121, 87, 159, 122, 120, 111, 100, 105, 136, 118,
	137, 106, 127, 126, 128, 0, 344, 0, 150, 166,
	178, 359, 417, 172, 173, 174, 175, 0, 0, 0,
	129, 91, 107, 147, 119, 110, 117, 141, 177, 133,
	145, 94, 165, 148, 355, 358, 353, 354, 392, 393,
	426, 427, 428, 408, 350, 0, 356, 357, 0, 412,
	395, 83, 0, 114, 176, 140, 101, 167, 0, 0,
	0, 0, 0, 0, 0, 0, 421, 411, 0, 383,
	423, 361, 375, 431, 376, 377, 404, 347, 391, 132,
	373, 838, 364, 342, 370, 343, 362, 385, 99, 388,
	360, 413, 394, 113, 0, 0, 0, 429, 115, 399,
	0, 149, 125, 0, 0, 387, 415, 389, 409, 382,
	405, 352, 398, 424, 374, 402, 425, 0, 0, 0,
	384, 81, 0, 0, 634, 635, 636, 900, 0, 0,
	0, 0, 92, 0, 0, 0, 401, 420, 372, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 403,
	341, 400, 0, 345, 348, 430, 418, 367, 368, 0,
	0, 0, 0, 0, 0, 0, 386, 390, 406, 380,
	0, 0, 0, 0, 0, 0, 0, 0, 365, 0,
	397, 0, 0, 0, 349, 346, 0, 0, 0, 0,
	351, 0, 366, 407, 0, 340, 410, 416, 381, 196,
	419, 379, 378, 422, 138, 0, 0, 152, 104, 103,
	112, 414, 363, 371, 95, 369, 144, 134, 164, 396,
	135, 143, 116, 156, 139, 163, 197, 171, 154, 170,
	84, 153, 162, 93, 146, 0, 0, 0, 86, 160,
	151, 123, 108, 109, 85, 0, 142, 98, 102, 97,
	131, 157, 158, 96, 89, 169, 88, 90, 168, 130,
	155, 161, 124, 121, 87, 159, 122, 120, 111, 100,
	105, 136, 118, 137, 106, 127, 126, 128, 0, 344,
	0, 150, 166, 178, 359, 417, 172, 173, 174, 175,
	0, 0, 0, 129, 91, 107, 147, 119, 110, 117,
	141, 177, 133, 145, 94, 165, 148, 355, 358, 353,
	354, 392, 393, 426, 427, 428, 408, 350, 0, 356,
	357, 0, 412, 395, 83, 0, 114, 176, 140, 101,
	167, 421, 411, 0, 383, 423, 361, 375, 431, 376,
	377, 404, 347, 391, 132, 373, 0, 364, 342, 370,
	343, 362, 385, 99, 388, 360, 413, 394, 113, 0,
	0, 0, 429, 115, 399, 0, 149, 125, 0, 0,
	387, 415, 389, 409, 382, 405, 352, 398, 424, 374,
	402, 425, 0, 0, 0, 384, 255, 0, 0, 193,
	191, 192, 0, 0, 0, 0, 0, 92, 0, 0,
	0, 401, 420, 372, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 403, 341, 400, 0, 345, 348,
	430, 418, 367, 368, 0, 0, 0, 0, 0, 0,
	0, 386, 390, 406, 380, 0, 0, 0, 0, 0,
	0, 766, 0, 365, 0, 397, 0, 0, 0, 349,
	346, 0, 0, 0, 0, 351, 0, 366, 407, 0,
	340, 410, 416, 381, 196, 419, 379, 378, 422, 138,
	0, 0, 152, 104, 103, 112, 414, 363, 371, 95,
	369, 144, 134, 164, 396, 135, 143, 116, 156, 139,
	163, 197, 171, 154, 170, 84, 153, 162, 93, 146,
	0, 0, 0, 86, 160, 151, 123, 108, 109, 85,
	0, 142, 98, 102, 97, 131, 157, 158, 96, 89,
	169, 88, 90, 168, 130, 155, 161, 124, 121, 87,
	159, 122, 120, 111, 100, 105, 136, 118, 137, 106,
	127, 126, 128, 0, 344, 0, 150, 166, 178, 359,
	417, 172, 173, 174, 175, 0, 0, 0, 129, 91,
	107, 147, 119, 110, 117, 141, 177, 133, 145, 94,
	165, 148, 355, 358, 353, 354, 392, 393, 426, 427,
	428, 408, 350, 0, 356, 357, 0, 412, 395, 83,
	0, 114, 176, 140, 101, 167, 421, 411, 0, 383,
	423, 361, 375, 431, 376, 377, 404, 347, 391, 132,
	373, 0, 364, 342, 370, 343, 362, 385, 99, 388,
	360, 413, 394, 113, 0, 0, 0, 429, 115, 399,
	0, 149, 125, 0, 0, 387, 415, 389, 409, 382,
	405, 352, 398, 424, 374, 402, 425, 0, 0, 0,
	384, 255, 0, 0, 193, 191, 192, 0, 0, 0,
	0, 0, 92, 0, 0, 0, 401, 420, 372, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 403,
	341, 400, 0, 345, 348, 430, 418, 367, 368, 0,
	0, 0, 0, 0, 0, 0, 386, 390, 406, 380,
	0, 0, 0, 0, 0, 0, 0, 0, 365, 0,
	397, 0, 0, 0, 349, 346, 0, 0, 0, 0,
	351, 0, 366, 407, 0, 340, 410, 416, 381, 196,
	419, 379, 378, 422, 138, 0, 0, 152, 104, 103,
	112, 414, 363, 371, 95, 369, 144, 134, 164, 396,
	135, 143, 116, 156, 139, 163, 197, 171, 154, 170,
	84, 153, 162, 93, 146, 0, 0, 0, 86, 160,
	151, 123, 108, 109, 85, 0, 142, 98, 102, 97,
	131, 157, 158, 96, 89, 169, 88, 90, 168, 130,
	155, 161, 124, 121, 87, 159, 122, 120, 111, 100,
	105, 136, 118, 137, 106, 127, 126, 128, 0, 344,
	0, 150, 166, 178, 359, 417, 172, 173, 174, 175,
	0, 0, 0, 129, 91, 107, 147, 119, 110, 117,
	141, 177, 133, 145, 94, 165, 148, 355, 358, 353,
	354, 392, 393, 426, 427, 428, 408, 350, 0, 356,
	357, 0, 412, 395, 83, 0, 114, 176, 140, 101,
	167, 421, 411, 0, 383, 423, 361, 375, 431, 376,
	377, 404, 347, 391, 132, 373, 0, 364, 342, 370,
	343, 362, 385, 99, 388, 360, 413, 394, 113, 0,
	0, 0, 429, 115, 399, 0, 149, 125, 0, 0,
	387, 415, 389, 409, 382, 405, 352, 398, 424, 374,
	402, 425, 0, 0, 0, 384, 194, 0, 0, 193,
	191, 192, 0, 0, 0, 0, 0, 92, 0, 0,
	0, 401, 420, 372, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 403, 341, 400, 0, 345, 348,
	430, 418, 367, 368, 0, 0, 0, 0, 0, 0,
	0, 386, 390, 406, 380, 0, 0, 0, 0, 0,
	0, 0, 0, 365, 0, 397, 0, 0, 0, 349,
	346, 0, 0, 0, 0, 351, 0, 366, 407, 0,
	340, 410, 416, 381, 196, 419, 379, 378, 422, 138,
	0, 0, 152, 104, 103, 112, 414, 363, 371, 95,
	369, 144, 134, 164, 396, 135, 143, 116, 156, 139,
	163, 197, 171, 154, 170, 84, 153, 162, 93, 146,
	0, 0, 0, 86, 160, 151, 123, 108, 109, 85,
	0, 142, 98, 102, 97, 131, 157, 158, 96, 89,
	169, 88, 90, 168, 130, 155, 161, 124, 121, 87,
	159, 122, 120, 111, 100, 105, 136, 118, 137, 106,
	127, 126, 128, 0, 344, 0, 150, 166, 178, 359,
	417, 172, 173, 174, 175, 0, 0, 0, 129, 91,
	107, 147, 119, 110, 117, 141, 177, 133, 145, 94,
	165, 148, 355, 358, 353, 354, 392, 393, 426, 427,
	428, 408, 350, 0, 356, 357, 0, 412, 395, 83,
	0, 114, 176, 140, 101, 167, 421, 411, 0, 383,
	423, 361, 375, 431, 376, 377, 404, 347, 391, 132,
	373, 0, 364, 342, 370, 343, 362, 385, 99, 388,
	360, 413, 394, 113, 0, 0, 0, 429, 115, 399,
	0, 149, 125, 0, 0, 387, 415, 389, 409, 382,
	405, 352, 398, 424, 374, 402, 425, 56, 0, 0,
	384, 81, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 92, 0, 0, 0, 401, 420, 372, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 403,
	341, 400, 0, 345, 348, 430, 418, 367, 368, 0,
	0, 0, 0, 0, 0, 0, 386, 390, 406, 380,
	0, 0, 0, 0, 0, 0, 0, 0, 365, 0,
	397, 0, 0, 0, 349, 346, 0, 0, 0, 0,
	351, 0, 366, 407, 0, 340, 410, 416, 381, 196,
	419, 379, 378, 422, 138, 0, 0, 152, 104, 103,
	112, 414, 363, 371, 95, 369, 144, 134, 164, 396,
	135, 143, 116, 156, 139, 163, 197, 171, 154, 170,
	84, 153, 162, 93, 146, 0, 0, 0, 86, 160,
	151, 123, 108, 109, 85, 0, 142, 98, 102, 97,
	131, 157, 158, 96, 89, 169, 88, 90, 168, 130,
	155, 161, 124, 121, 87, 159, 122, 120, 111, 100,
	105, 136, 118, 137, 106, 127, 126, 128, 0, 344,
	0, 150, 166, 178, 359, 417, 172, 173, 174, 175,
	0, 0, 0, 129, 91, 107, 147, 119, 110, 117,
	141, 177, 133, 145, 94, 165, 148, 355, 358, 353,
	354, 392, 393, 426, 427, 428, 408, 350, 0, 356,
	357, 0, 412, 395, 83, 0, 114, 176, 140, 101,
	167, 421, 411, 0, 383, 423, 361, 375, 431, 376,
	377, 404, 347, 391, 132, 373, 0, 364, 342, 370,
	343, 362, 385, 99, 388, 360, 413, 394, 113, 0,
	0, 0, 429, 115, 399, 0, 149, 125, 0, 0,
	387, 415, 389, 409, 382, 405, 352, 398, 424, 374,
	402, 425, 0, 0, 0, 384, 81, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 92, 0, 0,
	0, 401, 420, 372, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 403, 341, 400, 0, 345, 348,
	430, 418, 367, 368, 0, 0, 0, 0, 0, 0,
	0, 386, 390, 406, 380, 0, 0, 0, 0, 0,
	0, 1135, 0, 365, 0, 397, 0, 0, 0, 349,
	346, 0, 0, 0, 0, 351, 0, 366, 407, 0,
	340, 410, 416, 381, 196, 419, 379, 378, 422, 138,
	0, 0, 152, 104, 103, 112, 414, 363, 371, 95,
	369, 144, 134, 164, 396, 135, 143, 116, 156, 139,
	163, 197, 171, 154, 170, 84, 153, 162, 93, 146,
	0, 0, 0, 86, 160, 151, 123, 108, 109, 85,
	0, 142, 98, 102, 97, 131, 157, 158, 96, 89,
	169, 88, 90, 168, 130, 155, 161, 124, 121, 87,
	159, 122, 120, 111, 100, 105, 136, 118, 137, 106,
	127, 126, 128, 0, 344, 0, 150, 166, 178, 359,
	417, 172, 173, 174, 175, 0, 0, 0, 129, 91,
	107, 147, 119, 110, 117, 141, 177, 133, 145, 94,
	165, 148, 355, 358, 353, 354, 392, 393, 426, 427,
	428, 408, 350, 0, 356, 357, 0, 412, 395, 83,
	0, 114, 176, 140, 101, 167, 421, 411, 0, 383,
	423, 361, 375, 431, 376, 377, 404, 347, 391, 132,
	373, 0, 364, 342, 370, 343, 362, 385, 99, 388,
	360, 413, 394, 113, 0, 0, 0, 429, 115, 399,
	0, 149, 125, 0, 0, 387, 415, 389, 409, 382,
	405, 352, 398, 424, 374, 402, 425, 0, 0, 0,
	384, 81, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 92, 0, 0, 0, 401, 420, 372, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 403,
	341, 400, 0, 345, 348, 430, 418, 367, 368, 0,
	0, 0, 0, 0, 0, 0, 386, 390, 406, 380,
	0, 0, 0, 0, 0, 0, 0, 0, 365, 0,
	397, 0, 0, 0, 349, 346, 0, 0, 0, 0,
	351, 0, 366, 407, 0, 340, 410, 416, 381, 196,
	419, 379, 378, 422, 138, 0, 0, 152, 104, 103,
	112, 414, 363, 371, 95, 369, 144, 134, 164, 396,
	135, 143, 116, 156, 139, 163, 197, 171, 154, 170,
	84, 153, 162, 93, 146, 0, 0, 0, 86, 160,
	151, 123, 108, 109, 85, 0, 142, 98, 102, 97,
	131, 157, 158, 96, 89, 169, 88, 90, 168, 130,
	155, 161, 124, 121, 87, 159, 122, 120, 111, 100,
	105, 136, 118, 137, 106, 127, 126, 128, 0, 344,
	0, 150, 166, 178, 359, 417, 172, 173, 174, 175,
	0, 0, 0, 129, 91, 107, 147, 119, 110, 117,
	141, 177, 133, 145, 94, 165, 148, 355, 358, 353,
	354, 392, 393, 426, 427, 428, 408, 350, 0, 356,
	357, 0, 412, 395, 83, 0, 114, 176, 140, 101,
	167, 421, 411, 0, 383, 423, 361, 375, 431, 376,
	377, 404, 347, 391, 132, 373, 0, 364, 342, 370,
	343, 362, 385, 99, 388, 360, 413, 394, 113, 0,
	0, 0, 429, 115, 399, 0, 149, 125, 0, 0,
	387, 415, 389, 409, 382, 405, 352, 398, 424, 374,
	402, 425, 0, 0, 0, 384, 81, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 92, 0, 0,
	0, 401, 420, 372, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 403, 341, 400, 0, 345, 348,
	430, 418, 367, 368, 0, 0, 0, 0, 0, 0,
	0, 386, 390, 406, 380, 0, 0, 0, 0, 0,
	0, 0, 0, 365, 0, 397, 0, 0, 0, 349,
	346, 0, 0, 0, 0, 351, 0, 366, 407, 0,
	340, 410, 416, 381, 196, 419, 379, 378, 422, 138,
	0, 0, 152, 104, 103, 112, 414, 363, 371, 95,
	369, 144, 134, 164, 396, 135, 143, 116, 156, 139,
	163, 197, 171, 154, 170, 84, 153, 162, 93, 146,
	0, 0, 0, 86, 160, 151, 123, 108, 109, 85,
	0, 142, 98, 102, 97, 131, 157, 158, 96, 89,
	169, 88, 338, 168, 130, 155, 161, 124, 121, 87,
	159, 122, 120, 111, 100, 105, 136, 118, 137, 106,
	127, 126, 128, 0, 344, 0, 150, 166, 178, 359,
	417, 172, 173, 174, 175, 0, 0, 0, 339, 337,
	107, 147, 119, 110, 117, 141, 177, 133, 145, 94,
	165, 148, 355, 358, 353, 354, 392, 393, 426, 427,
	428, 408, 350, 0, 356, 357, 0, 412, 395, 83,
	0, 114, 176, 140, 101, 167, 421, 411, 0, 383,
	423, 361, 375, 431, 376, 377, 404, 347, 391, 132,
	373, 0, 364, 342, 370, 343, 362, 385, 99, 388,
	360, 413, 394, 113, 0, 0, 0, 429, 115, 399,
	0, 149, 125, 0, 0, 387, 415, 389, 409, 382,
	405, 352, 398, 424, 374, 402, 425, 0, 0, 0,
	384, 81, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 92, 0, 0, 0, 401, 420, 372, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 403,
	341, 400, 0, 345, 348, 430, 418, 367, 368, 0,
	0, 0, 0, 0, 0, 0, 386, 390, 406, 380,
	0, 0, 0, 0, 0, 0, 0, 0, 365, 0,
	397, 0, 0, 0, 349, 346, 0, 0, 0, 0,
	351, 0, 366, 407, 0, 340, 410, 416, 381, 196,
	419, 379, 378, 422, 138, 0, 0, 152, 104, 103,
	112, 414, 363, 371, 95, 369, 144, 134, 164, 396,
	135, 143, 116, 156, 139, 163, 197, 171, 154, 170,
	84, 153, 328, 93, 146, 0, 0, 0, 86, 160,
	151, 123, 108, 109, 85, 0, 142, 98, 102, 97,
	131, 157, 158, 96, 89, 169, 88, 338, 168, 130,
	155, 161, 124, 121, 87, 159, 122, 120, 111, 100,
	105, 136, 118, 137, 106, 127, 126, 128, 0, 344,
	0, 150, 166, 178, 359, 417, 172, 173, 174, 175,
	0, 0, 0, 339, 337, 333, 332, 331, 110, 117,
	141, 177, 133, 145, 94, 165, 148, 355, 358, 353,
	354, 392, 393, 426, 427, 428, 408, 350, 0, 356,
	357, 0, 412, 395, 83, 0, 114, 176, 140, 101,
	167, 132, 0, 0, 804, 0, 257, 0, 0, 0,
	99, 0, 252, 0, 0, 113, 0, 0, 0, 299,
	115, 0, 0, 149, 125, 0, 0, 0, 0, 290,
	291, 0, 0, 0, 0, 0, 0, 0, 0, 56,
	0, 0, 289, 255, 283, 276, 254, 253, 192, 278,
	279, 280, 281, 0, 92, 277, 284, 0, 282, 285,
	286, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 250, 268, 0, 298, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 265, 266, 246, 0,
	0, 0, 310, 0, 267, 0, 0, 263, 264, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 196, 0, 0, 308, 0, 138, 0, 0, 152,
	104, 103, 112, 0, 0, 0, 95, 0, 144, 134,
	164, 0, 135, 143, 116, 156, 139, 163, 197, 171,
	154, 170, 84, 153, 162, 93, 146, 0, 0, 0,
	86, 160, 151, 123, 108, 109, 85, 0, 142, 98,
	102, 97, 131, 157, 158, 96, 89, 169, 88, 90,
	168, 130, 155, 161, 124, 121, 87, 159, 122, 120,
	111, 100, 105, 136, 118, 137, 106, 127, 126, 128,
	0, 0, 0, 150, 166, 178, 0, 0, 172, 173,
	174, 175, 0, 0, 0, 129, 91, 107, 147, 119,
	110, 117, 141, 177, 133, 145, 94, 165, 148, 300,
	309, 306, 307, 304, 305, 303, 302, 301, 311, 292,
	293, 294, 295, 297, 0, 296, 83, 0, 114, 176,
	140, 101, 167, 132, 0, 0, 0, 0, 257, 0,
	0, 0, 99, 0, 252, 0, 0, 113, 0, 0,
	0, 299, 115, 0, 0, 149, 125, 0, 0, 0,
	0, 290, 291, 0, 0, 0, 0, 0, 0, 0,
	0, 56, 0, 0, 289, 255, 283, 276, 254, 253,
	192, 278, 279, 280, 281, 0, 92, 277, 284, 0,
	282, 285, 286, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 250, 268, 0, 298, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 265, 266,
	1309, 0, 0, 0, 310, 0, 267, 0, 0, 263,
	264, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 196, 0, 0, 308, 0, 138, 0,
	0, 152, 104, 103, 112, 0, 0, 0, 95, 0,
	144, 134, 164, 0, 135, 143, 116, 156, 139, 163,
	197, 171, 154, 170, 84, 153, 162, 93, 146, 0,
	0, 0, 86, 160, 151, 123, 108, 109, 85, 0,
	142, 98, 102, 97, 131, 157, 158, 96, 89, 169,
	88, 90, 168, 130, 155, 161, 124, 121, 87, 159,
	122, 120, 111, 100, 105, 136, 118, 137, 106, 127,
	126, 128, 0, 0, 0, 150, 166, 178, 0, 0,
	172, 173, 174, 175, 0, 0, 0, 129, 91, 107,
	147, 119, 110, 117, 141, 177, 133, 145, 94, 165,
	148, 300, 309, 306, 307, 304, 305, 303, 302, 301,
	311, 292, 293, 294, 295, 297, 0, 296, 83, 0,
	114, 176, 140, 101, 167, 132, 0, 0, 0, 0,
	257, 0, 0, 0, 99, 0, 252, 0, 0, 113,
	0, 0, 0, 299, 115, 0, 0, 149, 125, 0,
	0, 0, 0, 290, 291, 0, 0, 0, 0, 0,
	0, 0, 0, 56, 0, 486, 289, 255, 283, 276,
	254, 253, 192, 278, 279, 280, 281, 0, 92, 277,
	284, 0, 282, 285, 286, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 250, 268, 0,
	298, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	265, 266, 0, 0, 0, 0, 310, 0, 267, 0,
	0, 263, 264, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 196, 0, 0, 308, 0,
	138, 0, 0, 152, 104, 103, 112, 0, 0, 0,
	95, 0, 144, 134, 164, 0, 135, 143, 116, 156,
	139, 163, 197, 171, 154, 170, 84, 153, 162, 93,
	146, 0, 0, 0, 86, 160, 151, 123, 108, 109,
	85, 0, 142, 98, 102, 97, 131, 157, 158, 96,
	89, 169, 88, 90, 168, 130, 155, 161, 124, 121,
	87, 159, 122, 120, 111, 100, 105, 136, 118, 137,
	106, 127, 126, 128, 0, 0, 0, 150, 166, 178,
	0, 0, 172, 173, 174, 175, 0, 0, 0, 129,
	91, 107, 147, 119, 110, 117, 141, 177, 133, 145,
	94, 165, 148, 300, 309, 306, 307, 304, 305, 303,
	302, 301, 311, 292, 293, 294, 295, 297, 0, 296,
	83, 0, 114, 176, 140, 101, 167, 132, 0, 0,
	0, 0, 257, 0, 0, 0, 99, 0, 252, 0,
	0, 113, 0, 0, 0, 299, 115, 0, 0, 149,
	125, 0, 0, 0, 0, 290, 291, 0, 0, 0,
	0, 0, 0, 0, 0, 56, 0, 0, 289, 255,
	283, 276, 254, 253, 192, 278, 279, 280, 281, 0,
	92, 277, 284, 0, 282, 285, 286, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 250,
	268, 0, 298, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 265, 266, 246, 0, 0, 0, 310, 0,
	267, 0, 0, 263, 264, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 196, 0, 0,
	308, 0, 138, 0, 0, 152, 104, 103, 112, 0,
	0, 0, 95, 0, 144, 134, 164, 0, 135, 143,
	116, 156, 139, 163, 197, 171, 154, 170, 84, 153,
	162, 93, 146, 0, 0, 0, 86, 160, 151, 123,
	108, 109, 85, 0, 142, 98, 102, 97, 131, 157,
	158, 96, 89, 169, 88, 90, 168, 130, 155, 161,
	124, 121, 87, 159, 122, 120, 111, 100, 105, 136,
	118, 137, 106, 127, 126, 128, 0, 0, 0, 150,
	166, 178, 0, 0, 172, 173, 174, 175, 0, 0,
	0, 129, 91, 107, 147, 119, 110, 117, 141, 177,
	133, 145, 94, 165, 148, 300, 309, 306, 307, 304,
	305, 303, 302, 301, 311, 292, 293, 294, 295, 297,
	0, 296, 83, 0, 114, 176, 140, 101, 167, 132,
	0, 0, 0, 0, 257, 0, 0, 0, 99, 0,
	252, 0, 0, 113, 0, 0, 0, 299, 115, 0,
	0, 149, 125, 0, 0, 0, 0, 290, 291, 0,
	0, 0, 0, 0, 0, 891, 0, 56, 0, 0,
	289, 255, 283, 276, 254, 253, 192, 278, 279, 280,
	281, 0, 92, 277, 284, 0, 282, 285, 286, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 250, 268, 0, 298, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 265, 266, 0, 0, 0, 0,
	310, 0, 267, 0, 0, 263, 264, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 196,
	0, 0, 308, 0, 138, 0, 0, 152, 104, 103,
	112, 0, 0, 0, 95, 0, 144, 134, 164, 0,
	135, 143, 116, 156, 139, 163, 197, 171, 154, 170,
	84, 153, 162, 93, 146, 0, 0, 0, 86, 160,
	151, 123, 108, 109, 85, 0, 142, 98, 102, 97,
	131, 157, 158, 96, 89, 169, 88, 90, 168, 130,
	155, 161, 124, 121, 87, 159, 122, 120, 111, 100,
	105, 136, 118, 137, 106, 127, 126, 128, 0, 0,
	0, 150, 166, 178, 0, 0, 172, 173, 174, 175,
	0, 0, 0, 129, 91, 107, 147, 119, 110, 117,
	141, 177, 133, 145, 94, 165, 148, 300, 309, 306,
	307, 304, 305, 303, 302, 301, 311, 292, 293, 294,
	295, 297, 26, 296, 83, 0, 114, 176, 140, 101,
	167, 0, 0, 0, 132, 0, 0, 0, 0, 257,
	0, 0, 0, 99, 0, 252, 0, 0, 113, 0,
	0, 0, 299, 115, 0, 0, 149, 125, 0, 0,
	0, 0, 290, 291, 0, 0, 0, 0, 0, 0,
	0, 0, 56, 0, 0, 289, 255, 283, 276, 254,
	253, 192, 278, 279, 280, 281, 0, 92, 277, 284,
	0, 282, 285, 286, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 250, 268, 0, 298,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 265,
	266, 0, 0, 0, 0, 310, 0, 267, 0, 0,
	263, 264, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 196, 0, 0, 308, 0, 138,
	0, 0, 152, 104, 103, 112, 0, 0, 0, 95,
	0, 144, 134, 164, 0, 135, 143, 116, 156, 139,
	163, 197, 171, 154, 170, 84, 153, 162, 93, 146,
	0, 0, 0, 86, 160, 151, 123, 108, 109, 85,
	0, 142, 98, 102, 97, 131, 157, 158, 96, 89,
	169, 88, 90, 168, 130, 155, 161, 124, 121, 87,
	159, 122, 120, 111, 100, 105, 136, 118, 137, 106,
	127, 126, 128, 0, 0, 0, 150, 166, 178, 0,
	0, 172, 173, 174, 175, 0, 0, 0, 129, 91,
	107, 147, 119, 110, 117, 141, 177, 133, 145, 94,
	165, 148, 300, 309, 306, 307, 304, 305, 303, 302,
	301, 311, 292, 293, 294, 295, 297, 0, 296, 83,
	0, 114, 176, 140, 101, 167, 132, 0, 0, 0,
	0, 257, 0, 0, 0, 99, 0, 252, 0, 0,
	113, 0, 0, 0, 299, 115, 0, 0, 149, 125,
	0, 0, 0, 0, 290, 291, 0, 0, 0, 0,
	0, 0, 0, 0, 56, 0, 0, 289, 255, 283,
	276, 254, 253, 192, 278, 279, 280, 281, 0, 92,
	277, 284, 0, 282, 285, 286, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 250, 268,
	0, 298, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 265, 266, 0, 0, 0, 0, 310, 0, 267,
	0, 0, 263, 264, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 196, 0, 0, 308,
	0, 138, 0, 0, 152, 104, 103, 112, 0, 0,
	0, 95, 0, 144, 134, 164, 0, 135, 143, 116,
	156, 139, 163, 197, 171, 154, 170, 84, 153, 162,
	93, 146, 0, 0, 0, 86, 160, 151, 123, 108,
	109, 85, 0, 142, 98, 102, 97, 131, 157, 158,
	96, 89, 169, 88, 90, 168, 130, 155, 161, 124,
	121, 87, 159, 122, 120, 111, 100, 105, 136, 118,
	137, 106, 127, 126, 128, 0, 0, 0, 150, 166,
	178, 0, 0, 172, 173, 174, 175, 0, 0, 0,
	129, 91, 107, 147, 119, 110, 117, 141, 177, 133,
	145, 94, 165, 148, 300, 309, 306, 307, 304, 305,
	303, 302, 301, 311, 292, 293, 294, 295, 297, 132,
	296, 83, 0, 114, 176, 140, 101, 167, 99, 0,
	551, 0, 0, 113, 0, 0, 0, 299, 115, 0,
	0, 149, 125, 0, 0, 0, 0, 290, 291, 0,
	0, 0, 0, 0, 0, 0, 0, 56, 0, 0,
	289, 255, 283, 276, 254, 253, 192, 278, 279, 280,
	281, 0, 92, 277, 284, 0, 282, 285, 286, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 268, 0, 298, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 265, 266, 0, 0, 0, 0,
	310, 0, 267, 0, 0, 263, 264, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 196,
	0, 0, 308, 0, 138, 0, 0, 152, 104, 103,
	112, 0, 0, 0, 95, 0, 144, 134, 164, 1399,
	135, 143, 116, 156, 139, 163, 197, 171, 154, 170,
	84, 153, 162, 93, 146, 0, 0, 0, 86, 160,
	151, 123, 108, 109, 85, 0, 142, 98, 102, 97,
	131, 157, 158, 96, 89, 169, 88, 90, 168, 130,
	155, 161, 124, 121, 87, 159, 122, 120, 111, 100,
	105, 136, 118, 137, 106, 127, 126, 128, 0, 0,
	0, 150, 166, 178, 0, 0, 172, 173, 174, 175,
	0, 0, 0, 129, 91, 107, 147, 119, 110, 117,
	141, 177, 133, 145, 94, 165, 148, 300, 309, 306,
	307, 304, 305, 303, 302, 301, 311, 292, 293, 294,
	295, 297, 132, 296, 83, 0, 114, 176, 140, 101,
	167, 99, 0, 551, 0, 0, 113, 0, 0, 0,
	299, 115, 0, 0, 149, 125, 0, 0, 0, 0,
	290, 291, 0, 0, 0, 0, 0, 0, 0, 0,
	56, 0, 0, 289, 255, 283, 276, 254, 253, 192,
	278, 279, 280, 281, 0, 92, 277, 284, 0, 282,
	285, 286, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 268, 0, 298, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 265, 266, 0,
	0, 0, 0, 310, 0, 267, 0, 0, 263, 264,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 196, 0, 0, 308, 0, 138, 0, 0,
	152, 104, 103, 112, 0, 0, 0, 95, 0, 144,
	134, 164, 0, 135, 143, 116, 156, 139, 163, 197,
	171, 154, 170, 84, 153, 162, 93, 146, 0, 0,
	0, 86, 160, 151, 123, 108, 109, 85, 0, 142,
	98, 102, 97, 131, 157, 158, 96, 89, 169, 88,
	90, 168, 130, 155, 161, 124, 121, 87, 159, 122,
	120, 111, 100, 105, 136, 118, 137, 106, 127, 126,
	128, 0, 0, 0, 150, 166, 178, 0, 0, 172,
	173, 174, 175, 0, 0, 0, 129, 91, 107, 147,
	119, 110, 117, 141, 177, 133, 145, 94, 165, 148,
	300, 309, 306, 307, 304, 305, 303, 302, 301, 311,
	292, 293, 294, 295, 297, 132, 296, 83, 0, 114,
	176, 140, 101, 167, 99, 0, 551, 0, 0, 113,
	0, 0, 0, 299, 115, 0, 0, 149, 125, 0,
	0, 0, 0, 290, 291, 0, 0, 0, 0, 0,
	0, 0, 0, 56, 0, 0, 289, 255, 283, 276,
	562, 253, 192, 278, 279, 280, 281, 0, 92, 277,
	284, 0, 282, 285, 286, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 268, 0,
	298, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	265, 266, 0, 0, 0, 0, 310, 0, 267, 0,
	0, 263, 264, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 196, 0, 0, 308, 0,
	138, 0, 0, 152, 104, 103, 112, 0, 0, 0,
	95, 0, 144, 134, 164, 0, 135, 143, 116, 156,
	139, 163, 197, 171, 154, 170, 84, 153, 162, 93,
	146, 0, 0, 0, 86, 160, 151, 123, 108, 109,
	85, 0, 142, 98, 102, 97, 131, 157, 158, 96,
	89, 169, 88, 90, 168, 130, 155, 161, 124, 121,
	87, 159, 122, 120, 111, 100, 105, 136, 118, 137,
	106, 127, 126, 128, 0, 0, 0, 150, 166, 178,
	0, 0, 172, 173, 174, 175, 0, 0, 0, 129,
	91, 107, 147, 119, 110, 117, 141, 177, 133, 145,
	94, 165, 148, 300, 309, 306, 307, 304, 305, 303,
	302, 301, 311, 292, 293, 294, 295, 297, 0, 296,
	83, 0, 114, 176, 140, 101, 167, 132, 0, 0,
	0, 508, 0, 0, 0, 0, 99, 0, 0, 0,
	0, 113, 0, 0, 0, 0, 115, 0, 0, 149,
	125, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 81,
	0, 0, 510, 511, 512, 0, 0, 0, 0, 0,
	92, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 505, 504, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 506, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 196, 0, 0,
	0, 0, 138, 0, 0, 152, 104, 103, 112, 0,
	0, 0, 95, 0, 144, 134, 164, 0, 135, 143,
	116, 156, 139, 163, 197, 171, 154, 170, 84, 153,
	162, 93, 146, 0, 0, 0, 86, 160, 151, 123,
	108, 109, 85, 0, 142, 98, 102, 97, 131, 157,
	158, 96, 89, 169, 88, 90, 168, 130, 155, 161,
	124, 121, 87, 159, 122, 120, 111, 100, 105, 136,
	118, 137, 106, 127, 126, 128, 0, 0, 0, 150,
	166, 178, 0, 0, 172, 173, 174, 175, 0, 0,
	0, 129, 91, 107, 147, 119, 110, 117, 141, 177,
	133, 145, 94, 165, 148, 0, 0, 0, 26, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	132, 0, 83, 0, 114, 176, 140, 101, 167, 99,
	0, 0, 0, 0, 113, 0, 0, 0, 0, 115,
	0, 0, 149, 125, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 56, 0,
	0, 0, 81, 0, 0, 510, 511, 512, 0, 0,
	0, 0, 0, 92, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	196, 0, 0, 0, 0, 138, 0, 0, 152, 104,
	103, 112, 0, 0, 0, 95, 0, 144, 134, 164,
	0, 135, 143, 116, 156, 139, 163, 197, 171, 154,
	170, 84, 153, 162, 93, 146, 0, 0, 0, 86,
	160, 151, 123, 108, 109, 85, 0, 142, 98, 102,
	97, 131, 157, 158, 96, 89, 169, 88, 90, 168,
	130, 155, 161, 124, 121, 87, 159, 122, 120, 111,
	100, 105, 136, 118, 137, 106, 127, 126, 128, 0,
	0, 0, 150, 166, 178, 0, 0, 172, 173, 174,
	175, 0, 0, 0, 129, 91, 107, 147, 119, 110,
	117, 141, 177, 133, 145, 94, 165, 148, 0, 0,
	0, 26, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 132, 0, 83, 0, 114, 176, 140,
	101, 167, 99, 0, 0, 0, 0, 113, 0, 0,
	0, 0, 115, 0, 0, 149, 125, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 56, 0, 0, 0, 194, 0, 0, 193, 191,
	192, 0, 0, 0, 0, 0, 92, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 196, 0, 0, 0, 0, 138, 0,
	0, 152, 104, 103, 112, 0, 0, 0, 95, 0,
	144, 134, 164, 0, 135, 143, 116, 156, 139, 163,
	197, 171, 154, 170, 84, 153, 162, 93, 146, 0,
	0, 0, 86, 160, 151, 123, 108, 109, 85, 0,
	142, 98, 102, 97, 131, 157, 158, 96, 89, 169,
	88, 90, 168, 130, 155, 161, 124, 121, 87, 159,
	122, 120, 111, 100, 105, 136, 118, 137, 106, 127,
	126, 128, 0, 0, 0, 150, 166, 178, 0, 0,
	172, 173, 174, 175, 0, 0, 0, 129, 91, 107,
	147, 119, 110, 117, 141, 177, 133, 145, 94, 165,
	148, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 132, 0, 83, 0,
	114, 176, 140, 101, 167, 99, 0, 0, 0, 0,
	113, 0, 0, 0, 0, 115, 0, 0, 149, 125,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 81, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 92,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 74, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 77, 78, 0, 73, 0, 0, 0,
	79, 138, 0, 0, 152, 104, 103, 112, 0, 0,
	0, 95, 0, 144, 134, 164, 0, 135, 143, 116,
	156, 139, 163, 75, 171, 154, 170, 84, 153, 162,
	93, 146, 0, 0, 0, 86, 160, 151, 123, 108,
	109, 85, 0, 142, 98, 102, 97, 131, 157, 158,
	96, 89, 169, 88, 90, 168, 130, 155, 161, 124,
	121, 87, 159, 122, 120, 111, 100, 105, 136, 118,
	137, 106, 127, 126, 128, 0, 0, 0, 150, 166,
	178, 0, 0, 172, 173, 174, 175, 0, 0, 0,
	129, 91, 107, 147, 119, 110, 117, 141, 177, 133,
	145, 94, 165, 148, 0, 76, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 83, 0, 114, 176, 140, 101, 167, 132, 0,
	0, 0, 611, 0, 0, 0, 0, 99, 0, 0,
	0, 0, 113, 0, 0, 0, 0, 115, 0, 0,
	149, 125, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	194, 0, 0, 193, 191, 192, 0, 0, 0, 0,
	0, 92, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 196, 0,
	0, 0, 0, 138, 0, 0, 152, 104, 103, 112,
	0, 0, 0, 95, 0, 144, 134, 164, 0, 135,
	143, 116, 156, 139, 163, 197, 171, 154, 170, 84,
	153, 162, 93, 146, 0, 0, 0, 86, 160, 151,
	123, 108, 109, 85, 0, 142, 98, 102, 97, 131,
	157, 158, 96, 89, 169, 88, 90, 168, 130, 155,
	161, 124, 121, 87, 159, 122, 120, 111, 100, 105,
	136, 118, 137, 106, 127, 126, 128, 0, 0, 0,
	150, 166, 178, 0, 0, 172, 173, 174, 175, 0,
	0, 0, 129, 91, 107, 147, 119, 110, 117, 141,
	177, 133, 145, 94, 165, 148, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 132, 0, 83, 0, 114, 176, 140, 101, 167,
	99, 0, 0, 0, 0, 113, 0, 0, 0, 0,
	115, 0, 0, 149, 125, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 56,
	0, 0, 0, 194, 0, 0, 193, 191, 192, 0,
	0, 0, 0, 0, 92, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 196, 0, 0, 0, 0, 138, 0, 0, 152,
	104, 103, 112, 0, 0, 0, 95, 0, 144, 134,
	164, 0, 135, 143, 116, 156, 139, 163, 197, 171,
	154, 170, 84, 153, 162, 93, 146, 0, 0, 0,
	86, 160, 151, 123, 108, 109, 85, 0, 142, 98,
	102, 97, 131, 157, 158, 96, 89, 169, 88, 90,
	168, 130, 155, 161, 124, 121, 87, 159, 122, 120,
	111, 100, 105, 136, 118, 137, 106, 127, 126, 128,
	0, 0, 0, 150, 166, 178, 0, 0, 172, 173,
	174, 175, 0, 0, 0, 129, 91, 107, 147, 119,
	110, 117, 141, 177, 133, 145, 94, 165, 148, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 132, 0, 83, 0, 114, 176,
	140, 101, 167, 99, 0, 633, 0, 0, 113, 0,
	0, 0, 0, 115, 0, 0, 149, 125, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 81, 0, 0, 634,
	635, 636, 0, 0, 0, 0, 0, 92, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 196, 0, 0, 0, 0, 138,
	0, 0, 152, 104, 103, 112, 0, 0, 0, 95,
	0, 144, 134, 164, 0, 135, 143, 116, 156, 139,
	163, 197, 171, 154, 170, 84, 153, 162, 93, 146,
	0, 0, 0, 86, 160, 151, 123, 108, 109, 85,
	0, 142, 98, 102, 97, 131, 157, 158, 96, 89,
	169, 88, 90, 168, 130, 155, 161, 124, 121, 87,
	159, 122, 120, 111, 100, 105, 136, 118, 137, 106,
	127, 126, 128, 0, 0, 0, 150, 166, 178, 0,
	0, 172, 173, 174, 175, 0, 0, 0, 129, 91,
	107, 147, 119, 110, 117, 141, 177, 133, 145, 94,
	165, 148, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 83,
	0, 114, 176, 140, 101, 167, 132, 0, 0, 0,
	611, 0, 0, 0, 0, 99, 0, 0, 0, 0,
	113, 0, 0, 0, 0, 115, 0, 0, 149, 125,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 194, 0,
	0, 193, 191, 192, 0, 0, 0, 0, 0, 92,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 196, 0, 0, 0,
	0, 138, 0, 0, 152, 104, 103, 112, 0, 0,
	0, 95, 0, 144, 134, 164, 0, 609, 143, 116,
	156, 139, 163, 197, 171, 154, 170, 84, 153, 162,
	93, 146, 0, 0, 0, 86, 160, 151, 123, 108,
	109, 85, 0, 142, 98, 102, 97, 131, 157, 158,
	96, 89, 169, 88, 90, 168, 130, 155, 161, 124,
	121, 87, 159, 122, 120, 111, 100, 105, 136, 118,
	137, 106, 127, 126, 128, 0, 0, 0, 150, 166,
	178, 0, 0, 172, 173, 174, 175, 0, 0, 0,
	129, 91, 107, 147, 119, 110, 117, 141, 177, 133,
	145, 94, 165, 148, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	132, 83, 0, 114, 176, 140, 101, 167, 589, 99,
	0, 0, 0, 0, 113, 0, 0, 0, 0, 115,
	0, 0, 149, 125, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 194, 0, 0, 193, 191, 192, 0, 0,
	0, 0, 0, 92, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	196, 0, 0, 0, 0, 138, 0, 0, 152, 104,
	103, 112, 0, 0, 0, 95, 0, 144, 134, 164,
	0, 135, 143, 116, 156, 139, 163, 197, 171, 154,
	170, 84, 153, 162, 93, 146, 0, 0, 0, 86,
	160, 151, 123, 108, 109, 85, 0, 142, 98, 102,
	97, 131, 157, 158, 96, 89, 169, 88, 90, 168,
	130, 155, 161, 124, 121, 87, 159, 122, 120, 111,
	100, 105, 136, 118, 137, 106, 127, 126, 128, 0,
	0, 0, 150, 166, 178, 0, 0, 172, 173, 174,
	175, 0, 0, 0, 129, 91, 107, 147, 119, 110,
	117, 141, 177, 133, 145, 94, 165, 148, 0, 0,
	0, 0, 0, 0, 0, 0, 321, 0, 0, 0,
	0, 0, 0, 132, 0, 83, 0, 114, 176, 140,
	101, 167, 99, 0, 0, 0, 0, 113, 0, 0,
	0, 0, 115, 0, 0, 149, 125, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 194, 0, 0, 193, 191,
	192, 0, 0, 0, 0, 0, 92, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 196, 0, 0, 0, 0, 138, 0,
	0, 152, 104, 103, 112, 0, 0, 0, 95, 0,
	144, 134, 164, 0, 135, 143, 116, 156, 139, 163,
	197, 171, 154, 170, 84, 153, 162, 93, 146, 0,
	0, 0, 86, 160, 151, 123, 108, 109, 85, 0,
	142, 98, 102, 97, 131, 157, 158, 96, 89, 169,
	88, 90, 168, 130, 155, 161, 124, 121, 87, 159,
	122, 120, 111, 100, 105, 136, 118, 137, 106, 127,
	126, 128, 0, 0, 0, 150, 166, 178, 0, 0,
	172, 173, 174, 175, 0, 0, 0, 129, 91, 107,
	147, 119, 110, 117, 141, 177, 133, 145, 94, 165,
	148, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 132, 0, 83, 0,
	114, 176, 140, 101, 167, 99, 0, 0, 0, 0,
	113, 0, 0, 0, 0, 115, 0, 0, 149, 125,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 194, 0,
	0, 193, 191, 192, 0, 0, 0, 0, 0, 92,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 188, 0, 196, 0, 0, 0,
	0, 138, 0, 0, 152, 104, 103, 112, 0, 0,
	0, 95, 0, 144, 134, 164, 0, 135, 143, 116,
	156, 139, 163, 197, 171, 154, 170, 84, 153, 162,
	93, 146, 0, 0, 0, 86, 160, 151, 123, 108,
	109, 85, 0, 142, 98, 102, 97, 131, 157, 158,
	96, 89, 169, 88, 90, 168, 130, 155, 161, 124,
	121, 87, 159, 122, 120, 111, 100, 105, 136, 118,
	137, 106, 127, 126, 128, 0, 0, 0, 150, 166,
	178, 0, 0, 172, 173, 174, 175, 0, 0, 0,
	129, 91, 107, 147, 119, 110, 117, 141, 177, 133,
	145, 94, 165, 148, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 132,
	0, 83, 0, 114, 176, 140, 101, 167, 99, 0,
	0, 0, 0, 113, 0, 0, 0, 0, 115, 0,
	0, 149, 125, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 81, 0, 0, 510, 511, 512, 0, 0, 0,
	0, 0, 92, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 196,
	0, 0, 0, 0, 138, 0, 0, 152, 104, 103,
	112, 0, 0, 0, 95, 0, 144, 134, 164, 0,
	135, 143, 116, 156, 139, 163, 197, 171, 154, 170,
	84, 153, 162, 93, 146, 0, 0, 0, 86, 160,
	151, 123, 108, 109, 85, 0, 142, 98, 102, 97,
	131, 157, 158, 96, 89, 169, 88, 90, 168, 130,
	155, 161, 124, 121, 87, 159, 122, 120, 111, 100,
	105, 136, 118, 137, 106, 127, 126, 128, 0, 0,
	0, 150, 166, 178, 0, 0, 172, 173, 174, 175,
	0, 0, 0, 129, 91, 107, 147, 119, 110, 117,
	141, 177, 133, 145, 94, 165, 148, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 132, 0, 83, 0, 114, 176, 140, 101,
	167, 99, 0, 0, 0, 0, 113, 0, 0, 0,
	0, 115, 0, 0, 149, 125, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 255, 0, 0, 193, 191, 192,
	0, 0, 0, 0, 0, 92, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 196, 0, 0, 0, 0, 138, 0, 0,
	152, 104, 103, 112, 0, 0, 0, 95, 0, 144,
	134, 164, 0, 135, 143, 116, 156, 139, 163, 197,
	171, 154, 170, 84, 153, 162, 93, 146, 0, 0,
	0, 86, 160, 151, 123, 108, 109, 85, 0, 142,
	98, 102, 97, 131, 157, 158, 96, 89, 169, 88,
	90, 168, 130, 155, 161, 124, 121, 87, 159, 122,
	120, 111, 100, 105, 136, 118, 137, 106, 127, 126,
	128, 0, 0, 0, 150, 166, 178, 0, 0, 172,
	173, 174, 175, 0, 0, 0, 129, 91, 107, 147,
	119, 110, 117, 141, 177, 133, 145, 94, 165, 148,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 132, 0, 83, 0, 114,
	176, 140, 101, 167, 99, 0, 0, 0, 0, 113,
	0, 0, 0, 0, 115, 0, 0, 149, 125, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 194, 0, 0,
	193, 191, 192, 0, 0, 0, 0, 0, 92, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 196, 0, 0, 0, 0,
	138, 0, 0, 152, 104, 103, 112, 0, 0, 0,
	95, 0, 144, 134, 164, 0, 135, 143, 116, 156,
	139, 163, 197, 171, 154, 170, 84, 153, 162, 93,
	146, 0, 0, 0, 86, 160, 151, 123, 108, 109,
	85, 0, 142, 98, 102, 97, 131, 157, 158, 96,
	89, 169, 88, 90, 168, 130, 155, 161, 124, 121,
	87, 159, 122, 120, 111, 100, 105, 136, 118, 137,
	106, 127, 126, 128, 0, 0, 0, 150, 166, 178,
	0, 0, 172, 173, 174, 175, 0, 0, 0, 129,
	91, 107, 147, 119, 110, 117, 141, 177, 133, 145,
	94, 165, 148, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 132, 0,
	83, 0, 114, 176, 140, 101, 167, 99, 0, 0,
	0, 0, 113, 0, 0, 0, 0, 115, 0, 0,
	149, 125, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	81, 0, 0, 0, 0, 0, 753, 0, 0, 754,
	0, 92, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 196, 0,
	0, 0, 0, 138, 0, 0, 152, 104, 103, 112,
	0, 0, 0, 95, 0, 144, 134, 164, 0, 135,
	143, 116, 156, 139, 163, 197, 171, 154, 170, 84,
	153, 162, 93, 146, 0, 0, 0, 86, 160, 151,
	123, 108, 109, 85, 0, 142, 98, 102, 97, 131,
	157, 158, 96, 89, 169, 88, 90, 168, 130, 155,
	161, 124, 121, 87, 159, 122, 120, 111, 100, 105,
	136, 118, 137, 106, 127, 126, 128, 0, 0, 0,
	150, 166, 178, 0, 0, 172, 173, 174, 175, 0,
	0, 0, 129, 91, 107, 147, 119, 110, 117, 141,
	177, 133, 145, 94, 165, 148, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 132, 0, 83, 0, 114, 176, 140, 101, 167,
	99, 0, 0, 0, 0, 113, 0, 0, 0, 0,
	115, 0, 0, 149, 125, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 81, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 92, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 196, 0, 0, 0, 0, 138, 0, 0, 152,
	104, 103, 112, 0, 0, 0, 95, 0, 144, 134,
	164, 0, 135, 143, 116, 156, 139, 163, 197, 171,
	154, 170, 84, 153, 162, 93, 146, 0, 0, 0,
	86, 160, 151, 123, 108, 109, 85, 0, 142, 98,
	102, 97, 131, 157, 158, 96, 89, 169, 88, 90,
	168, 130, 155, 161, 124, 121, 87, 159, 122, 120,
	111, 100, 105, 136, 118, 137, 106, 127, 126, 128,
	0, 0, 0, 150, 166, 178, 0, 0, 172, 173,
	174, 175, 0, 0, 0, 129, 91, 107, 147, 119,
	110, 117, 141, 177, 133, 145, 94, 165, 148, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 83, 0, 114, 176,
	140, 101, 167,
}

var yyPact = [...]int{
	1702, -1000, -207, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, 875, 912, -1000, -1000, -1000, -1000,
	-1000, -1000, 702, 8518, 41, 80, -38, 10308, 79, 182,
	11067, -1000, -10, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-21, 11067, 477, 701, -1000, -1000, -1000, -1000, -1000, 869,
	872, 722, 863, 757, -1000, 5949, 44, 9033, 10055, 4901,
	-1000, 471, 68, 11067, -161, 11573, 37, 37, 37, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 72,
	11067, -1000, 11067, 36, 469, 36, 36, 36, 11067, -1000,
	129, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 11067, 468,
	819, 62, 3801, 3801, 3801, 3801, -3, -5, 3801, -101,
	-93, 719, -1000, -1000, -1000, -1000, 3801, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 11067, 703,
	706, 501, 827, 6738, 6738, 875, -1000, 701, -1000, -1000,
	-1000, 809, -1000, -1000, 323, 900, -1000, 7759, 127, -1000,
	6738, 1965, 635, -1000, -1000, -1000, -1000, 635, 108, 310,
	-1000, -1000, -1000, 7244, 7244, 7244, 7244, 7244, 7244, -1000,
	-1000, -1000, -1000, -1000, -1000, 635, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 6476, 7497,
	635, 635, 635, 635, 635, 635, 635, 635, 6738, 635,
	635, 635, 635, 635, 635, 635, 635, 635, 635, 635,
	635, 635, 9802, 612, 767, -1000, -1000, -1000, 856, 8265,
	9548, 11067, 581, -1000, 646, 645, 4626, -13, -121, -1000,
	47, -1000, -1000, -1000, 228, 9286, -1000, -1000, 818, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, 562, -1000, 1967, 466, 3801, 45, 696, 460,
	257, 458, 11067, 11067, 3801, 46, 11067, 839, 716, 11067,
	455, 437, -1000, 3526, -1000, 3801, 3801, 3801, 3801, 3801,
	3801, 3801, 3801, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	3801, 3801, 3801, 3801, -1000, -104, -71, -1000, 11067, -1000,
	-1000, 91, 91, 1967, 11067, -1000, -1000, -1000, 906, 148,
	391, 115, 651, -1000, 309, 869, 501, 757, 11320, 732,
	-1000, -1000, 11067, -1000, 6738, 6738, 367, -1000, 10561, -1000,
	-1000, -1000, -1000, -1000, 2976, 169, 7244, 336, 264, 7244,
	7244, 7244, 7244, 7244, 7244, 7244, 7244, 7244, 7244, 7244,
	7244, 7244, 7244, 7244, 439, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, 433, -1000, 701, 654, 654, 316, -1000,
	144, -1000, 144, 144, 144, 144, 144, 5163, 501, 554,
	297, 6476, -1000, 2194, 5949, 5949, 6738, 6738, 10814, 10814,
	5949, 864, 186, 297, 10814, -1000, 501, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, 5949, 5949, 5949, 5949, 153, 11067,
	-1000, 10814, 9033, 9033, 9033, 9033, 9033, -1000, 754, 753,
	-1000, 731, 730, 738, 11067, -1000, 547, 8265, 133, 635,
	-1000, 11067, -1000, 14, 594, 9033, 11067, -1000, -1000, 4626,
	7244, 646, 645, -121, 632, -1000, -105, -127, 7244, 6211,
	134, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 2701, 179,
	338, -82, -1000, -1000, -1000, -1000, 674, -1000, 674, 674,
	674, 674, -54, -54, -54, -54, -1000, -1000, -1000, -1000,
	-1000, 691, 689, -1000, 674, 674, 674, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, 681, 681, 681, 675, 675, 705,
	-1000, 11067, -185, 425, 3801, 838, 3801, -1000, 58, -1000,
	11067, -1000, -1000, 11067, 3801, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, 251, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, 545, -1000, 641, -1000, -1000,
	776, 6738, 6738, 3251, 6738, -1000, 810, 802, 827, -1000,
	864, 897, -1000, 806, 804, 5949, -1000, -1000, 169, 239,
	-1000, -1000, 389, -1000, -1000, -1000, -1000, 112, 635, -1000,
	1782, -1000, -1000, -1000, -1000, 336, 7244, 7244, 7244, 1344,
	1782, 2076, 354, 1993, 144, 145, 145, 149, 149, 149,
	149, 149, 216, 216, -1000, -1000, -1000, 501, 310, -1000,
	-1000, 310, -1000, 501, 5949, 636, -1000, -1000, 6738, -1000,
	501, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, 542, 542, 334, 353, 647, -1000, 105, 622,
	542, 5949, 256, -1000, 6738, 501, -1000, 542, 501, 542,
	542, 571, 784, 635, -1000, 631, -1000, 219, 767, 695,
	711, 821, -1000, -1000, -1000, -1000, 750, -1000, 739, -1000,
	-1000, -1000, -1000, -1000, 66, 65, 54, 11573, -1000, 898,
	9033, 567, -1000, -1000, 1782, 632, -121, -138, -1000, -1000,
	1782, -1000, 297, -1000, 475, 629, 2418, -1000, -1000, -1000,
	-1000, -1000, -1000, 679, 832, 183, 201, 410, -1000, -1000,
	822, -1000, 304, -84, -1000, -1000, 381, -54, -54, -1000,
	-1000, 134, 815, 134, 134, 134, 488, 488, -1000, -1000,
	-1000, -1000, 380, -1000, -1000, -1000, 374, -1000, 710, 11573,
	3801, -1000, 4351, -1000, -1000, -1000, -1000, -1000, -1000, 744,
	634, 221, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, 11, -1000, 3801, -1000, 269, 11067, 11067,
	1967, 841, 11067, 766, 297, 297, 101, -1000, 799, 797,
	-1000, 11067, -1000, -1000, -1000, -1000, 621, -1000, -1000, -1000,
	4076, 5949, -1000, 1344, 1782, 1880, -1000, 7244, 7244, -1000,
	-1000, 542, 5949, 297, -1000, -1000, -1000, 536, 439, 536,
	7244, 7244, 3251, 7244, 7244, -178, 569, 180, -1000, 6738,
	324, -1000, -1000, -1000, -1000, -1000, 709, 10814, 635, -1000,
	8012, -1000, 11573, 875, 10814, 6738, 6738, -1000, -1000, 6738,
	677, -1000, 6738, -1000, -1000, -1000, 635, 635, 635, 508,
	-1000, 875, 567, -1000, -1000, -1000, -134, -141, -1000, -1000,
	-1000, 2701, -1000, 2701, 11573, -1000, 409, 393, -1000, -1000,
	708, 94, -1000, -1000, -1000, 509, 134, 134, -1000, 184,
	-1000, -1000, -1000, 533, -1000, 531, 609, 529, 11067, -1000,
	-1000, 608, -1000, 217, -1000, -1000, 11573, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 11573,
	11067, -1000, -1000, -1000, -1000, -1000, 11573, -1000, -1000, 488,
	6738, -1000, -1000, -1000, 91, -1000, -1000, 4351, -1000, -1000,
	-1000, -1000, -1000, 898, 9033, -1000, -1000, 501, -1000, 7244,
	1782, 1782, -1000, -1000, 501, 674, 674, -1000, 674, 675,
	-1000, 674, -30, 674, -39, 635, 501, 501, 1550, 1910,
	-1000, 1453, 1674, 635, -169, -1000, 297, 6738, -204, 823,
	552, 603, -1000, -1000, 5687, 501, 515, 97, 508, 869,
	-1000, 297, 297, 297, 11573, 297, 11573, 11573, 11573, 8780,
	11573, 869, -1000, -1000, -1000, -1000, 2418, -1000, 500, -1000,
	674, -1000, -1000, -78, 905, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -54, 488, -54, 368,
	-1000, 364, 3801, 4351, 2701, -1000, 663, -1000, -1000, -1000,
	-1000, 829, -1000, 297, -1000, 896, 604, -1000, 1782, -1000,
	-1000, 107, -1000, -1000, -1000, -1000, -1000, -1000, 350, -1000,
	-1000, -1000, 7244, 7244, -1000, 7244, 7244, 7244, 501, 488,
	297, -1000, 5425, 831, -1000, 635, -1000, -1000, 644, 10561,
	10561, -1000, -1000, 498, -1000, 491, 491, 491, 133, -1000,
	-1000, 126, 11573, -1000, 162, -1000, -151, 134, -1000, 134,
	505, 503, -1000, -1000, -1000, 11573, 635, 879, 871, -1000,
	-1000, 501, 1645, 1645, 1645, 1645, 12, -1000, -1000, -1000,
	597, 903, -1000, 635, -1000, 701, 95, -1000, 11573, -1000,
	-1000, -1000, -1000, -1000, 126, -1000, 390, 215, 488, -1000,
	312, 828, -1000, 825, -1000, -1000, -1000, -1000, -1000, 487,
	10, -1000, 6738, 6738, -1000, -1000, -1000, -1000, -1000, 501,
	43, -191, 10814, 603, 501, 10561, -1000, -1000, -1000, 345,
	-1000, -1000, -1000, 488, -1000, -1000, 696, 484, -1000, 11573,
	297, 597, -1000, 765, -182, -195, 596, -1000, -1000, -1000,
	-1000, -185, -1000, 10, 783, -1000, 764, -1000, -1000, -1000,
	6, -188, 4, -193, 635, -197, 6991, -1000, 1645, 501,
	-1000, -1000,
}

var yyPgo = [...]int{
	0, 1136, 21, 34, 1134, 1133, 1132, 927, 925, 922,
	1131, 1130, 1129, 1127, 1125, 1124, 1123, 1121, 1120, 1119,
	1118, 1117, 1114, 1110, 1108, 1107, 1106, 192, 1103, 1102,
	1101, 63, 1100, 66, 1099, 1097, 36, 52, 45, 40,
	877, 1096, 14, 59, 90, 1095, 42, 1094, 1093, 72,
	1092, 60, 1091, 1089, 178, 1087, 1086, 16, 23, 1078,
	1077, 1075, 1074, 67, 1013, 1073, 1072, 1071, 1069, 1058,
	1057, 53, 8, 9, 25, 19, 1056, 116, 6, 1055,
	46, 1053, 1051, 1046, 1038, 33, 1036, 48, 1032, 38,
	47, 1028, 15, 61, 35, 12, 7, 71, 58, 70,
	1027, 26, 57, 43, 1026, 1025, 425, 1023, 1022, 1019,
	1018, 1016, 1015, 165, 376, 1014, 1012, 1011, 1010, 32,
	51, 365, 771, 69, 1009, 1007, 13, 1006, 1368, 65,
	64, 11, 1005, 30, 754, 31, 1003, 1002, 1001, 1000,
	29, 999, 37, 998, 996, 995, 993, 989, 988, 987,
	414, 986, 984, 983, 18, 27, 982, 981, 55, 17,
	980, 976, 975, 41, 56, 974, 49, 973, 972, 970,
	968, 28, 24, 967, 10, 965, 5, 964, 962, 2,
	961, 20, 950, 3, 947, 4, 39, 946, 944, 44,
	943, 942, 50, 939, 938, 933, 931, 0, 347, 920,
	918, 98,
}

var yyR1 = [...]int{
	0, 195, 196, 196, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 2, 2, 2, 6, 3,
	4, 4, 5, 5, 7, 7, 7, 30, 30, 8,
	9, 9, 9, 199, 199, 49, 49, 93, 93, 10,
	10, 10, 10, 10, 10, 98, 98, 103, 103, 103,
	104, 104, 104, 104, 138, 138, 136, 136, 11, 11,
	11, 11, 11, 11, 11, 185, 185, 184, 183, 183,
	182, 182, 181, 16, 168, 169, 169, 169, 164, 141,
	141, 142, 142, 142, 142, 142, 149, 145, 145, 143,
	143, 143, 143, 143, 143, 143, 144, 144, 144, 144,
	144, 146, 146, 146, 146, 146, 147, 147, 147, 147,
	147, 147, 147, 147, 147, 147, 147, 147, 147, 147,
	147, 148, 148, 148, 148, 148, 148, 148, 148, 163,
	163, 150, 150, 158, 158, 159, 159, 159, 156, 156,
	157, 157, 160, 160, 160, 151, 151, 151, 151, 151,
	151, 151, 153, 153, 161, 161, 154, 154, 154, 155,
	155, 155, 162, 162, 162, 162, 162, 152, 152, 165,
	165, 177, 177, 176, 176, 176, 167, 167, 173, 173,
	173, 173, 173, 166, 166, 175, 175, 174, 170, 170,
	170, 171, 171, 171, 172, 172, 172, 12, 12, 12,
	12, 12, 12, 12, 12, 12, 186, 186, 186, 186,
	186, 186, 186, 186, 186, 186, 186, 180, 178, 178,
	179, 179, 13, 14, 14, 14, 14, 14, 15, 15,
	17, 18, 18, 18, 18, 18, 18, 18, 18, 18,
	18, 18, 18, 18, 18, 18, 18, 18, 18, 18,
	18, 18, 18, 18, 18, 18, 18, 111, 111, 108,
	108, 109, 109, 110, 110, 110, 112, 112, 112, 139,
	139, 137, 137, 137, 19, 19, 21, 21, 22, 23,
	20, 20, 20, 20, 20, 24, 25, 25, 25, 189,
	189, 189, 189, 189, 189, 26, 26, 190, 190, 200,
	27, 28, 28, 29, 29, 29, 33, 33, 33, 31,
	31, 32, 32, 38, 38, 37, 37, 39, 39, 39,
	39, 124, 124, 124, 126, 126, 126, 126, 123, 41,
	41, 42, 42, 43, 43, 44, 44, 44, 56, 56,
	92, 92, 94, 94, 45, 45, 45, 45, 46, 46,
	47, 47, 48, 48, 132, 132, 131, 131, 131, 130,
	50, 50, 50, 52, 51, 51, 51, 51, 53, 53,
	55, 55, 54, 54, 57, 57, 57, 57, 58, 58,
	40, 40, 40, 40, 40, 40, 40, 107, 107, 60,
	60, 59, 59, 59, 59, 59, 59, 59, 59, 59,
	59, 70, 70, 70, 70, 70, 70, 61, 61, 61,
	61, 61, 61, 61, 36, 36, 71, 71, 71, 77,
	72, 72, 64, 64, 64, 64, 64, 64, 64, 64,
	64, 64, 64, 64, 64, 64, 64, 64, 64, 64,
	64, 64, 64, 64, 64, 64, 64, 64, 64, 64,
	64, 64, 64, 64, 194, 193, 68, 68, 68, 66,
	66, 66, 66, 66, 66, 66, 66, 66, 66, 66,
	66, 66, 66, 66, 67, 67, 67, 67, 67, 67,
	67, 67, 201, 201, 69, 69, 69, 69, 34, 34,
	34, 34, 34, 135, 135, 140, 140, 140, 140, 140,
	140, 140, 140, 140, 140, 140, 140, 140, 140, 81,
	81, 35, 35, 79, 79, 80, 82, 82, 78, 78,
	78, 63, 63, 63, 63, 63, 63, 63, 63, 63,
	63, 63, 63, 63, 187, 187, 65, 65, 65, 83,
	83, 84, 84, 85, 85, 86, 86, 87, 88, 88,
	88, 88, 88, 88, 88, 89, 89, 89, 89, 90,
	90, 90, 62, 62, 62, 62, 62, 62, 91, 91,
	91, 91, 95, 95, 73, 73, 75, 75, 74, 76,
	188, 188, 188, 96, 96, 101, 97, 97, 99, 99,
	102, 102, 102, 100, 100, 100, 127, 127, 127, 105,
	105, 113, 113, 114, 114, 106, 106, 115, 115, 115,
	115, 115, 115, 115, 115, 115, 115, 116, 116, 116,
	117, 117, 118, 118, 118, 125, 125, 121, 121, 122,
	122, 128, 128, 128, 128, 128, 129, 129, 191, 191,
	191, 191, 191, 191, 191, 191, 191, 191, 191, 191,
	191, 191, 191, 191, 191, 191, 191, 191, 119, 119,
	119, 119, 119, 119, 119, 119, 119, 119, 119, 119,
	119, 119, 119, 119, 119, 119, 119, 119, 119, 119,
	119, 119, 119, 119, 119, 119, 119, 119, 119, 119,
	119, 119, 119, 119, 119, 119, 119, 119, 119, 119,
	119, 119, 119, 119, 119, 119, 119, 119, 119, 119,
	119, 119, 119, 119, 119, 119, 119, 119, 119, 119,
	119, 119, 119, 119, 119, 119, 119, 119, 119, 119,
	119, 119, 119, 119, 119, 119, 119, 119, 119, 119,
	119, 119, 119, 119, 119, 119, 119, 119, 119, 119,
	120, 120, 120, 120, 120, 120, 120, 120, 120, 120,
	120, 120, 120, 120, 120, 120, 120, 120, 120, 120,
	120, 120, 120, 120, 120, 120, 120, 120, 120, 120,
	120, 120, 120, 120, 120, 120, 120, 120, 120, 120,
	120, 120, 120, 120, 120, 120, 120, 120, 120, 120,
	120, 120, 120, 120, 120, 120, 120, 120, 120, 120,
	120, 120, 120, 120, 120, 120, 120, 120, 120, 120,
	120, 120, 120, 120, 120, 120, 120, 120, 120, 120,
	120, 120, 120, 120, 120, 120, 120, 120, 120, 120,
	120, 120, 120, 120, 120, 120, 120, 120, 192, 192,
	192, 197, 198, 133, 134, 134, 134,
}

var yyR2 = [...]int{
	0, 2, 0, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 4, 6, 7, 5, 10,
	1, 3, 1, 3, 8, 8, 6, 1, 1, 8,
	8, 7, 6, 1, 1, 1, 3, 0, 4, 3,
	3, 4, 4, 5, 4, 1, 3, 3, 2, 2,
	2, 2, 2, 1, 1, 1, 1, 1, 2, 8,
	4, 6, 5, 5, 5, 0, 2, 1, 0, 2,
	1, 3, 3, 4, 4, 1, 3, 3, 8, 1,
	3, 3, 1, 1, 1, 1, 1, 2, 1, 1,
	1, 1, 1, 1, 1, 1, 2, 2, 2, 2,
	2, 1, 2, 2, 2, 1, 4, 4, 2, 2,
	3, 3, 3, 3, 1, 1, 1, 1, 1, 6,
	6, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	3, 0, 3, 0, 5, 0, 3, 5, 0, 1,
	0, 1, 0, 1, 2, 0, 2, 2, 2, 2,
	2, 2, 0, 3, 0, 1, 0, 3, 3, 0,
	2, 2, 0, 2, 1, 2, 1, 0, 2, 5,
	4, 1, 2, 2, 3, 2, 0, 1, 2, 3,
	3, 2, 2, 1, 1, 1, 3, 2, 0, 1,
	3, 1, 2, 3, 1, 1, 1, 6, 7, 7,
	12, 7, 7, 7, 4, 5, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 7, 1, 3,
	8, 8, 5, 4, 6, 5, 4, 4, 3, 2,
	3, 4, 4, 4, 4, 4, 4, 4, 4, 3,
	3, 3, 3, 4, 4, 3, 4, 6, 4, 4,
	2, 4, 2, 2, 2, 2, 3, 1, 1, 0,
	1, 0, 1, 0, 2, 2, 0, 2, 2, 1,
	1, 0, 1, 1, 2, 1, 1, 2, 1, 1,
	2, 2, 2, 2, 2, 3, 4, 4, 7, 1,
	1, 1, 1, 1, 1, 2, 4, 1, 3, 0,
	2, 0, 2, 1, 2, 2, 0, 1, 1, 0,
	1, 0, 1, 0, 1, 1, 3, 1, 2, 3,
	5, 0, 1, 2, 1, 1, 1, 1, 1, 0,
	2, 1, 3, 1, 1, 1, 3, 3, 3, 7,
	1, 3, 1, 3, 4, 4, 4, 3, 2, 4,
	0, 1, 0, 2, 0, 1, 0, 1, 2, 1,
	1, 2, 2, 1, 2, 3, 2, 3, 2, 2,
	2, 1, 1, 3, 0, 5, 5, 5, 0, 2,
	1, 3, 3, 2, 3, 1, 2, 0, 3, 1,
	1, 3, 3, 4, 4, 5, 3, 4, 5, 6,
	2, 1, 2, 1, 2, 1, 2, 1, 1, 1,
	1, 1, 1, 1, 0, 2, 1, 1, 1, 3,
	1, 3, 1, 1, 1, 1, 1, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 2, 2, 2, 2, 2, 2, 1, 1,
	1, 1, 1, 1, 2, 3, 4, 5, 6, 4,
	4, 6, 6, 6, 6, 8, 8, 6, 8, 8,
	9, 7, 5, 4, 2, 2, 2, 2, 2, 2,
	2, 2, 0, 2, 4, 4, 4, 4, 0, 3,
	4, 7, 3, 1, 1, 2, 3, 3, 1, 2,
	2, 1, 2, 1, 2, 2, 1, 2, 4, 0,
	1, 0, 2, 1, 2, 4, 0, 2, 1, 3,
	5, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 2, 1, 1, 2, 1, 2, 2, 0,
	3, 0, 2, 0, 3, 1, 3, 2, 0, 1,
	1, 3, 3, 3, 3, 0, 2, 4, 4, 0,
	2, 4, 2, 1, 3, 5, 4, 6, 1, 3,
	3, 5, 0, 5, 1, 3, 1, 2, 3, 1,
	0, 2, 2, 1, 3, 3, 1, 3, 3, 3,
	3, 3, 3, 1, 2, 1, 1, 1, 1, 1,
	1, 0, 2, 0, 3, 0, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 0, 1, 1,
	1, 1, 0, 1, 1, 0, 2, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 0, 0, 1, 1,
}

var yyChk = [...]int{
	-1000, -195, -1, -2, -6, -7, -8, -9, -10, -11,
	-12, -13, -14, -15, -17, -18, -19, -21, -22, -23,
	-20, -24, -25, -26, -3, -4, 6, 7, -30, 9,
	10, 30, -16, 139, 140, 142, 141, 167, 143, 160,
	52, 179, 180, 182, 183, 25, 161, 162, 165, 166,
	184, 185, 186, -197, 8, 265, 56, -196, 281, -85,
	15, -29, 5, -27, -200, -27, -27, -27, -27, -27,
	-168, 56, -118, 148, 98, 175, 257, 145, 146, 152,
	-121, 60, -120, 273, 179, 193, 187, 213, 205, 203,
	206, 243, 71, 182, 253, 163, 202, 198, 196, 27,
	218, 278, 197, 158, 157, 219, 223, 244, 191, 192,
	247, 217, 159, 32, 275, 37, 171, 248, 221, 246,
	216, 212, 215, 190, 211, 41, 225, 224, 226, 242,
	208, 199, 18, 251, 166, 169, 220, 222, 153, 173,
	277, 249, 195, 170, 165, 252, 183, 245, 255, 40,
	230, 189, 156, 180, 177, 209, 172, 200, 201, 214,
	188, 210, 181, 174, 167, 254, 231, 279, 207, 204,
	178, 176, 235, 236, 237, 238, 276, 250, 232, -106,
	148, 150, 146, 146, 147, 148, 257, 145, 146, -54,
	-128, 64, 65, 63, 60, -120, 148, 175, 146, 134,
	206, 139, 233, 147, 32, 173, -137, -139, 146, 181,
	-108, 176, 235, 236, 237, 238, 60, 245, 244, 246,
	239, -128, 181, -133, -133, -133, -133, -133, 185, -128,
	60, -2, -89, 17, 16, -5, -3, -197, 6, 20,
	21, -33, 42, 43, -28, -39, 125, -40, -128, -59,
	100, -64, 29, 64, 63, 60, -120, 23, -78, -63,
	-60, -76, -77, 134, 135, 123, 124, 131, 101, -193,
	-194, -68, -66, -67, -69, -121, 62, 72, 66, 67,
	68, 69, 75, 61, 73, 76, 77, -74, -197, 59,
	46, 47, 266, 267, 268, 269, 272, 270, 103, 36,
	256, 264, 263, 262, 260, 261, 258, 259, 151, 257,
	129, 265, -106, -42, -43, -44, -45, -56, -77, -197,
	-54, 11, -49, -54, -97, -99, -138, -136, 181, -102,
	-121, 246, 245, 244, -122, -100, -119, 243, 206, 242,
	144, 99, 22, 24, 228, 102, 134, 16, 103, 133,
	266, 139, 50, 258, 259, 256, 268, 269, 257, 233,
	29, 10, 25, 161, 21, 127, 141, 106, 107, 164,
	23, 162, 77, 19, 53, 11, 13, 14, 151, 150,
	118, 147, 48, 8, 59, 26, 115, 44, 28, 46,
	116, 17, 260, 261, 31, 272, 168, 129, 51, 38,
	100, 75, 54, 98, 15, 49, 117, 142, 265, 47,
	145, 6, 271, 30, 160, 45, 146, 234, 105, 149,
	76, 5, 152, 9, 52, 55, 262, 263, 264, 36,
	104, 12, -169, -164, 60, 147, -54, 265, -121, -114,
	151, -114, -114, 146, -54, -54, -113, 151, 60, -113,
	-113, -113, -54, 136, -54, 60, 30, 257, 60, 173,
	146, 174, 148, -134, -197, -122, -121, -134, -134, -134,
	177, 178, 177, 178, -134, 247, -109, 240, 54, -134,
	-128, 11, 22, -197, 55, -198, 58, -90, 19, 31,
	-40, -128, -86, -87, -40, -85, -2, -27, 38, -31,
	21, 70, 11, -124, 99, 98, 115, -123, 22, -126,
	63, 64, 65, -121, 136, -40, -61, 118, 100, 116,
	117, 102, 120, 119, 130, 123, 124, 125, 126, 127,
	128, 129, 121, 122, 133, 108, 109, 110, 111, 112,
	113, 114, -107, -197, -77, -197, 137, 138, -187, 74,
	-64, 29, -64, -64, -64, -64, -64, -197, -2, -72,
	-40, -197, 63, -64, -197, -197, -197, -197, -197, -197,
	-197, -197, -81, -40, -197, -201, -197, -201, -201, -201,
	-201, -201, -201, -201, -197, -197, -197, -197, -55, 26,
	-54, 30, 57, -50, -52, -51, -53, 44, 48, 50,
	45, 46, 47, 51, -132, 22, -42, -197, -131, 169,
	-130, 22, -128, -54, -49, -199, 57, 11, 55, 57,
	57, -97, -99, 181, -98, -103, 247, 249, 149, 108,
	-127, -121, -192, 29, 63, 64, 65, 30, 58, 57,
	-142, -145, -147, -146, -148, -149, -143, -144, 203, 204,
	134, 207, 209, 210, 211, 212, 213, 214, 215, 216,
	217, 218, 30, 163, 200, 201, 202, 97, 219, 220,
	221, 222, 223, 224, 225, 226, 205, 187, 188, 189,
	190, 191, 192, 193, 195, 196, 197, 198, 199, 60,
	-134, 148, -185, 55, 60, 100, 60, -54, -54, -134,
	149, -54, 23, 54, -54, 60, 60, -129, -128, -119,
	-134, -134, -134, -134, -134, -134, -134, -134, -134, -134,
	-134, -134, 248, -111, 234, 241, -54, -189, -3, -7,
	-9, -8, 60, -192, -189, -141, -142, -190, -128, 9,
	118, 57, 18, 136, 57, -88, 24, 25, -89, -198,
	-33, -65, -121, 66, 69, -32, 45, -54, -40, -40,
	-70, 75, 100, 76, 77, -123, 125, -129, -122, -119,
	-64, -71, -74, -77, 74, 118, 116, 117, 102, -64,
	-64, -64, -64, -64, -64, -64, -64, -64, -64, -64,
	-64, -64, -64, -64, -135, 60, -192, 60, -63, 63,
	64, -63, 74, -38, 21, -37, -39, -198, 57, -198,
	-2, -191, 78, 79, 80, 81, 82, 83, 84, 85,
	97, 86, 87, 88, 89, 90, 91, 92, 93, 94,
	95, 96, -37, -37, -40, -40, -78, -121, -128, -78,
	-37, -31, -79, -80, 104, -78, -198, -37, -38, -37,
	-37, -93, 29, 169, -54, -96, -101, -78, -43, -44,
	-44, -43, -44, 44, 44, 44, 49, 44, 49, 44,
	-51, -128, -198, -57, 52, 150, 53, -197, -130, -93,
	55, -42, -54, -102, -64, -98, 57, 248, 250, 251,
	-64, 54, -40, -155, 133, -170, -171, -172, -122, -192,
	66, -164, -165, -173, 153, 156, 152, -166, 147, 28,
	-160, 75, 100, -156, 231, -150, 56, -150, -150, -150,
	-150, -154, 206, -154, -154, -154, 56, 56, -150, -150,
	-150, -158, 56, -158, -158, -159, 56, -159, -125, 55,
	-54, -183, 276, -184, 60, -134, 23, -134, -115, 144,
	141, 142, -180, 140, 228, 206, 71, 29, 15, 266,
	169, 279, 60, 170, -54, -54, -134, -110, 11, 118,
	57, -198, 57, 40, -40, -40, -129, -87, 33, 33,
	-90, -105, 19, 11, 36, 36, -37, 75, 76, 77,
	136, -197, -71, -64, -64, -64, -36, 164, 99, -198,
	-198, -37, 57, -40, -198, -198, -198, 57, 55, 22,
	57, 11, 136, 57, 11, -198, -37, -82, -80, 106,
	-40, -198, -198, -198, -198, -198, -62, 30, 36, -2,
	-197, 36, -197, -58, 57, 12, 108, -47, -46, 54,
	55, -48, 54, -46, 44, 44, 147, 147, 147, -94,
	-121, -58, -42, -58, -103, -104, 252, 249, 255, 60,
	-192, 57, -172, 108, 56, 28, -166, -166, 60, 60,
	-151, 29, 75, -157, 232, 66, -154, -154, -155, 30,
	-155, -155, -155, -163, -192, -163, 66, 66, 54, -121,
	-134, -182, -181, -122, -133, -186, 175, 154, 155, 158,
	157, 60, 147, 28, 153, 156, 169, 152, -186, 175,
	-116, -117, 149, 22, 147, 28, 169, -134, -112, 116,
	12, -128, -128, -142, 22, -128, 41, 136, 34, 35,
	34, 35, -54, -41, 11, 125, -122, -38, -36, 99,
	-64, -64, -198, -39, -140, 134, 203, 163, 202, 198,
	217, 208, 230, 200, 231, 204, -135, -140, -64, -64,
	-122, -64, -64, 273, -85, 107, -40, 105, -95, 54,
	-96, -73, -75, -74, -197, -2, -91, -126, -94, -85,
	-101, -40, -40, -40, 56, -40, -197, -197, -197, -198,
	57, -85, -58, 249, 253, 254, -171, -172, -175, -174,
	-121, 60, 60, -153, 54, -192, 66, 67, 75, 256,
	72, 58, -155, -155, 60, 134, 58, 57, 58, 57,
	58, 57, -54, 57, 108, -133, -121, -133, -121, -54,
	-133, -121, -192, -40, -189, -58, -42, -198, -64, -198,
	-150, -150, -150, -159, -150, 192, -150, 192, -197, -198,
	-198, -198, 57, 19, -198, 57, 19, -197, -35, 271,
	-40, -188, 280, 27, -95, 57, -198, -198, -198, 57,
	136, -198, -89, -92, -121, -92, -92, -92, -131, -121,
	-89, 58, 57, -150, -161, 228, 9, -154, -192, -154,
	66, 66, -134, -181, -172, 56, 26, -83, 13, -154,
	60, 66, -64, -64, -64, -64, -64, -198, -192, 125,
	-72, 28, -75, 36, -2, -197, -126, -126, 57, 58,
	-198, -198, -198, -57, -177, -176, 55, 159, 71, -174,
	-162, 153, 28, 152, 256, -155, -155, 58, 58, -92,
	-197, -84, 14, 16, -198, -198, -198, -198, -198, -34,
	118, 276, 9, -73, -2, 136, -121, -176, 60, -167,
	108, -192, -152, 71, 28, 28, 58, -178, -179, 169,
	-40, -72, -198, 274, 51, 277, -96, -198, -126, 66,
	-192, -185, -198, 57, -121, 41, 275, 278, -183, -179,
	36, 41, 171, 276, 172, 277, -197, 278, -64, 168,
	-198, -198,
}

var yyDef = [...]int{
	0, -2, 2, -2, 5, 6, 7, 8, 9, 10,
	11, 12, 13, 14, 15, 16, 17, 18, 19, 20,
	21, 22, 23, 24, 553, 0, 309, 309, 309, 309,
	309, 309, 0, 632, 615, 0, 0, 0, 0, -2,
	285, 286, 0, 288, 289, 863, 863, 863, 863, 863,
	0, 0, 0, 0, 37, 38, 861, 1, 3, 565,
	0, 0, 313, 316, 311, 0, 615, 0, 0, 0,
	68, 0, 0, 848, 0, 849, 613, 613, 613, 633,
	634, 637, 638, 760, 761, 762, 763, 764, 765, 766,
	767, 768, 769, 770, 771, 772, 773, 774, 775, 776,
	777, 778, 779, 780, 781, 782, 783, 784, 785, 786,
	787, 788, 789, 790, 791, 792, 793, 794, 795, 796,
	797, 798, 799, 800, 801, 802, 803, 804, 805, 806,
	807, 808, 809, 810, 811, 812, 813, 814, 815, 816,
	817, 818, 819, 820, 821, 822, 823, 824, 825, 826,
	827, 828, 829, 830, 831, 832, 833, 834, 835, 836,
	837, 838, 839, 840, 841, 842, 843, 844, 845, 846,
	847, 850, 851, 852, 853, 854, 855, 856, 857, 0,
	0, 616, 0, 611, 0, 611, 611, 611, 0, 239,
	382, 641, 642, 643, 644, 645, 848, 849, 0, 0,
	0, 0, 864, 864, 864, 864, 0, 0, 864, 0,
	271, 260, 262, 263, 264, 265, 864, 282, 283, 280,
	270, 284, 287, 290, 291, 292, 293, 294, 0, 0,
	305, 30, 569, 0, 0, 553, 32, 0, 309, 314,
	315, 319, 317, 318, 310, 0, 327, 331, 0, 390,
	0, 395, -2, -2, -2, -2, -2, 0, 432, 433,
	434, 435, 436, 0, 0, 0, 0, 0, 0, 458,
	459, 460, 461, 462, 463, 528, 533, 534, 535, 536,
	537, 538, 539, 540, 541, 399, 400, 589, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 519, 0,
	492, 492, 492, 492, 492, 492, 492, 492, 0, 0,
	0, 0, 0, 0, 341, 343, 344, 345, 364, 0,
	366, 0, 0, 45, 49, 50, 0, 64, 839, 596,
	639, -2, -2, -2, 0, 0, 640, -2, 767, -2,
	668, 669, 670, 671, 672, 673, 674, 675, 676, 677,
	678, 679, 680, 681, 682, 683, 684, 685, 686, 687,
	688, 689, 690, 691, 692, 693, 694, 695, 696, 697,
	698, 699, 700, 701, 702, 703, 704, 705, 706, 707,
	708, 709, 710, 711, 712, 713, 714, 715, 716, 717,
	718, 719, 720, 721, 722, 723, 724, 725, 726, 727,
	728, 729, 730, 731, 732, 733, 734, 735, 736, 737,
	738, 739, 740, 741, 742, 743, 744, 745, 746, 747,
	748, 749, 750, 751, 752, 753, 754, 755, 756, 757,
	758, 759, 0, 85, 0, 0, 864, 0, 75, 0,
	0, 0, 0, 0, 864, 0, 0, 0, 0, 0,
	0, 0, 238, 0, 240, 864, 864, 864, 864, 864,
	864, 864, 864, 249, 865, 866, 639, 250, 251, 252,
	864, 864, 864, 864, 255, 0, 0, 272, 0, 266,
	295, 0, 0, 0, 0, 31, 862, 25, 0, 0,
	566, 0, 554, 555, 558, 565, 30, 316, 0, 321,
	320, 312, 0, 328, 0, 0, 0, 332, 0, 338,
	334, 335, 336, 337, 0, 393, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 417, 418, 419, 420, 421,
	422, 423, 396, 0, 410, 0, 0, 0, 542, 544,
	452, 543, 453, 454, 455, 456, 457, 323, 30, 0,
	430, 0, -2, 0, 0, 0, 0, 0, 0, 0,
	0, 319, 0, 520, 0, 484, 0, 485, 486, 487,
	488, 489, 490, 491, 0, 323, 0, 0, 47, 0,
	381, 0, 0, 0, 0, 0, 0, 370, 0, 0,
	373, 0, 0, 0, 0, 365, 0, 0, 384, 812,
	367, 0, 369, -2, 0, 0, 0, 43, 44, 0,
	0, 51, 52, 0, 54, 55, 0, 0, 0, 0,
	169, 606, 607, 608, 858, 859, 860, 604, 198, 0,
	152, 148, 92, 93, 94, 95, 141, 98, 141, 141,
	141, 141, 166, 166, 166, 166, 124, 125, 126, 127,
	128, 0, 0, 111, 141, 141, 141, 115, 131, 132,
	133, 134, 135, 136, 137, 138, 96, 99, 100, 101,
	102, 103, 104, 105, 143, 143, 143, 145, 145, 635,
	70, 0, 78, 0, 864, 0, 864, 83, 0, 214,
	0, 233, 612, 0, 864, 236, 237, 383, 646, 647,
	241, 242, 243, 244, 245, 246, 247, 248, 253, 258,
	254, 259, 256, 273, 267, 268, 261, 296, 299, 300,
	301, 302, 303, 304, 297, 0, 89, 306, 307, 570,
	0, 0, 0, 0, 0, 557, 559, 560, 569, 33,
	319, 0, 546, 0, 0, 0, 322, 28, 391, 392,
	394, 411, 0, 413, 415, 333, 329, 0, 529, -2,
	401, 402, 426, 427, 428, 0, 0, 0, 0, 424,
	406, 0, 437, 438, 439, 440, 441, 442, 443, 444,
	445, 446, 447, 448, 451, 503, 504, 0, 449, 531,
	532, 450, 545, 0, 0, 324, 325, 429, 0, 588,
	30, 465, 648, 649, 650, 651, 652, 653, 654, 655,
	656, 657, 658, 659, 660, 661, 662, 663, 664, 665,
	666, 667, 0, 0, 0, 0, 0, 528, 0, 0,
	0, 0, 526, 523, 0, 0, 493, 0, 0, 0,
	0, 0, 0, 0, 380, 388, 593, 0, 342, 360,
	362, 0, 357, 371, 372, 374, 0, 376, 0, 378,
	379, 346, 347, 348, 0, 0, 0, 0, 368, 388,
	0, 388, 46, 597, 599, 53, 0, 0, 58, 59,
	598, 600, 601, 602, 0, 84, 199, 201, 204, 205,
	206, 86, 87, 0, 0, 0, 0, 0, 193, 194,
	155, 153, 0, 150, 149, 97, 0, 166, 166, 118,
	119, 169, 0, 169, 169, 169, 0, 0, 112, 113,
	114, 106, 0, 107, 108, 109, 0, 110, 0, 0,
	864, 72, 0, 76, 77, 73, 614, 74, 863, 0,
	0, 627, 215, 617, 618, 619, 620, 621, 622, 623,
	624, 625, 626, 0, 232, 864, 235, 276, 0, 0,
	0, 0, 0, 0, 567, 568, 0, 556, 0, 0,
	26, 0, 609, 610, 547, 548, 339, 412, 414, 416,
	0, 323, 403, 424, 407, 0, 404, 0, 0, 398,
	466, 0, 0, 431, -2, 469, 470, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 553, 0, 524, 0,
	0, 483, 494, 495, 496, 497, 582, 0, 0, -2,
	0, 36, 0, 553, 0, 0, 0, 354, 361, 0,
	0, 355, 0, 356, 375, 377, 0, 0, 0, 0,
	352, 553, 388, 42, 56, 57, 0, 0, 63, 170,
	171, 0, 202, 0, 0, 188, 0, 0, 191, 192,
	162, 0, 154, 91, 151, 0, 169, 169, 120, 0,
	121, 122, 123, 0, 139, 0, 0, 0, 0, 636,
	71, 79, 80, 0, 207, 863, 0, 216, 217, 218,
	219, 220, 221, 222, 223, 224, 225, 226, 863, 0,
	0, 863, 628, 629, 630, 631, 0, 234, 257, 0,
	0, 274, 275, 90, 0, 308, 571, 0, 563, 564,
	561, 562, 27, 388, 0, 330, 530, 0, 405, 0,
	425, 408, 467, 326, 0, 141, 141, 508, 141, 145,
	511, 141, 513, 141, 516, 0, 0, 0, 0, 0,
	529, 0, 0, 0, 521, 482, 527, 0, 590, 0,
	582, 572, 584, 586, 0, 30, 0, 578, 0, 565,
	594, 389, 595, 358, 0, 363, 0, 0, 0, 366,
	0, 565, 41, 60, 61, 62, 200, 203, 0, 195,
	141, 189, 190, 164, 0, 156, 157, 158, 159, 160,
	161, 142, 116, 117, 167, 168, 166, 0, 166, 0,
	146, 0, 864, 0, 0, 208, 0, 209, 211, 212,
	213, 0, 277, 278, 298, 549, 340, 468, 409, 471,
	505, 166, 509, 510, 512, 514, 515, 517, 0, 473,
	472, 474, 0, 0, 477, 0, 0, 0, 0, 0,
	525, 34, 0, 0, 35, 0, 587, -2, 0, 0,
	0, 48, 39, 0, 350, 0, 0, 0, 384, 353,
	40, 180, 0, 197, 172, 165, 0, 169, 140, 169,
	0, 0, 69, 81, 82, 0, 0, 551, 0, 506,
	507, 0, 0, 0, 0, 0, 498, 481, 522, 591,
	592, 0, 585, 0, -2, 0, 580, 579, 0, 359,
	385, 386, 387, 349, 179, 181, 0, 186, 0, 196,
	177, 0, 174, 176, 163, 129, 130, 144, 147, 0,
	0, 29, 0, 0, 518, 475, 476, 478, 479, 0,
	0, 0, 0, 575, 30, 0, 351, 182, 183, 0,
	187, 185, 88, 0, 173, 175, 75, 0, 228, 0,
	552, 550, 480, 0, 0, 0, 583, -2, 581, 184,
	178, 78, 227, 0, 0, 499, 0, 502, 210, 229,
	0, 500, 0, 0, 0, 0, 0, 501, 0, 0,
	230, 231,
}

var yyTok1 = [...]int{
	1, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 101, 3, 3, 3, 128, 120, 3,
	56, 58, 125, 123, 57, 124, 136, 126, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 281,
	109, 108, 110, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 130, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 119, 3, 131,
}

var yyTok2 = [...]int{
	2, 3, 4, 5, 6, 7, 8, 9, 10, 11,
	12, 13, 14, 15, 16, 17, 18, 19, 20, 21,
	22, 23, 24, 25, 26, 27, 28, 29, 30, 31,
	32, 33, 34, 35, 36, 37, 38, 39, 40, 41,
	42, 43, 44, 45, 46, 47, 48, 49, 50, 51,
	52, 53, 54, 55, 59, 60, 61, 62, 63, 64,
	65, 66, 67, 68, 69, 70, 71, 72, 73, 74,
	75, 76, 77, 78, 79, 80, 81, 82, 83, 84,
	85, 86, 87, 88, 89, 90, 91, 92, 93, 94,
	95, 96, 97, 98, 99, 100, 102, 103, 104, 105,
	106, 107, 111, 112, 113, 114, 115, 116, 117, 118,
	121, 122, 127, 129, 132, 133, 134, 135, 137, 138,
	139, 140, 141, 142, 143, 144, 145, 146, 147, 148,
	149, 150, 151, 152, 153, 154, 155, 156, 157, 158,
	159, 160, 161, 162, 163, 164, 165, 166, 167, 168,
	169, 170, 171, 172, 173, 174, 175, 176, 177, 178,
	179, 180, 181, 182, 183, 184, 185, 186, 187, 188,
	189, 190, 191, 192, 193, 194, 195, 196, 197, 198,
	199, 200, 201, 202, 203, 204, 205, 206, 207, 208,
	209, 210, 211, 212, 213, 214, 215, 216, 217, 218,
	219, 220, 221, 222, 223, 224, 225, 226, 227, 228,
	229, 230, 231, 232, 233, 234, 235, 236, 237, 238,
	239, 240, 241, 242, 243, 244, 245, 246, 247, 248,
	249, 250, 251, 252, 253, 254, 255, 256, 257, 258,
	259, 260, 261, 262, 263, 264, 265, 266, 267, 268,
	269, 270, 271, 272, 273, 274,
}

var yyTok3 = [...]int{
	57600, 275, 57601, 276, 57602, 277, 57603, 278, 57604, 279,
	57605, 280, 0,
}

var yyErrorMessages = [...]struct {
	state int
	token int
	msg   string
}{}

//line yaccpar:1

/*	parser for yacc output	*/

var (
	yyDebug        = 0
	yyErrorVerbose = false
)

type yyLexer interface {
	Lex(lval *yySymType) int
	Error(s string)
}

type yyParser interface {
	Parse(yyLexer) int
	Lookahead() int
}

type yyParserImpl struct {
	lval  yySymType
	stack [yyInitialStackSize]yySymType
	char  int
}

func (p *yyParserImpl) Lookahead() int {
	return p.char
}

func yyNewParser() yyParser {
	return &yyParserImpl{}
}

const yyFlag = -1000

func yyTokname(c int) string {
	if c >= 1 && c-1 < len(yyToknames) {
		if yyToknames[c-1] != "" {
			return yyToknames[c-1]
		}
	}
	return __yyfmt__.Sprintf("tok-%v", c)
}

func yyStatname(s int) string {
	if s >= 0 && s < len(yyStatenames) {
		if yyStatenames[s] != "" {
			return yyStatenames[s]
		}
	}
	return __yyfmt__.Sprintf("state-%v", s)
}

func yyErrorMessage(state, lookAhead int) string {
	const TOKSTART = 4

	if !yyErrorVerbose {
		return "syntax error"
	}

	for _, e := range yyErrorMessages {
		if e.state == state && e.token == lookAhead {
			return "syntax error: " + e.msg
		}
	}

	res := "syntax error: unexpected " + yyTokname(lookAhead)

	// To match Bison, suggest at most four expected tokens.
	expected := make([]int, 0, 4)

	// Look for shiftable tokens.
	base := yyPact[state]
	for tok := TOKSTART; tok-1 < len(yyToknames); tok++ {
		if n := base + tok; n >= 0 && n < yyLast && yyChk[yyAct[n]] == tok {
			if len(expected) == cap(expected) {
				return res
			}
			expected = append(expected, tok)
		}
	}

	if yyDef[state] == -2 {
		i := 0
		for yyExca[i] != -1 || yyExca[i+1] != state {
			i += 2
		}

		// Look for tokens that we accept or reduce.
		for i += 2; yyExca[i] >= 0; i += 2 {
			tok := yyExca[i]
			if tok < TOKSTART || yyExca[i+1] == 0 {
				continue
			}
			if len(expected) == cap(expected) {
				return res
			}
			expected = append(expected, tok)
		}

		// If the default action is to accept or reduce, give up.
		if yyExca[i+1] != 0 {
			return res
		}
	}

	for i, tok := range expected {
		if i == 0 {
			res += ", expecting "
		} else {
			res += " or "
		}
		res += yyTokname(tok)
	}
	return res
}

func yylex1(lex yyLexer, lval *yySymType) (char, token int) {
	token = 0
	char = lex.Lex(lval)
	if char <= 0 {
		token = yyTok1[0]
		goto out
	}
	if char < len(yyTok1) {
		token = yyTok1[char]
		goto out
	}
	if char >= yyPrivate {
		if char < yyPrivate+len(yyTok2) {
			token = yyTok2[char-yyPrivate]
			goto out
		}
	}
	for i := 0; i < len(yyTok3); i += 2 {
		token = yyTok3[i+0]
		if token == char {
			token = yyTok3[i+1]
			goto out
		}
	}

out:
	if token == 0 {
		token = yyTok2[1] /* unknown char */
	}
	if yyDebug >= 3 {
		__yyfmt__.Printf("lex %s(%d)\n", yyTokname(token), uint(char))
	}
	return char, token
}

func yyParse(yylex yyLexer) int {
	return yyNewParser().Parse(yylex)
}

func (yyrcvr *yyParserImpl) Parse(yylex yyLexer) int {
	var yyn int
	var yyVAL yySymType
	var yyDollar []yySymType
	_ = yyDollar // silence set and not used
	yyS := yyrcvr.stack[:]

	Nerrs := 0   /* number of errors */
	Errflag := 0 /* error recovery flag */
	yystate := 0
	yyrcvr.char = -1
	yytoken := -1 // yyrcvr.char translated into internal numbering
	defer func() {
		// Make sure we report no lookahead when not parsing.
		yystate = -1
		yyrcvr.char = -1
		yytoken = -1
	}()
	yyp := -1
	goto yystack

ret0:
	return 0

ret1:
	return 1

yystack:
	/* put a state and value onto the stack */
	if yyDebug >= 4 {
		__yyfmt__.Printf("char %v in %v\n", yyTokname(yytoken), yyStatname(yystate))
	}

	yyp++
	if yyp >= len(yyS) {
		nyys := make([]yySymType, len(yyS)*2)
		copy(nyys, yyS)
		yyS = nyys
	}
	yyS[yyp] = yyVAL
	yyS[yyp].yys = yystate

yynewstate:
	yyn = yyPact[yystate]
	if yyn <= yyFlag {
		goto yydefault /* simple state */
	}
	if yyrcvr.char < 0 {
		yyrcvr.char, yytoken = yylex1(yylex, &yyrcvr.lval)
	}
	yyn += yytoken
	if yyn < 0 || yyn >= yyLast {
		goto yydefault
	}
	yyn = yyAct[yyn]
	if yyChk[yyn] == yytoken { /* valid shift */
		yyrcvr.char = -1
		yytoken = -1
		yyVAL = yyrcvr.lval
		yystate = yyn
		if Errflag > 0 {
			Errflag--
		}
		goto yystack
	}

yydefault:
	/* default state action */
	yyn = yyDef[yystate]
	if yyn == -2 {
		if yyrcvr.char < 0 {
			yyrcvr.char, yytoken = yylex1(yylex, &yyrcvr.lval)
		}

		/* look through exception table */
		xi := 0
		for {
			if yyExca[xi+0] == -1 && yyExca[xi+1] == yystate {
				break
			}
			xi += 2
		}
		for xi += 2; ; xi += 2 {
			yyn = yyExca[xi+0]
			if yyn < 0 || yyn == yytoken {
				break
			}
		}
		yyn = yyExca[xi+1]
		if yyn < 0 {
			goto ret0
		}
	}
	if yyn == 0 {
		/* error ... attempt to resume parsing */
		switch Errflag {
		case 0: /* brand new error */
			yylex.Error(yyErrorMessage(yystate, yytoken))
			Nerrs++
			if yyDebug >= 1 {
				__yyfmt__.Printf("%s", yyStatname(yystate))
				__yyfmt__.Printf(" saw %s\n", yyTokname(yytoken))
			}
			fallthrough

		case 1, 2: /* incompletely recovered error ... try again */
			Errflag = 3

			/* find a state where "error" is a legal shift action */
			for yyp >= 0 {
				yyn = yyPact[yyS[yyp].yys] + yyErrCode
				if yyn >= 0 && yyn < yyLast {
					yystate = yyAct[yyn] /* simulate a shift of "error" */
					if yyChk[yystate] == yyErrCode {
						goto yystack
					}
				}

				/* the current p has no shift on "error", pop stack */
				if yyDebug >= 2 {
					__yyfmt__.Printf("error recovery pops state %d\n", yyS[yyp].yys)
				}
				yyp--
			}
			/* there is no state on the stack with an error shift ... abort */
			goto ret1

		case 3: /* no shift yet; clobber input char */
			if yyDebug >= 2 {
				__yyfmt__.Printf("error recovery discards %s\n", yyTokname(yytoken))
			}
			if yytoken == yyEofCode {
				goto ret1
			}
			yyrcvr.char = -1
			yytoken = -1
			goto yynewstate /* try again in the same state */
		}
	}

	/* reduction by production yyn */
	if yyDebug >= 2 {
		__yyfmt__.Printf("reduce %v in:\n\t%v\n", yyn, yyStatname(yystate))
	}

	yynt := yyn
	yypt := yyp
	_ = yypt // guard against "declared and not used"

	yyp -= yyR2[yyn]
	// yyp is now the index of $0. Perform the default action. Iff the
	// reduced production is ε, $1 is possibly out of range.
	if yyp+1 >= len(yyS) {
		nyys := make([]yySymType, len(yyS)*2)
		copy(nyys, yyS)
		yyS = nyys
	}
	yyVAL = yyS[yyp+1]

	/* consult goto table to find next state */
	yyn = yyR1[yyn]
	yyg := yyPgo[yyn]
	yyj := yyg + yyS[yyp].yys + 1

	if yyj >= yyLast {
		yystate = yyAct[yyg]
	} else {
		yystate = yyAct[yyj]
		if yyChk[yystate] != -yyn {
			yystate = yyAct[yyg]
		}
	}
	// dummy call; replaced with literal code
	switch yynt {

	case 1:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:326
		{
			setParseTree(yylex, yyDollar[1].statement)
		}
	case 2:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:331
		{
		}
	case 3:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:332
		{
		}
	case 4:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:336
		{
			yyVAL.statement = yyDollar[1].selStmt
		}
	case 25:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:362
		{
			sel := yyDollar[1].selStmt.(*Select)
			sel.OrderBy = yyDollar[2].orderBy
			sel.Limit = yyDollar[3].limit
			sel.Lock = yyDollar[4].str
			yyVAL.selStmt = sel
		}
	case 26:
		yyDollar = yyS[yypt-6 : yypt+1]
//line sql.y:370
		{
			yyVAL.selStmt = &Union{Type: yyDollar[2].str, Left: yyDollar[1].selStmt, Right: yyDollar[3].selStmt, OrderBy: yyDollar[4].orderBy, Limit: yyDollar[5].limit, Lock: yyDollar[6].str}
		}
	case 27:
		yyDollar = yyS[yypt-7 : yypt+1]
//line sql.y:374
		{
			yyVAL.selStmt = &Select{Comments: Comments(yyDollar[2].bytes2), Cache: yyDollar[3].str, SelectExprs: SelectExprs{Nextval{Expr: yyDollar[5].expr}}, From: TableExprs{&AliasedTableExpr{Expr: yyDollar[7].tableName}}}
		}
	case 28:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:380
		{
			yyVAL.statement = &Stream{Comments: Comments(yyDollar[2].bytes2), SelectExpr: yyDollar[3].selectExpr, Table: yyDollar[5].tableName}
		}
	case 29:
		yyDollar = yyS[yypt-10 : yypt+1]
//line sql.y:387
		{
			yyVAL.selStmt = &Select{Comments: Comments(yyDollar[2].bytes2), Cache: yyDollar[3].str, Distinct: yyDollar[4].str, Hints: yyDollar[5].str, SelectExprs: yyDollar[6].selectExprs, From: yyDollar[7].tableExprs, Where: NewWhere(WhereStr, yyDollar[8].expr), GroupBy: GroupBy(yyDollar[9].exprs), Having: NewWhere(HavingStr, yyDollar[10].expr)}
		}
	case 30:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:393
		{
			yyVAL.selStmt = yyDollar[1].selStmt
		}
	case 31:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:397
		{
			yyVAL.selStmt = &ParenSelect{Select: yyDollar[2].selStmt}
		}
	case 32:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:403
		{
			yyVAL.selStmt = yyDollar[1].selStmt
		}
	case 33:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:407
		{
			yyVAL.selStmt = &ParenSelect{Select: yyDollar[2].selStmt}
		}
	case 34:
		yyDollar = yyS[yypt-8 : yypt+1]
//line sql.y:414
		{
			// insert_data returns a *Insert pre-filled with Columns & Values
			ins := yyDollar[6].ins
			ins.Action = yyDollar[1].str
			ins.Comments = yyDollar[2].bytes2
			ins.Ignore = yyDollar[3].str
			ins.Table = yyDollar[4].tableName
			ins.Partitions = yyDollar[5].partitions
			ins.OnDup = OnDup(yyDollar[7].updateExprs)
			ins.Returning = yyDollar[8].returning
			yyVAL.statement = ins
		}
	case 35:
		yyDollar = yyS[yypt-8 : yypt+1]
//line sql.y:427
		{
			cols := make(Columns, 0, len(yyDollar[7].updateExprs))
			vals := make(ValTuple, 0, len(yyDollar[8].updateExprs))
			for _, updateList := range yyDollar[7].updateExprs {
				cols = append(cols, updateList.Name.Name)
				vals = append(vals, updateList.Expr)
			}
			yyVAL.statement = &Insert{Action: yyDollar[1].str, Comments: Comments(yyDollar[2].bytes2), Ignore: yyDollar[3].str, Table: yyDollar[4].tableName, Partitions: yyDollar[5].partitions, Columns: cols, Rows: Values{vals}, OnDup: OnDup(yyDollar[8].updateExprs)}
		}
	case 36:
		yyDollar = yyS[yypt-6 : yypt+1]
//line sql.y:437
		{
			yyVAL.statement = &Insert{Action: yyDollar[1].str, Comments: Comments(yyDollar[2].bytes2), Ignore: yyDollar[3].str, Table: yyDollar[4].tableName, Default: true}
		}
	case 37:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:443
		{
			yyVAL.str = InsertStr
		}
	case 38:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:447
		{
			yyVAL.str = ReplaceStr
		}
	case 39:
		yyDollar = yyS[yypt-8 : yypt+1]
//line sql.y:453
		{
			yyVAL.statement = &Update{Comments: Comments(yyDollar[2].bytes2), TableExprs: yyDollar[3].tableExprs, Exprs: yyDollar[5].updateExprs, Where: NewWhere(WhereStr, yyDollar[6].expr), OrderBy: yyDollar[7].orderBy, Limit: yyDollar[8].limit}
		}
	case 40:
		yyDollar = yyS[yypt-8 : yypt+1]
//line sql.y:459
		{
			yyVAL.statement = &Delete{Comments: Comments(yyDollar[2].bytes2), TableExprs: TableExprs{&AliasedTableExpr{Expr: yyDollar[4].tableName}}, Partitions: yyDollar[5].partitions, Where: NewWhere(WhereStr, yyDollar[6].expr), OrderBy: yyDollar[7].orderBy, Limit: yyDollar[8].limit}
		}
	case 41:
		yyDollar = yyS[yypt-7 : yypt+1]
//line sql.y:463
		{
			yyVAL.statement = &Delete{Comments: Comments(yyDollar[2].bytes2), Targets: yyDollar[4].tableNames, TableExprs: yyDollar[6].tableExprs, Where: NewWhere(WhereStr, yyDollar[7].expr)}
		}
	case 42:
		yyDollar = yyS[yypt-6 : yypt+1]
//line sql.y:467
		{
			yyVAL.statement = &Delete{Comments: Comments(yyDollar[2].bytes2), Targets: yyDollar[3].tableNames, TableExprs: yyDollar[5].tableExprs, Where: NewWhere(WhereStr, yyDollar[6].expr)}
		}
	case 43:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:472
		{
		}
	case 44:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:473
		{
		}
	case 45:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:477
		{
			yyVAL.tableNames = TableNames{yyDollar[1].tableName}
		}
	case 46:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:481
		{
			yyVAL.tableNames = append(yyVAL.tableNames, yyDollar[3].tableName)
		}
	case 47:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:486
		{
			yyVAL.partitions = nil
		}
	case 48:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:490
		{
			yyVAL.partitions = yyDollar[3].partitions
		}
	case 49:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:496
		{
			yyVAL.statement = &Set{Comments: Comments(yyDollar[2].bytes2), Exprs: yyDollar[3].setExprs}
		}
	case 50:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:500
		{
			yyVAL.statement = &Set{Comments: Comments(yyDollar[2].bytes2), Exprs: yyDollar[3].setExprs}
		}
	case 51:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:504
		{
			yyVAL.statement = &Set{Comments: Comments(yyDollar[2].bytes2), Scope: yyDollar[3].str, Exprs: yyDollar[4].setExprs}
		}
	case 52:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:508
		{
			yyVAL.statement = &Set{Comments: Comments(yyDollar[2].bytes2), Scope: yyDollar[3].str, Exprs: yyDollar[4].setExprs}
		}
	case 53:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:512
		{
			yyVAL.statement = &Set{Comments: Comments(yyDollar[2].bytes2), Scope: yyDollar[3].str, Exprs: yyDollar[5].setExprs}
		}
	case 54:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:516
		{
			yyVAL.statement = &Set{Comments: Comments(yyDollar[2].bytes2), Exprs: yyDollar[4].setExprs}
		}
	case 55:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:522
		{
			yyVAL.setExprs = SetExprs{yyDollar[1].setExpr}
		}
	case 56:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:526
		{
			yyVAL.setExprs = append(yyVAL.setExprs, yyDollar[3].setExpr)
		}
	case 57:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:532
		{
			yyVAL.setExpr = yyDollar[3].setExpr
		}
	case 58:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:536
		{
			yyVAL.setExpr = &SetExpr{Name: NewColIdent("tx_read_only"), Expr: NewIntVal([]byte("0"))}
		}
	case 59:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:540
		{
			yyVAL.setExpr = &SetExpr{Name: NewColIdent("tx_read_only"), Expr: NewIntVal([]byte("1"))}
		}
	case 60:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:546
		{
			yyVAL.setExpr = &SetExpr{Name: NewColIdent("tx_isolation"), Expr: NewStrVal([]byte("repeatable read"))}
		}
	case 61:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:550
		{
			yyVAL.setExpr = &SetExpr{Name: NewColIdent("tx_isolation"), Expr: NewStrVal([]byte("read committed"))}
		}
	case 62:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:554
		{
			yyVAL.setExpr = &SetExpr{Name: NewColIdent("tx_isolation"), Expr: NewStrVal([]byte("read uncommitted"))}
		}
	case 63:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:558
		{
			yyVAL.setExpr = &SetExpr{Name: NewColIdent("tx_isolation"), Expr: NewStrVal([]byte("serializable"))}
		}
	case 65:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:567
		{
			yyVAL.str = LocalStr
		}
	case 66:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:574
		{
			yyVAL.str = SessionStr
		}
	case 67:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:578
		{
			yyVAL.str = GlobalStr
		}
	case 68:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:584
		{
			yyDollar[1].ddl.TableSpec = yyDollar[2].TableSpec
			yyVAL.statement = yyDollar[1].ddl
		}
	case 69:
		yyDollar = yyS[yypt-8 : yypt+1]
//line sql.y:589
		{
			// Change this to an alter statement
			yyVAL.statement = &DDL{Action: AlterStr, Table: yyDollar[7].tableName, NewName: yyDollar[7].tableName}
		}
	case 70:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:594
		{
			yyVAL.statement = &DDL{Action: CreateStr, NewName: yyDollar[3].tableName.ToViewName()}
		}
	case 71:
		yyDollar = yyS[yypt-6 : yypt+1]
//line sql.y:598
		{
			yyVAL.statement = &DDL{Action: CreateStr, NewName: yyDollar[5].tableName.ToViewName()}
		}
	case 72:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:602
		{
			yyVAL.statement = &DDL{Action: CreateVindexStr, VindexSpec: &VindexSpec{
				Name:   yyDollar[3].colIdent,
				Type:   yyDollar[4].colIdent,
				Params: yyDollar[5].vindexParams,
			}}
		}
	case 73:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:610
		{
			yyVAL.statement = &DBDDL{Action: CreateStr, DBName: string(yyDollar[4].bytes)}
		}
	case 74:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:614
		{
			yyVAL.statement = &DBDDL{Action: CreateStr, DBName: string(yyDollar[4].bytes)}
		}
	case 75:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:619
		{
			yyVAL.colIdent = NewColIdent("")
		}
	case 76:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:623
		{
			yyVAL.colIdent = yyDollar[2].colIdent
		}
	case 77:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:629
		{
			yyVAL.colIdent = NewColIdent(string(yyDollar[1].bytes))
		}
	case 78:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:634
		{
			var v []VindexParam
			yyVAL.vindexParams = v
		}
	case 79:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:639
		{
			yyVAL.vindexParams = yyDollar[2].vindexParams
		}
	case 80:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:645
		{
			yyVAL.vindexParams = make([]VindexParam, 0, 4)
			yyVAL.vindexParams = append(yyVAL.vindexParams, yyDollar[1].vindexParam)
		}
	case 81:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:650
		{
			yyVAL.vindexParams = append(yyVAL.vindexParams, yyDollar[3].vindexParam)
		}
	case 82:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:656
		{
			yyVAL.vindexParam = VindexParam{Key: yyDollar[1].colIdent, Val: yyDollar[3].str}
		}
	case 83:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:662
		{
			yyVAL.ddl = &DDL{Action: CreateStr, NewName: yyDollar[4].tableName}
			setDDL(yylex, yyVAL.ddl)
		}
	case 84:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:669
		{
			yyVAL.TableSpec = yyDollar[2].TableSpec
			yyVAL.TableSpec.Options = yyDollar[4].str
		}
	case 85:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:676
		{
			yyVAL.TableSpec = &TableSpec{}
			yyVAL.TableSpec.AddColumn(yyDollar[1].columnDefinition)
		}
	case 86:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:681
		{
			yyVAL.TableSpec.AddColumn(yyDollar[3].columnDefinition)
		}
	case 87:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:685
		{
			yyVAL.TableSpec.AddIndex(yyDollar[3].indexDefinition)
		}
	case 88:
		yyDollar = yyS[yypt-8 : yypt+1]
//line sql.y:691
		{
			yyDollar[2].columnType.NotNull = yyDollar[3].boolVal
			yyDollar[2].columnType.Default = yyDollar[4].optVal
			yyDollar[2].columnType.OnUpdate = yyDollar[5].optVal
			yyDollar[2].columnType.Autoincrement = yyDollar[6].boolVal
			yyDollar[2].columnType.KeyOpt = yyDollar[7].colKeyOpt
			yyDollar[2].columnType.Comment = yyDollar[8].optVal
			yyVAL.columnDefinition = &ColumnDefinition{Name: NewColIdent(string(yyDollar[1].bytes)), Type: yyDollar[2].columnType}
		}
	case 89:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:703
		{
			yyVAL.columnTypes = ColumnTypes{yyDollar[1].columnType}
		}
	case 90:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:707
		{
			yyVAL.columnTypes = append(yyDollar[1].columnTypes, yyDollar[3].columnType)
		}
	case 91:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:713
		{
			yyVAL.columnType = yyDollar[1].columnType
			yyVAL.columnType.Unsigned = yyDollar[2].boolVal
			yyVAL.columnType.Zerofill = yyDollar[3].boolVal
		}
	case 96:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:725
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 97:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:732
		{
			yyVAL.columnType = yyDollar[1].columnType
			yyVAL.columnType.Length = yyDollar[2].optVal
		}
	case 98:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:737
		{
			yyVAL.columnType = yyDollar[1].columnType
		}
	case 99:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:743
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 100:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:747
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 101:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:751
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 102:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:755
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 103:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:759
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 104:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:763
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 105:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:767
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 106:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:773
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
			yyVAL.columnType.Length = yyDollar[2].LengthScaleOption.Length
			yyVAL.columnType.Scale = yyDollar[2].LengthScaleOption.Scale
		}
	case 107:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:779
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
			yyVAL.columnType.Length = yyDollar[2].LengthScaleOption.Length
			yyVAL.columnType.Scale = yyDollar[2].LengthScaleOption.Scale
		}
	case 108:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:785
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
			yyVAL.columnType.Length = yyDollar[2].LengthScaleOption.Length
			yyVAL.columnType.Scale = yyDollar[2].LengthScaleOption.Scale
		}
	case 109:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:791
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
			yyVAL.columnType.Length = yyDollar[2].LengthScaleOption.Length
			yyVAL.columnType.Scale = yyDollar[2].LengthScaleOption.Scale
		}
	case 110:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:797
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
			yyVAL.columnType.Length = yyDollar[2].LengthScaleOption.Length
			yyVAL.columnType.Scale = yyDollar[2].LengthScaleOption.Scale
		}
	case 111:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:805
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 112:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:809
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal}
		}
	case 113:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:813
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal}
		}
	case 114:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:817
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal}
		}
	case 115:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:821
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 116:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:827
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal, Charset: yyDollar[3].str, Collate: yyDollar[4].str}
		}
	case 117:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:831
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal, Charset: yyDollar[3].str, Collate: yyDollar[4].str}
		}
	case 118:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:835
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal}
		}
	case 119:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:839
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal}
		}
	case 120:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:843
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Charset: yyDollar[2].str, Collate: yyDollar[3].str}
		}
	case 121:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:847
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Charset: yyDollar[2].str, Collate: yyDollar[3].str}
		}
	case 122:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:851
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Charset: yyDollar[2].str, Collate: yyDollar[3].str}
		}
	case 123:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:855
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Charset: yyDollar[2].str, Collate: yyDollar[3].str}
		}
	case 124:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:859
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 125:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:863
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 126:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:867
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 127:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:871
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 128:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:875
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 129:
		yyDollar = yyS[yypt-6 : yypt+1]
//line sql.y:879
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), EnumValues: yyDollar[3].strs, Charset: yyDollar[5].str, Collate: yyDollar[6].str}
		}
	case 130:
		yyDollar = yyS[yypt-6 : yypt+1]
//line sql.y:884
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), EnumValues: yyDollar[3].strs, Charset: yyDollar[5].str, Collate: yyDollar[6].str}
		}
	case 131:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:890
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 132:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:894
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 133:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:898
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 134:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:902
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 135:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:906
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 136:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:910
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 137:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:914
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 138:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:918
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 139:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:924
		{
			yyVAL.strs = make([]string, 0, 4)
			yyVAL.strs = append(yyVAL.strs, "'"+string(yyDollar[1].bytes)+"'")
		}
	case 140:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:929
		{
			yyVAL.strs = append(yyDollar[1].strs, "'"+string(yyDollar[3].bytes)+"'")
		}
	case 141:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:934
		{
			yyVAL.optVal = nil
		}
	case 142:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:938
		{
			yyVAL.optVal = NewIntVal(yyDollar[2].bytes)
		}
	case 143:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:943
		{
			yyVAL.LengthScaleOption = LengthScaleOption{}
		}
	case 144:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:947
		{
			yyVAL.LengthScaleOption = LengthScaleOption{
				Length: NewIntVal(yyDollar[2].bytes),
				Scale:  NewIntVal(yyDollar[4].bytes),
			}
		}
	case 145:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:955
		{
			yyVAL.LengthScaleOption = LengthScaleOption{}
		}
	case 146:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:959
		{
			yyVAL.LengthScaleOption = LengthScaleOption{
				Length: NewIntVal(yyDollar[2].bytes),
			}
		}
	case 147:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:965
		{
			yyVAL.LengthScaleOption = LengthScaleOption{
				Length: NewIntVal(yyDollar[2].bytes),
				Scale:  NewIntVal(yyDollar[4].bytes),
			}
		}
	case 148:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:973
		{
			yyVAL.boolVal = BoolVal(false)
		}
	case 149:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:977
		{
			yyVAL.boolVal = BoolVal(true)
		}
	case 150:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:982
		{
			yyVAL.boolVal = BoolVal(false)
		}
	case 151:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:986
		{
			yyVAL.boolVal = BoolVal(true)
		}
	case 152:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:992
		{
			yyVAL.boolVal = BoolVal(false)
		}
	case 153:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:996
		{
			yyVAL.boolVal = BoolVal(false)
		}
	case 154:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1000
		{
			yyVAL.boolVal = BoolVal(true)
		}
	case 155:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1005
		{
			yyVAL.optVal = nil
		}
	case 156:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1009
		{
			yyVAL.optVal = NewStrVal(yyDollar[2].bytes)
		}
	case 157:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1013
		{
			yyVAL.optVal = NewIntVal(yyDollar[2].bytes)
		}
	case 158:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1017
		{
			yyVAL.optVal = NewFloatVal(yyDollar[2].bytes)
		}
	case 159:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1021
		{
			yyVAL.optVal = NewValArg(yyDollar[2].bytes)
		}
	case 160:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1025
		{
			yyVAL.optVal = NewValArg(yyDollar[2].bytes)
		}
	case 161:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1029
		{
			yyVAL.optVal = NewBitVal(yyDollar[2].bytes)
		}
	case 162:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1034
		{
			yyVAL.optVal = nil
		}
	case 163:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1038
		{
			yyVAL.optVal = NewValArg(yyDollar[3].bytes)
		}
	case 164:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1043
		{
			yyVAL.boolVal = BoolVal(false)
		}
	case 165:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1047
		{
			yyVAL.boolVal = BoolVal(true)
		}
	case 166:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1052
		{
			yyVAL.str = ""
		}
	case 167:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1056
		{
			yyVAL.str = string(yyDollar[3].bytes)
		}
	case 168:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1060
		{
			yyVAL.str = string(yyDollar[3].bytes)
		}
	case 169:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1065
		{
			yyVAL.str = ""
		}
	case 170:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1069
		{
			yyVAL.str = string(yyDollar[2].bytes)
		}
	case 171:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1073
		{
			yyVAL.str = string(yyDollar[2].bytes)
		}
	case 172:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1078
		{
			yyVAL.colKeyOpt = colKeyNone
		}
	case 173:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1082
		{
			yyVAL.colKeyOpt = colKeyPrimary
		}
	case 174:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1086
		{
			yyVAL.colKeyOpt = colKey
		}
	case 175:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1090
		{
			yyVAL.colKeyOpt = colKeyUniqueKey
		}
	case 176:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1094
		{
			yyVAL.colKeyOpt = colKeyUnique
		}
	case 177:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1099
		{
			yyVAL.optVal = nil
		}
	case 178:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1103
		{
			yyVAL.optVal = NewStrVal(yyDollar[2].bytes)
		}
	case 179:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:1109
		{
			yyVAL.indexDefinition = &IndexDefinition{Info: yyDollar[1].indexInfo, Columns: yyDollar[3].indexColumns, Options: yyDollar[5].indexOptions}
		}
	case 180:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:1113
		{
			yyVAL.indexDefinition = &IndexDefinition{Info: yyDollar[1].indexInfo, Columns: yyDollar[3].indexColumns}
		}
	case 181:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1119
		{
			yyVAL.indexOptions = []*IndexOption{yyDollar[1].indexOption}
		}
	case 182:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1123
		{
			yyVAL.indexOptions = append(yyVAL.indexOptions, yyDollar[2].indexOption)
		}
	case 183:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1129
		{
			yyVAL.indexOption = &IndexOption{Name: string(yyDollar[1].bytes), Using: string(yyDollar[2].bytes)}
		}
	case 184:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1133
		{
			// should not be string
			yyVAL.indexOption = &IndexOption{Name: string(yyDollar[1].bytes), Value: NewIntVal(yyDollar[3].bytes)}
		}
	case 185:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1138
		{
			yyVAL.indexOption = &IndexOption{Name: string(yyDollar[1].bytes), Value: NewStrVal(yyDollar[2].bytes)}
		}
	case 186:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1144
		{
			yyVAL.str = ""
		}
	case 187:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1148
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 188:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1154
		{
			yyVAL.indexInfo = &IndexInfo{Type: string(yyDollar[1].bytes) + " " + string(yyDollar[2].bytes), Name: NewColIdent("PRIMARY"), Primary: true, Unique: true}
		}
	case 189:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1158
		{
			yyVAL.indexInfo = &IndexInfo{Type: string(yyDollar[1].bytes) + " " + string(yyDollar[2].str), Name: NewColIdent(string(yyDollar[3].bytes)), Spatial: true, Unique: false}
		}
	case 190:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1162
		{
			yyVAL.indexInfo = &IndexInfo{Type: string(yyDollar[1].bytes) + " " + string(yyDollar[2].str), Name: NewColIdent(string(yyDollar[3].bytes)), Unique: true}
		}
	case 191:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1166
		{
			yyVAL.indexInfo = &IndexInfo{Type: string(yyDollar[1].bytes), Name: NewColIdent(string(yyDollar[2].bytes)), Unique: true}
		}
	case 192:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1170
		{
			yyVAL.indexInfo = &IndexInfo{Type: string(yyDollar[1].str), Name: NewColIdent(string(yyDollar[2].bytes)), Unique: false}
		}
	case 193:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1176
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 194:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1180
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 195:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1186
		{
			yyVAL.indexColumns = []*IndexColumn{yyDollar[1].indexColumn}
		}
	case 196:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1190
		{
			yyVAL.indexColumns = append(yyVAL.indexColumns, yyDollar[3].indexColumn)
		}
	case 197:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1196
		{
			yyVAL.indexColumn = &IndexColumn{Column: yyDollar[1].colIdent, Length: yyDollar[2].optVal}
		}
	case 198:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1201
		{
			yyVAL.str = ""
		}
	case 199:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1205
		{
			yyVAL.str = " " + string(yyDollar[1].str)
		}
	case 200:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1209
		{
			yyVAL.str = string(yyDollar[1].str) + ", " + string(yyDollar[3].str)
		}
	case 201:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1217
		{
			yyVAL.str = yyDollar[1].str
		}
	case 202:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1221
		{
			yyVAL.str = yyDollar[1].str + " " + yyDollar[2].str
		}
	case 203:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1225
		{
			yyVAL.str = yyDollar[1].str + "=" + yyDollar[3].str
		}
	case 204:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1231
		{
			yyVAL.str = yyDollar[1].colIdent.String()

		}
	case 205:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1236
		{
			yyVAL.str = defaultDialect.QuoteHandler().WrapStringLiteral(string(yyDollar[1].bytes))
		}
	case 206:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1240
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 207:
		yyDollar = yyS[yypt-6 : yypt+1]
//line sql.y:1246
		{
			yyVAL.statement = &DDL{Action: AlterStr, Table: yyDollar[4].tableName, NewName: yyDollar[4].tableName}
		}
	case 208:
		yyDollar = yyS[yypt-7 : yypt+1]
//line sql.y:1250
		{
			yyVAL.statement = &DDL{Action: AlterStr, Table: yyDollar[4].tableName, NewName: yyDollar[4].tableName}
		}
	case 209:
		yyDollar = yyS[yypt-7 : yypt+1]
//line sql.y:1254
		{
			yyVAL.statement = &DDL{Action: AlterStr, Table: yyDollar[4].tableName, NewName: yyDollar[4].tableName}
		}
	case 210:
		yyDollar = yyS[yypt-12 : yypt+1]
//line sql.y:1258
		{
			yyVAL.statement = &DDL{
				Action: AddColVindexStr,
				Table:  yyDollar[4].tableName,
				VindexSpec: &VindexSpec{
					Name:   yyDollar[7].colIdent,
					Type:   yyDollar[11].colIdent,
					Params: yyDollar[12].vindexParams,
				},
				VindexCols: yyDollar[9].columns,
			}
		}
	case 211:
		yyDollar = yyS[yypt-7 : yypt+1]
//line sql.y:1271
		{
			yyVAL.statement = &DDL{
				Action: DropColVindexStr,
				Table:  yyDollar[4].tableName,
				VindexSpec: &VindexSpec{
					Name: yyDollar[7].colIdent,
				},
			}
		}
	case 212:
		yyDollar = yyS[yypt-7 : yypt+1]
//line sql.y:1281
		{
			// Change this to a rename statement
			yyVAL.statement = &DDL{Action: RenameStr, Table: yyDollar[4].tableName, NewName: yyDollar[7].tableName}
		}
	case 213:
		yyDollar = yyS[yypt-7 : yypt+1]
//line sql.y:1286
		{
			// Rename an index can just be an alter
			yyVAL.statement = &DDL{Action: AlterStr, Table: yyDollar[4].tableName, NewName: yyDollar[4].tableName}
		}
	case 214:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:1291
		{
			yyVAL.statement = &DDL{Action: AlterStr, Table: yyDollar[3].tableName.ToViewName(), NewName: yyDollar[3].tableName.ToViewName()}
		}
	case 215:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:1295
		{
			yyVAL.statement = &DDL{Action: AlterStr, Table: yyDollar[4].tableName, PartitionSpec: yyDollar[5].partSpec}
		}
	case 227:
		yyDollar = yyS[yypt-7 : yypt+1]
//line sql.y:1314
		{
			yyVAL.partSpec = &PartitionSpec{Action: ReorganizeStr, Name: yyDollar[3].colIdent, Definitions: yyDollar[6].partDefs}
		}
	case 228:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1320
		{
			yyVAL.partDefs = []*PartitionDefinition{yyDollar[1].partDef}
		}
	case 229:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1324
		{
			yyVAL.partDefs = append(yyDollar[1].partDefs, yyDollar[3].partDef)
		}
	case 230:
		yyDollar = yyS[yypt-8 : yypt+1]
//line sql.y:1330
		{
			yyVAL.partDef = &PartitionDefinition{Name: yyDollar[2].colIdent, Limit: yyDollar[7].expr}
		}
	case 231:
		yyDollar = yyS[yypt-8 : yypt+1]
//line sql.y:1334
		{
			yyVAL.partDef = &PartitionDefinition{Name: yyDollar[2].colIdent, Maxvalue: true}
		}
	case 232:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:1340
		{
			yyVAL.statement = &DDL{Action: RenameStr, Table: yyDollar[3].tableName, NewName: yyDollar[5].tableName}
		}
	case 233:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:1346
		{
			var exists bool
			if yyDollar[3].byt != 0 {
				exists = true
			}
			yyVAL.statement = &DDL{Action: DropStr, Table: yyDollar[4].tableName, IfExists: exists}
		}
	case 234:
		yyDollar = yyS[yypt-6 : yypt+1]
//line sql.y:1354
		{
			// Change this to an alter statement
			yyVAL.statement = &DDL{Action: AlterStr, Table: yyDollar[5].tableName, NewName: yyDollar[5].tableName}
		}
	case 235:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:1359
		{
			var exists bool
			if yyDollar[3].byt != 0 {
				exists = true
			}
			yyVAL.statement = &DDL{Action: DropStr, Table: yyDollar[4].tableName.ToViewName(), IfExists: exists}
		}
	case 236:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:1367
		{
			yyVAL.statement = &DBDDL{Action: DropStr, DBName: string(yyDollar[4].bytes)}
		}
	case 237:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:1371
		{
			yyVAL.statement = &DBDDL{Action: DropStr, DBName: string(yyDollar[4].bytes)}
		}
	case 238:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1377
		{
			yyVAL.statement = &DDL{Action: TruncateStr, Table: yyDollar[3].tableName}
		}
	case 239:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1381
		{
			yyVAL.statement = &DDL{Action: TruncateStr, Table: yyDollar[2].tableName}
		}
	case 240:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1386
		{
			yyVAL.statement = &DDL{Action: AlterStr, Table: yyDollar[3].tableName, NewName: yyDollar[3].tableName}
		}
	case 241:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:1392
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes) + " " + string(yyDollar[3].bytes)}
		}
	case 242:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:1396
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes) + " " + string(yyDollar[3].bytes)}
		}
	case 243:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:1400
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes) + " " + string(yyDollar[3].bytes)}
		}
	case 244:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:1405
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes) + " " + string(yyDollar[3].bytes)}
		}
	case 245:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:1409
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes) + " " + string(yyDollar[3].bytes)}
		}
	case 246:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:1413
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes) + " " + string(yyDollar[3].bytes)}
		}
	case 247:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:1417
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes) + " " + string(yyDollar[3].bytes)}
		}
	case 248:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:1421
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes) + " " + string(yyDollar[3].bytes)}
		}
	case 249:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1425
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes)}
		}
	case 250:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1429
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes)}
		}
	case 251:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1433
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes)}
		}
	case 252:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1437
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes)}
		}
	case 253:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:1441
		{
			yyVAL.statement = &Show{Scope: yyDollar[2].str, Type: string(yyDollar[3].bytes)}
		}
	case 254:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:1445
		{
			yyVAL.statement = &Show{Scope: yyDollar[2].str, Type: string(yyDollar[3].bytes)}
		}
	case 255:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1449
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes)}
		}
	case 256:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:1453
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes)}
		}
	case 257:
		yyDollar = yyS[yypt-6 : yypt+1]
//line sql.y:1457
		{
			// this is ugly, but I couldn't find a better way for now
			if yyDollar[4].str == "processlist" {
				yyVAL.statement = &Show{Type: yyDollar[4].str}
			} else {
				showTablesOpt := &ShowTablesOpt{Extended: yyDollar[2].str, Full: yyDollar[3].str, DbName: yyDollar[5].str, Filter: yyDollar[6].showFilter}
				yyVAL.statement = &Show{Type: yyDollar[4].str, ShowTablesOpt: showTablesOpt}
			}
		}
	case 258:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:1467
		{
			yyVAL.statement = &Show{Scope: yyDollar[2].str, Type: string(yyDollar[3].bytes)}
		}
	case 259:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:1471
		{
			yyVAL.statement = &Show{Scope: yyDollar[2].str, Type: string(yyDollar[3].bytes)}
		}
	case 260:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1475
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes)}
		}
	case 261:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:1479
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes), OnTable: yyDollar[4].tableName}
		}
	case 262:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1483
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes)}
		}
	case 263:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1487
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes)}
		}
	case 264:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1491
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes)}
		}
	case 265:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1495
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes)}
		}
	case 266:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1505
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes)}
		}
	case 267:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1511
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 268:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1515
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 269:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1521
		{
			yyVAL.str = ""
		}
	case 270:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1525
		{
			yyVAL.str = "extended "
		}
	case 271:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1531
		{
			yyVAL.str = ""
		}
	case 272:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1535
		{
			yyVAL.str = "full "
		}
	case 273:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1541
		{
			yyVAL.str = ""
		}
	case 274:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1545
		{
			yyVAL.str = yyDollar[2].tableIdent.v
		}
	case 275:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1549
		{
			yyVAL.str = yyDollar[2].tableIdent.v
		}
	case 276:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1555
		{
			yyVAL.showFilter = nil
		}
	case 277:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1559
		{
			yyVAL.showFilter = &ShowFilter{Like: string(yyDollar[2].bytes)}
		}
	case 278:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1563
		{
			yyVAL.showFilter = &ShowFilter{Filter: yyDollar[2].expr}
		}
	case 280:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1570
		{
			yyVAL.str = LocalStr
		}
	case 281:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1576
		{
			yyVAL.str = ""
		}
	case 282:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1580
		{
			yyVAL.str = SessionStr
		}
	case 283:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1584
		{
			yyVAL.str = GlobalStr
		}
	case 284:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1590
		{
			yyVAL.statement = &Use{DBName: yyDollar[2].tableIdent}
		}
	case 285:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1594
		{
			yyVAL.statement = &Use{DBName: TableIdent{v: ""}}
		}
	case 286:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1600
		{
			yyVAL.statement = &Begin{}
		}
	case 287:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1604
		{
			yyVAL.statement = &Begin{}
		}
	case 288:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1610
		{
			yyVAL.statement = &Commit{}
		}
	case 289:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1616
		{
			yyVAL.statement = &Rollback{}
		}
	case 290:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1622
		{
			yyVAL.statement = &OtherRead{}
		}
	case 291:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1626
		{
			yyVAL.statement = &OtherRead{}
		}
	case 292:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1630
		{
			yyVAL.statement = &OtherRead{}
		}
	case 293:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1634
		{
			yyVAL.statement = &OtherAdmin{}
		}
	case 294:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1638
		{
			yyVAL.statement = &OtherAdmin{}
		}
	case 295:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1644
		{
			yyVAL.statement = &DeallocatePrepare{PreparedStatementName: yyDollar[3].tableIdent}
		}
	case 296:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:1650
		{
			yyVAL.statement = &Prepare{PreparedStatementName: yyDollar[2].tableIdent, PreparedStatementQuery: yyDollar[4].preparedQuery}
		}
	case 297:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:1654
		{
			yyVAL.statement = &Prepare{PreparedStatementName: yyDollar[2].tableIdent, PreparedStatementQuery: yyDollar[4].preparedQuery}
		}
	case 298:
		yyDollar = yyS[yypt-7 : yypt+1]
//line sql.y:1658
		{
			yyVAL.statement = &Prepare{PreparedStatementName: yyDollar[2].tableIdent, ColumnTypes: yyDollar[4].columnTypes, PreparedStatementQuery: yyDollar[7].preparedQuery}
		}
	case 299:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1664
		{
			yyVAL.preparedQuery = yyDollar[1].selStmt.(*Select)
		}
	case 300:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1668
		{
			yyVAL.preparedQuery = yyDollar[1].statement.(*Insert)
		}
	case 301:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1672
		{
			yyVAL.preparedQuery = yyDollar[1].statement.(*Delete)
		}
	case 302:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1676
		{
			yyVAL.preparedQuery = yyDollar[1].statement.(*Update)
		}
	case 303:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1680
		{
			yyVAL.preparedQuery = NewTableIdent(string(yyDollar[1].bytes))
		}
	case 304:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1684
		{
			statement, err := NewPreparedQueryFromString(string(yyDollar[1].bytes))
			if statement == nil {
				yylex.Error("unsupported type of prepared query")
				return 1
			}
			if err != nil {
				yylex.Error("syntax error in prepared query")
				return 1
			}
			yyVAL.preparedQuery = statement
		}
	case 305:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1699
		{
			yyVAL.statement = &Execute{PreparedStatementName: NewTableIdent(string(yyDollar[2].bytes))}
		}
	case 306:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:1703
		{
			yyVAL.statement = &Execute{PreparedStatementName: NewTableIdent(string(yyDollar[2].bytes)), Using: yyDollar[4].usingInExecuteList}
		}
	case 307:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1709
		{
			yyVAL.usingInExecuteList = UsingInExecuteList{yyDollar[1].tableIdent}
		}
	case 308:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1713
		{
			yyVAL.usingInExecuteList = append(yyDollar[1].usingInExecuteList, yyDollar[3].tableIdent)
		}
	case 309:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1718
		{
			setAllowComments(yylex, true)
		}
	case 310:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1722
		{
			yyVAL.bytes2 = yyDollar[2].bytes2
			setAllowComments(yylex, false)
		}
	case 311:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1728
		{
			yyVAL.bytes2 = nil
		}
	case 312:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1732
		{
			yyVAL.bytes2 = append(yyDollar[1].bytes2, yyDollar[2].bytes)
		}
	case 313:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1738
		{
			yyVAL.str = UnionStr
		}
	case 314:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1742
		{
			yyVAL.str = UnionAllStr
		}
	case 315:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1746
		{
			yyVAL.str = UnionDistinctStr
		}
	case 316:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1751
		{
			yyVAL.str = ""
		}
	case 317:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1755
		{
			yyVAL.str = SQLNoCacheStr
		}
	case 318:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1759
		{
			yyVAL.str = SQLCacheStr
		}
	case 319:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1764
		{
			yyVAL.str = ""
		}
	case 320:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1768
		{
			yyVAL.str = DistinctStr
		}
	case 321:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1773
		{
			yyVAL.str = ""
		}
	case 322:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1777
		{
			yyVAL.str = StraightJoinHint
		}
	case 323:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1782
		{
			yyVAL.selectExprs = nil
		}
	case 324:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1786
		{
			yyVAL.selectExprs = yyDollar[1].selectExprs
		}
	case 325:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1792
		{
			yyVAL.selectExprs = SelectExprs{yyDollar[1].selectExpr}
		}
	case 326:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1796
		{
			yyVAL.selectExprs = append(yyVAL.selectExprs, yyDollar[3].selectExpr)
		}
	case 327:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1802
		{
			yyVAL.selectExpr = &StarExpr{}
		}
	case 328:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1806
		{
			yyVAL.selectExpr = &AliasedExpr{Expr: yyDollar[1].expr, As: yyDollar[2].colIdent}
		}
	case 329:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1810
		{
			yyVAL.selectExpr = &StarExpr{TableName: TableName{Name: yyDollar[1].tableIdent}}
		}
	case 330:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:1814
		{
			yyVAL.selectExpr = &StarExpr{TableName: TableName{Qualifier: yyDollar[1].tableIdent, Name: yyDollar[3].tableIdent}}
		}
	case 331:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1819
		{
			yyVAL.colIdent = ColIdent{}
		}
	case 332:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1823
		{
			yyVAL.colIdent = yyDollar[1].colIdent
		}
	case 333:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1827
		{
			yyVAL.colIdent = yyDollar[2].colIdent
		}
	case 334:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1833
		{
			yyVAL.colIdent = NewColIdentWithQuotes(string(yyDollar[1].bytes), '\'')
		}
	case 335:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1837
		{
			yyVAL.colIdent = NewColIdentWithQuotes(string(yyDollar[1].bytes), '"')
		}
	case 336:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1841
		{
			yyVAL.colIdent = NewColIdentWithQuotes(string(yyDollar[1].bytes), '`')
		}
	case 339:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1853
		{
			yyVAL.tableExprs = TableExprs{&AliasedTableExpr{Expr: TableName{Name: NewTableIdent("dual")}}}
		}
	case 340:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1857
		{
			yyVAL.tableExprs = yyDollar[2].tableExprs
		}
	case 341:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1863
		{
			yyVAL.tableExprs = TableExprs{yyDollar[1].tableExpr}
		}
	case 342:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1867
		{
			yyVAL.tableExprs = append(yyVAL.tableExprs, yyDollar[3].tableExpr)
		}
	case 345:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1877
		{
			yyVAL.tableExpr = yyDollar[1].aliasedTableName
		}
	case 346:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1881
		{
			yyVAL.tableExpr = &AliasedTableExpr{Expr: yyDollar[1].subquery, As: yyDollar[3].tableIdent}
		}
	case 347:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1885
		{
			yyVAL.tableExpr = &ParenTableExpr{Exprs: yyDollar[2].tableExprs}
		}
	case 348:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1891
		{
			yyVAL.aliasedTableName = &AliasedTableExpr{Expr: yyDollar[1].tableName, As: yyDollar[2].tableIdent, Hints: yyDollar[3].indexHints}
		}
	case 349:
		yyDollar = yyS[yypt-7 : yypt+1]
//line sql.y:1895
		{
			yyVAL.aliasedTableName = &AliasedTableExpr{Expr: yyDollar[1].tableName, Partitions: yyDollar[4].partitions, As: yyDollar[6].tableIdent, Hints: yyDollar[7].indexHints}
		}
	case 350:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1901
		{
			yyVAL.columns = Columns{yyDollar[1].colIdent}
		}
	case 351:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1905
		{
			yyVAL.columns = append(yyVAL.columns, yyDollar[3].colIdent)
		}
	case 352:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1911
		{
			yyVAL.partitions = Partitions{yyDollar[1].colIdent}
		}
	case 353:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1915
		{
			yyVAL.partitions = append(yyVAL.partitions, yyDollar[3].colIdent)
		}
	case 354:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:1928
		{
			yyVAL.tableExpr = &JoinTableExpr{LeftExpr: yyDollar[1].tableExpr, Join: yyDollar[2].str, RightExpr: yyDollar[3].tableExpr, Condition: yyDollar[4].joinCondition}
		}
	case 355:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:1932
		{
			yyVAL.tableExpr = &JoinTableExpr{LeftExpr: yyDollar[1].tableExpr, Join: yyDollar[2].str, RightExpr: yyDollar[3].tableExpr, Condition: yyDollar[4].joinCondition}
		}
	case 356:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:1936
		{
			yyVAL.tableExpr = &JoinTableExpr{LeftExpr: yyDollar[1].tableExpr, Join: yyDollar[2].str, RightExpr: yyDollar[3].tableExpr, Condition: yyDollar[4].joinCondition}
		}
	case 357:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1940
		{
			yyVAL.tableExpr = &JoinTableExpr{LeftExpr: yyDollar[1].tableExpr, Join: yyDollar[2].str, RightExpr: yyDollar[3].tableExpr}
		}
	case 358:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1946
		{
			yyVAL.joinCondition = JoinCondition{On: yyDollar[2].expr}
		}
	case 359:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:1948
		{
			yyVAL.joinCondition = JoinCondition{Using: yyDollar[3].columns}
		}
	case 360:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1952
		{
			yyVAL.joinCondition = JoinCondition{}
		}
	case 361:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1954
		{
			yyVAL.joinCondition = yyDollar[1].joinCondition
		}
	case 362:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1958
		{
			yyVAL.joinCondition = JoinCondition{}
		}
	case 363:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1960
		{
			yyVAL.joinCondition = JoinCondition{On: yyDollar[2].expr}
		}
	case 364:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1963
		{
			yyVAL.empty = struct{}{}
		}
	case 365:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1965
		{
			yyVAL.empty = struct{}{}
		}
	case 366:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1968
		{
			yyVAL.tableIdent = NewTableIdent("")
		}
	case 367:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1972
		{
			yyVAL.tableIdent = yyDollar[1].tableIdent
		}
	case 368:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1976
		{
			yyVAL.tableIdent = yyDollar[2].tableIdent
		}
	case 370:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1986
		{
			yyVAL.str = JoinStr
		}
	case 371:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1990
		{
			yyVAL.str = JoinStr
		}
	case 372:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1994
		{
			yyVAL.str = JoinStr
		}
	case 373:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2000
		{
			yyVAL.str = StraightJoinStr
		}
	case 374:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2006
		{
			yyVAL.str = LeftJoinStr
		}
	case 375:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2010
		{
			yyVAL.str = LeftJoinStr
		}
	case 376:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2014
		{
			yyVAL.str = RightJoinStr
		}
	case 377:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2018
		{
			yyVAL.str = RightJoinStr
		}
	case 378:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2024
		{
			yyVAL.str = NaturalJoinStr
		}
	case 379:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2028
		{
			if yyDollar[2].str == LeftJoinStr {
				yyVAL.str = NaturalLeftJoinStr
			} else {
				yyVAL.str = NaturalRightJoinStr
			}
		}
	case 380:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2038
		{
			yyVAL.tableName = yyDollar[2].tableName
		}
	case 381:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2042
		{
			yyVAL.tableName = yyDollar[1].tableName
		}
	case 382:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2048
		{
			yyVAL.tableName = TableName{Name: yyDollar[1].tableIdent}
		}
	case 383:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2052
		{
			yyVAL.tableName = TableName{Qualifier: yyDollar[1].tableIdent, Name: yyDollar[3].tableIdent}
		}
	case 384:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:2057
		{
			yyVAL.indexHints = nil
		}
	case 385:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:2061
		{
			yyVAL.indexHints = &IndexHints{Type: UseStr, Indexes: yyDollar[4].columns}
		}
	case 386:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:2065
		{
			yyVAL.indexHints = &IndexHints{Type: IgnoreStr, Indexes: yyDollar[4].columns}
		}
	case 387:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:2069
		{
			yyVAL.indexHints = &IndexHints{Type: ForceStr, Indexes: yyDollar[4].columns}
		}
	case 388:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:2074
		{
			yyVAL.expr = nil
		}
	case 389:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2078
		{
			yyVAL.expr = yyDollar[2].expr
		}
	case 390:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2084
		{
			yyVAL.expr = yyDollar[1].expr
		}
	case 391:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2088
		{
			yyVAL.expr = &AndExpr{Left: yyDollar[1].expr, Right: yyDollar[3].expr}
		}
	case 392:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2092
		{
			yyVAL.expr = &OrExpr{Left: yyDollar[1].expr, Right: yyDollar[3].expr}
		}
	case 393:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2096
		{
			yyVAL.expr = &NotExpr{Expr: yyDollar[2].expr}
		}
	case 394:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2100
		{
			yyVAL.expr = &IsExpr{Operator: yyDollar[3].str, Expr: yyDollar[1].expr}
		}
	case 395:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2104
		{
			yyVAL.expr = yyDollar[1].expr
		}
	case 396:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2108
		{
			yyVAL.expr = &Default{ColName: yyDollar[2].str}
		}
	case 397:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:2114
		{
			yyVAL.str = ""
		}
	case 398:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2118
		{
			yyVAL.str = string(yyDollar[2].bytes)
		}
	case 399:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2124
		{
			yyVAL.boolVal = BoolVal(true)
		}
	case 400:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2128
		{
			yyVAL.boolVal = BoolVal(false)
		}
	case 401:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2134
		{
			yyVAL.expr = &ComparisonExpr{Left: yyDollar[1].expr, Operator: yyDollar[2].str, Right: yyDollar[3].expr}
		}
	case 402:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2138
		{
			yyVAL.expr = &ComparisonExpr{Left: yyDollar[1].expr, Operator: InStr, Right: yyDollar[3].colTuple}
		}
	case 403:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:2142
		{
			yyVAL.expr = &ComparisonExpr{Left: yyDollar[1].expr, Operator: NotInStr, Right: yyDollar[4].colTuple}
		}
	case 404:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:2146
		{
			yyVAL.expr = &ComparisonExpr{Left: yyDollar[1].expr, Operator: LikeStr, Right: yyDollar[3].expr, Escape: yyDollar[4].expr}
		}
	case 405:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:2150
		{
			yyVAL.expr = &ComparisonExpr{Left: yyDollar[1].expr, Operator: NotLikeStr, Right: yyDollar[4].expr, Escape: yyDollar[5].expr}
		}
	case 406:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2154
		{
			yyVAL.expr = &ComparisonExpr{Left: yyDollar[1].expr, Operator: RegexpStr, Right: yyDollar[3].expr}
		}
	case 407:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:2158
		{
			yyVAL.expr = &ComparisonExpr{Left: yyDollar[1].expr, Operator: NotRegexpStr, Right: yyDollar[4].expr}
		}
	case 408:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:2162
		{
			yyVAL.expr = &RangeCond{Left: yyDollar[1].expr, Operator: BetweenStr, From: yyDollar[3].expr, To: yyDollar[5].expr}
		}
	case 409:
		yyDollar = yyS[yypt-6 : yypt+1]
//line sql.y:2166
		{
			yyVAL.expr = &RangeCond{Left: yyDollar[1].expr, Operator: NotBetweenStr, From: yyDollar[4].expr, To: yyDollar[6].expr}
		}
	case 410:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2170
		{
			yyVAL.expr = &ExistsExpr{Subquery: yyDollar[2].subquery}
		}
	case 411:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2176
		{
			yyVAL.str = IsNullStr
		}
	case 412:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2180
		{
			yyVAL.str = IsNotNullStr
		}
	case 413:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2184
		{
			yyVAL.str = IsTrueStr
		}
	case 414:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2188
		{
			yyVAL.str = IsNotTrueStr
		}
	case 415:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2192
		{
			yyVAL.str = IsFalseStr
		}
	case 416:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2196
		{
			yyVAL.str = IsNotFalseStr
		}
	case 417:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2202
		{
			yyVAL.str = EqualStr
		}
	case 418:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2206
		{
			yyVAL.str = LessThanStr
		}
	case 419:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2210
		{
			yyVAL.str = GreaterThanStr
		}
	case 420:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2214
		{
			yyVAL.str = LessEqualStr
		}
	case 421:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2218
		{
			yyVAL.str = GreaterEqualStr
		}
	case 422:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2222
		{
			yyVAL.str = NotEqualStr
		}
	case 423:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2226
		{
			yyVAL.str = NullSafeEqualStr
		}
	case 424:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:2231
		{
			yyVAL.expr = nil
		}
	case 425:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2235
		{
			yyVAL.expr = yyDollar[2].expr
		}
	case 426:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2241
		{
			yyVAL.colTuple = yyDollar[1].valTuple
		}
	case 427:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2245
		{
			yyVAL.colTuple = yyDollar[1].subquery
		}
	case 428:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2249
		{
			yyVAL.colTuple = ListArg(yyDollar[1].bytes)
		}
	case 429:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2255
		{
			yyVAL.subquery = &Subquery{yyDollar[2].selStmt}
		}
	case 430:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2261
		{
			yyVAL.exprs = Exprs{yyDollar[1].expr}
		}
	case 431:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2265
		{
			yyVAL.exprs = append(yyDollar[1].exprs, yyDollar[3].expr)
		}
	case 432:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2272
		{
			yyVAL.expr = yyDollar[1].colName
		}
	case 433:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2276
		{
			yyVAL.expr = yyDollar[1].expr
		}
	case 434:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2280
		{
			yyVAL.expr = yyDollar[1].boolVal
		}
	case 435:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2284
		{
			yyVAL.expr = yyDollar[1].expr
		}
	case 436:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2288
		{
			yyVAL.expr = yyDollar[1].subquery
		}
	case 437:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2292
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: BitAndStr, Right: yyDollar[3].expr}
		}
	case 438:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2296
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: BitOrStr, Right: yyDollar[3].expr}
		}
	case 439:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2300
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: BitXorStr, Right: yyDollar[3].expr}
		}
	case 440:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2304
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: PlusStr, Right: yyDollar[3].expr}
		}
	case 441:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2308
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: MinusStr, Right: yyDollar[3].expr}
		}
	case 442:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2312
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: MultStr, Right: yyDollar[3].expr}
		}
	case 443:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2316
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: DivStr, Right: yyDollar[3].expr}
		}
	case 444:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2320
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: IntDivStr, Right: yyDollar[3].expr}
		}
	case 445:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2324
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: ModStr, Right: yyDollar[3].expr}
		}
	case 446:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2328
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: ModStr, Right: yyDollar[3].expr}
		}
	case 447:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2332
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: ShiftLeftStr, Right: yyDollar[3].expr}
		}
	case 448:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2336
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: ShiftRightStr, Right: yyDollar[3].expr}
		}
	case 449:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2340
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].colName, Operator: JSONExtractOp, Right: yyDollar[3].expr}
		}
	case 450:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2344
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].colName, Operator: JSONUnquoteExtractOp, Right: yyDollar[3].expr}
		}
	case 451:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2348
		{
			yyVAL.expr = &CollateExpr{Expr: yyDollar[1].expr, Charset: yyDollar[3].str}
		}
	case 452:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2352
		{
			yyVAL.expr = &UnaryExpr{Operator: BinaryStr, Expr: yyDollar[2].expr}
		}
	case 453:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2356
		{
			yyVAL.expr = &UnaryExpr{Operator: UBinaryStr, Expr: yyDollar[2].expr}
		}
	case 454:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2360
		{
			if num, ok := yyDollar[2].expr.(*SQLVal); ok && num.Type == IntVal {
				yyVAL.expr = num
			} else {
				yyVAL.expr = &UnaryExpr{Operator: UPlusStr, Expr: yyDollar[2].expr}
			}
		}
	case 455:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2368
		{
			if num, ok := yyDollar[2].expr.(*SQLVal); ok && num.Type == IntVal {
				// Handle double negative
				if num.Val[0] == '-' {
					num.Val = num.Val[1:]
					yyVAL.expr = num
				} else {
					yyVAL.expr = NewIntVal(append([]byte("-"), num.Val...))
				}
			} else {
				yyVAL.expr = &UnaryExpr{Operator: UMinusStr, Expr: yyDollar[2].expr}
			}
		}
	case 456:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2382
		{
			yyVAL.expr = &UnaryExpr{Operator: TildaStr, Expr: yyDollar[2].expr}
		}
	case 457:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2386
		{
			yyVAL.expr = &UnaryExpr{Operator: BangStr, Expr: yyDollar[2].expr}
		}
	case 458:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2390
		{
			yyVAL.expr = yyDollar[1].intervalExpr
		}
	case 459:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2394
		{
			yyVAL.expr = yyDollar[1].intervalExpr
		}
	case 464:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2404
		{
			if yylex.(*Tokenizer).IsMySQL() {
				yylex.Error("MySQL don't support PostgreSQL syntax of interval expression")
				return 1
			}
			// Postgresql type of interval where interval value is string with values+units
			yyVAL.intervalExpr = &IntervalExpr{Expr: NewStrVal(yyDollar[2].bytes)}
		}
	case 465:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2415
		{
			if yylex.(*Tokenizer).IsPostgreSQL() {
				yylex.Error("PostgreSQL don't support Mysql syntax of interval expression")
				return 1
			}
			// This rule prevents the usage of INTERVAL
			// as a function. If support is needed for that,
			// we'll need to revisit this. The solution
			// will be non-trivial because of grammar conflicts.
			yyVAL.intervalExpr = &IntervalExpr{Expr: yyDollar[2].expr, Unit: string(yyDollar[3].bytes)}
		}
	case 466:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:2433
		{
			yyVAL.expr = &FuncExpr{Name: yyDollar[1].colIdent, Exprs: yyDollar[3].selectExprs}
		}
	case 467:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:2437
		{
			yyVAL.expr = &FuncExpr{Name: yyDollar[1].colIdent, Distinct: true, Exprs: yyDollar[4].selectExprs}
		}
	case 468:
		yyDollar = yyS[yypt-6 : yypt+1]
//line sql.y:2441
		{
			yyVAL.expr = &FuncExpr{Qualifier: yyDollar[1].tableIdent, Name: yyDollar[3].colIdent, Exprs: yyDollar[5].selectExprs}
		}
	case 469:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:2451
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("left"), Exprs: yyDollar[3].selectExprs}
		}
	case 470:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:2455
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("right"), Exprs: yyDollar[3].selectExprs}
		}
	case 471:
		yyDollar = yyS[yypt-6 : yypt+1]
//line sql.y:2459
		{
			yyVAL.expr = &ConvertExpr{Expr: yyDollar[3].expr, Type: yyDollar[5].convertType}
		}
	case 472:
		yyDollar = yyS[yypt-6 : yypt+1]
//line sql.y:2463
		{
			yyVAL.expr = &ConvertExpr{Expr: yyDollar[3].expr, Type: yyDollar[5].convertType}
		}
	case 473:
		yyDollar = yyS[yypt-6 : yypt+1]
//line sql.y:2467
		{
			yyVAL.expr = &ConvertUsingExpr{Expr: yyDollar[3].expr, Type: yyDollar[5].str}
		}
	case 474:
		yyDollar = yyS[yypt-6 : yypt+1]
//line sql.y:2471
		{
			yyVAL.expr = &SubstrExpr{Name: yyDollar[3].colName, From: yyDollar[5].expr, To: nil}
		}
	case 475:
		yyDollar = yyS[yypt-8 : yypt+1]
//line sql.y:2475
		{
			yyVAL.expr = &SubstrExpr{Name: yyDollar[3].colName, From: yyDollar[5].expr, To: yyDollar[7].expr}
		}
	case 476:
		yyDollar = yyS[yypt-8 : yypt+1]
//line sql.y:2479
		{
			yyVAL.expr = &SubstrExpr{Name: yyDollar[3].colName, From: yyDollar[5].expr, To: yyDollar[7].expr}
		}
	case 477:
		yyDollar = yyS[yypt-6 : yypt+1]
//line sql.y:2483
		{
			yyVAL.expr = &SubstrExpr{Name: yyDollar[3].colName, From: yyDollar[5].expr, To: nil}
		}
	case 478:
		yyDollar = yyS[yypt-8 : yypt+1]
//line sql.y:2487
		{
			yyVAL.expr = &SubstrExpr{Name: yyDollar[3].colName, From: yyDollar[5].expr, To: yyDollar[7].expr}
		}
	case 479:
		yyDollar = yyS[yypt-8 : yypt+1]
//line sql.y:2491
		{
			yyVAL.expr = &SubstrExpr{Name: yyDollar[3].colName, From: yyDollar[5].expr, To: yyDollar[7].expr}
		}
	case 480:
		yyDollar = yyS[yypt-9 : yypt+1]
//line sql.y:2495
		{
			yyVAL.expr = &MatchExpr{Columns: yyDollar[3].selectExprs, Expr: yyDollar[7].expr, Option: yyDollar[8].str}
		}
	case 481:
		yyDollar = yyS[yypt-7 : yypt+1]
//line sql.y:2499
		{
			yyVAL.expr = &GroupConcatExpr{Distinct: yyDollar[3].str, Exprs: yyDollar[4].selectExprs, OrderBy: yyDollar[5].orderBy, Separator: yyDollar[6].str}
		}
	case 482:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:2503
		{
			yyVAL.expr = &CaseExpr{Expr: yyDollar[2].expr, Whens: yyDollar[3].whens, Else: yyDollar[4].expr}
		}
	case 483:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:2507
		{
			yyVAL.expr = &ValuesFuncExpr{Name: yyDollar[3].colName}
		}
	case 484:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2519
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("current_timestamp")}
		}
	case 485:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2523
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("utc_timestamp")}
		}
	case 486:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2527
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("utc_time")}
		}
	case 487:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2531
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("utc_date")}
		}
	case 488:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2536
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("localtime")}
		}
	case 489:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2541
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("localtimestamp")}
		}
	case 490:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2546
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("current_date")}
		}
	case 491:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2551
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("current_time")}
		}
	case 494:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:2565
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("if"), Exprs: yyDollar[3].selectExprs}
		}
	case 495:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:2569
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("database"), Exprs: yyDollar[3].selectExprs}
		}
	case 496:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:2573
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("mod"), Exprs: yyDollar[3].selectExprs}
		}
	case 497:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:2577
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("replace"), Exprs: yyDollar[3].selectExprs}
		}
	case 498:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:2583
		{
			yyVAL.str = ""
		}
	case 499:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2587
		{
			yyVAL.str = BooleanModeStr
		}
	case 500:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:2591
		{
			yyVAL.str = NaturalLanguageModeStr
		}
	case 501:
		yyDollar = yyS[yypt-7 : yypt+1]
//line sql.y:2595
		{
			yyVAL.str = NaturalLanguageModeWithQueryExpansionStr
		}
	case 502:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2599
		{
			yyVAL.str = QueryExpansionStr
		}
	case 503:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2605
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 504:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2609
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 505:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2615
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal}
		}
	case 506:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2619
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal, Charset: yyDollar[3].str, Operator: CharacterSetStr}
		}
	case 507:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2623
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal, Charset: string(yyDollar[3].bytes)}
		}
	case 508:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2627
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
		}
	case 509:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2631
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal}
		}
	case 510:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2635
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
			yyVAL.convertType.Length = yyDollar[2].LengthScaleOption.Length
			yyVAL.convertType.Scale = yyDollar[2].LengthScaleOption.Scale
		}
	case 511:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2641
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
		}
	case 512:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2645
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal}
		}
	case 513:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2649
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
		}
	case 514:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2653
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
		}
	case 515:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2657
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal}
		}
	case 516:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2661
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
		}
	case 517:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2665
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
		}
	case 518:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:2669
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
		}
	case 519:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:2674
		{
			yyVAL.expr = nil
		}
	case 520:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2678
		{
			yyVAL.expr = yyDollar[1].expr
		}
	case 521:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:2683
		{
			yyVAL.str = string("")
		}
	case 522:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2687
		{
			yyVAL.str = " separator '" + string(yyDollar[2].bytes) + "'"
		}
	case 523:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2693
		{
			yyVAL.whens = []*When{yyDollar[1].when}
		}
	case 524:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2697
		{
			yyVAL.whens = append(yyDollar[1].whens, yyDollar[2].when)
		}
	case 525:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:2703
		{
			yyVAL.when = &When{Cond: yyDollar[2].expr, Val: yyDollar[4].expr}
		}
	case 526:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:2708
		{
			yyVAL.expr = nil
		}
	case 527:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2712
		{
			yyVAL.expr = yyDollar[2].expr
		}
	case 528:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2718
		{
			yyVAL.colName = &ColName{Name: yyDollar[1].colIdent}
		}
	case 529:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2722
		{
			yyVAL.colName = &ColName{Qualifier: TableName{Name: yyDollar[1].tableIdent}, Name: yyDollar[3].colIdent}
		}
	case 530:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:2726
		{
			yyVAL.colName = &ColName{Qualifier: TableName{Qualifier: yyDollar[1].tableIdent, Name: yyDollar[3].tableIdent}, Name: yyDollar[5].colIdent}
		}
	case 531:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2732
		{
			yyVAL.expr = NewStrVal(yyDollar[1].bytes)
		}
	case 532:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2736
		{
			val, err := NewMySQLDoubleQuotedStrVal(yyDollar[1].bytes)
			if err != nil {
				yylex.Error("dialect don't allow to use double quotes for string literals. " + err.Error())
				return 1
			}
			yyVAL.expr = val
		}
	case 533:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2745
		{
			yyVAL.expr = NewHexVal(yyDollar[1].bytes)
		}
	case 534:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2749
		{
			yyVAL.expr = NewBitVal(yyDollar[1].bytes)
		}
	case 535:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2753
		{
			yyVAL.expr = NewIntVal(yyDollar[1].bytes)
		}
	case 536:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2757
		{
			yyVAL.expr = NewFloatVal(yyDollar[1].bytes)
		}
	case 537:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2761
		{
			yyVAL.expr = NewHexNum(yyDollar[1].bytes)
		}
	case 538:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2765
		{
			yyVAL.expr = NewValArg(yyDollar[1].bytes)
		}
	case 539:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2769
		{
			yyVAL.expr = &NullVal{}
		}
	case 540:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2773
		{
			yyVAL.expr = NewPgEscapeString(yyDollar[1].bytes)
		}
	case 541:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2777
		{
			result, err := NewDollarExpr(string(yyDollar[1].bytes))
			if err != nil {
				yylex.Error("syntax error")
				return 1
			}
			yyVAL.expr = result
		}
	case 542:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2786
		{
			yyVAL.expr = NewCastVal(yyDollar[1].expr, yyDollar[2].bytes)
		}
	case 543:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2790
		{
			yyVAL.expr = &Default{}
		}
	case 544:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2796
		{
			yyVAL.bytes = yyDollar[1].bytes
		}
	case 545:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2801
		{
			yyVAL.bytes = append(yyDollar[1].bytes, yyDollar[2].bytes...)
		}
	case 546:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2809
		{
			// TODO(sougou): Deprecate this construct.
			if yyDollar[1].colIdent.Lowered() != "value" {
				yylex.Error("expecting value after next")
				return 1
			}
			yyVAL.expr = NewIntVal([]byte("1"))
		}
	case 547:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2818
		{
			yyVAL.expr = NewIntVal(yyDollar[1].bytes)
		}
	case 548:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2822
		{
			yyVAL.expr = NewValArg(yyDollar[1].bytes)
		}
	case 549:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:2827
		{
			yyVAL.exprs = nil
		}
	case 550:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2831
		{
			yyVAL.exprs = yyDollar[3].exprs
		}
	case 551:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:2836
		{
			yyVAL.expr = nil
		}
	case 552:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2840
		{
			yyVAL.expr = yyDollar[2].expr
		}
	case 553:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:2845
		{
			yyVAL.orderBy = nil
		}
	case 554:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2849
		{
			yyVAL.orderBy = yyDollar[3].orderBy
		}
	case 555:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2855
		{
			yyVAL.orderBy = OrderBy{yyDollar[1].order}
		}
	case 556:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2859
		{
			yyVAL.orderBy = append(yyDollar[1].orderBy, yyDollar[3].order)
		}
	case 557:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2865
		{
			yyVAL.order = &Order{Expr: yyDollar[1].expr, Direction: yyDollar[2].str}
		}
	case 558:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:2870
		{
			yyVAL.str = AscScr
		}
	case 559:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2874
		{
			yyVAL.str = AscScr
		}
	case 560:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2878
		{
			yyVAL.str = DescScr
		}
	case 561:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2882
		{
			yyVAL.str = DescNullsFirstScr
		}
	case 562:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2886
		{
			yyVAL.str = DescNullsLastScr
		}
	case 563:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2890
		{
			yyVAL.str = AscNullsFirstScr
		}
	case 564:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2894
		{
			yyVAL.str = AscNullsLastScr
		}
	case 565:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:2899
		{
			yyVAL.limit = nil
		}
	case 566:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2903
		{
			yyVAL.limit = &Limit{Rowcount: yyDollar[2].expr}
		}
	case 567:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:2907
		{
			yyVAL.limit = &Limit{Offset: yyDollar[2].expr, Rowcount: yyDollar[4].expr}
		}
	case 568:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:2911
		{
			yyVAL.limit = &Limit{Offset: yyDollar[4].expr, Rowcount: yyDollar[2].expr}
		}
	case 569:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:2916
		{
			yyVAL.str = ""
		}
	case 570:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2920
		{
			yyVAL.str = ForUpdateStr
		}
	case 571:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:2924
		{
			yyVAL.str = ShareModeStr
		}
	case 572:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2937
		{
			yyVAL.ins = &Insert{Rows: yyDollar[2].values}
		}
	case 573:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2941
		{
			yyVAL.ins = &Insert{Rows: yyDollar[1].selStmt}
		}
	case 574:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2945
		{
			// Drop the redundant parenthesis.
			yyVAL.ins = &Insert{Rows: yyDollar[2].selStmt}
		}
	case 575:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:2950
		{
			yyVAL.ins = &Insert{Columns: yyDollar[2].columns, Rows: yyDollar[5].values}
		}
	case 576:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:2954
		{
			yyVAL.ins = &Insert{Columns: yyDollar[2].columns, Rows: yyDollar[4].selStmt}
		}
	case 577:
		yyDollar = yyS[yypt-6 : yypt+1]
//line sql.y:2958
		{
			// Drop the redundant parenthesis.
			yyVAL.ins = &Insert{Columns: yyDollar[2].columns, Rows: yyDollar[5].selStmt}
		}
	case 578:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2965
		{
			yyVAL.columns = Columns{yyDollar[1].colIdent}
		}
	case 579:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2969
		{
			yyVAL.columns = Columns{yyDollar[3].colIdent}
		}
	case 580:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2973
		{
			yyVAL.columns = append(yyVAL.columns, yyDollar[3].colIdent)
		}
	case 581:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:2977
		{
			yyVAL.columns = append(yyVAL.columns, yyDollar[5].colIdent)
		}
	case 582:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:2982
		{
			yyVAL.updateExprs = nil
		}
	case 583:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:2986
		{
			yyVAL.updateExprs = yyDollar[5].updateExprs
		}
	case 584:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2992
		{
			yyVAL.values = Values{yyDollar[1].valTuple}
		}
	case 585:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2996
		{
			yyVAL.values = append(yyDollar[1].values, yyDollar[3].valTuple)
		}
	case 586:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3002
		{
			yyVAL.valTuple = yyDollar[1].valTuple
		}
	case 587:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:3006
		{
			yyVAL.valTuple = ValTuple{}
		}
	case 588:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:3012
		{
			yyVAL.valTuple = ValTuple(yyDollar[2].exprs)
		}
	case 589:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3018
		{
			if len(yyDollar[1].valTuple) == 1 {
				yyVAL.expr = &ParenExpr{yyDollar[1].valTuple[0]}
			} else {
				yyVAL.expr = yyDollar[1].valTuple
			}
		}
	case 590:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:3027
		{
			yyVAL.returning = nil
		}
	case 591:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:3032
		{
			yyVAL.returning = Returning{&StarExpr{}}
		}
	case 592:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:3037
		{
			yyVAL.returning = Returning(yyDollar[2].exprs)
		}
	case 593:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3044
		{
			yyVAL.updateExprs = UpdateExprs{yyDollar[1].updateExpr}
		}
	case 594:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:3048
		{
			yyVAL.updateExprs = append(yyDollar[1].updateExprs, yyDollar[3].updateExpr)
		}
	case 595:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:3054
		{
			yyVAL.updateExpr = &UpdateExpr{Name: yyDollar[1].colName, Expr: yyDollar[3].expr}
		}
	case 596:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3060
		{
			yyVAL.setExprs = SetExprs{yyDollar[1].setExpr}
		}
	case 597:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:3064
		{
			yyVAL.setExprs = append(yyDollar[1].setExprs, yyDollar[3].setExpr)
		}
	case 598:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:3070
		{
			yyVAL.setExprs = SetExprs{&SetExpr{Name: yyDollar[1].colIdent, Expr: yyDollar[3].expr}}
		}
	case 599:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:3074
		{
			yyVAL.setExprs = append(yyDollar[1].setExprs, &SetExpr{Name: yyDollar[1].setExprs[0].Name, Expr: yyDollar[3].expr})
		}
	case 600:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:3080
		{
			yyVAL.setExpr = &SetExpr{Name: yyDollar[1].colIdent, Expr: NewStrVal([]byte("on"))}
		}
	case 601:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:3084
		{
			yyVAL.setExpr = &SetExpr{Name: yyDollar[1].colIdent, Expr: yyDollar[3].expr}
		}
	case 602:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:3088
		{
			yyVAL.setExpr = &SetExpr{Name: NewColIdent(string(yyDollar[1].bytes)), Expr: yyDollar[2].expr}
		}
	case 604:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:3095
		{
			yyVAL.bytes = []byte("charset")
		}
	case 606:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3102
		{
			yyVAL.expr = NewStrVal([]byte(yyDollar[1].colIdent.String()))
		}
	case 607:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3106
		{
			yyVAL.expr = NewStrVal(yyDollar[1].bytes)
		}
	case 608:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3110
		{
			yyVAL.expr = &Default{}
		}
	case 611:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:3119
		{
			yyVAL.byt = 0
		}
	case 612:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:3121
		{
			yyVAL.byt = 1
		}
	case 613:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:3124
		{
			yyVAL.empty = struct{}{}
		}
	case 614:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:3126
		{
			yyVAL.empty = struct{}{}
		}
	case 615:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:3129
		{
			yyVAL.str = ""
		}
	case 616:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3131
		{
			yyVAL.str = IgnoreStr
		}
	case 617:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3135
		{
			yyVAL.empty = struct{}{}
		}
	case 618:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3137
		{
			yyVAL.empty = struct{}{}
		}
	case 619:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3139
		{
			yyVAL.empty = struct{}{}
		}
	case 620:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3141
		{
			yyVAL.empty = struct{}{}
		}
	case 621:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3143
		{
			yyVAL.empty = struct{}{}
		}
	case 622:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3145
		{
			yyVAL.empty = struct{}{}
		}
	case 623:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3147
		{
			yyVAL.empty = struct{}{}
		}
	case 624:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3149
		{
			yyVAL.empty = struct{}{}
		}
	case 625:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3151
		{
			yyVAL.empty = struct{}{}
		}
	case 626:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3153
		{
			yyVAL.empty = struct{}{}
		}
	case 627:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:3156
		{
			yyVAL.empty = struct{}{}
		}
	case 628:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3158
		{
			yyVAL.empty = struct{}{}
		}
	case 629:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3160
		{
			yyVAL.empty = struct{}{}
		}
	case 630:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3164
		{
			yyVAL.empty = struct{}{}
		}
	case 631:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3166
		{
			yyVAL.empty = struct{}{}
		}
	case 632:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:3169
		{
			yyVAL.empty = struct{}{}
		}
	case 633:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3171
		{
			yyVAL.empty = struct{}{}
		}
	case 634:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3173
		{
			yyVAL.empty = struct{}{}
		}
	case 635:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:3176
		{
			yyVAL.colIdent = ColIdent{}
		}
	case 636:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:3178
		{
			yyVAL.colIdent = yyDollar[2].colIdent
		}
	case 637:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3182
		{
			yyVAL.colIdent = NewColIdent(string(yyDollar[1].bytes))
		}
	case 638:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3186
		{
			yyVAL.colIdent = NewColIdent(string(yyDollar[1].bytes))
		}
	case 640:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3193
		{
			yyVAL.colIdent = NewColIdent(string(yyDollar[1].bytes))
		}
	case 641:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3199
		{
			if yylex.(*Tokenizer).IsMySQL() && !yylex.(*Tokenizer).dialect.(*mysql.MySQLDialect).IsModeANSIOn() {
				yylex.Error("MySQL dialect configured ANSI_mode=off and doesn't allow double quoted table identifiers")
				return 1
			}
			yyVAL.tableIdent = NewTableIdentWithQuotes(string(yyDollar[1].bytes), '"')
		}
	case 642:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3207
		{
			if yylex.(*Tokenizer).IsPostgreSQL() {
				yylex.Error("PostgreSQL dialect doesn't allow to use backtick quotes for table identifiers")
				return 1
			}
			yyVAL.tableIdent = NewTableIdentWithQuotes(string(yyDollar[1].bytes), '`')
		}
	case 643:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3215
		{
			yyVAL.tableIdent = NewTableIdentWithQuotes(string(yyDollar[1].bytes), '\'')
		}
	case 644:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3220
		{
			yyVAL.tableIdent = NewTableIdent(string(yyDollar[1].bytes))
		}
	case 645:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3224
		{
			yyVAL.tableIdent = NewTableIdent(string(yyDollar[1].bytes))
		}
	case 647:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3231
		{
			yyVAL.tableIdent = NewTableIdent(string(yyDollar[1].bytes))
		}
	case 861:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3476
		{
			if incNesting(yylex) {
				yylex.Error("max nesting level reached")
				return 1
			}
		}
	case 862:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3485
		{
			decNesting(yylex)
		}
	case 863:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:3490
		{
			forceEOF(yylex)
		}
	case 864:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:3495
		{
			forceEOF(yylex)
		}
	case 865:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3499
		{
			forceEOF(yylex)
		}
	case 866:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3503
		{
			forceEOF(yylex)
		}
	}
	goto yystack /* stack new state and value */
}
